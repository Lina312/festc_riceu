C     NEW EPIC SPINUP VERSION 01/08/2013
C EPICP  Grazing 6-26-2012 revision
C     THIS MODEL IS CALLED EPIC (ENVIRONMENTAL POLICY / INTEGRATED 
C     CLIMATE). 
C     IT IS A COMPREHENSIVE AGRICULTURAL MANAGEMENT MODEL THAT IS USEFUL
C     IN SOLVING A VARIETY OF PROBLEMS INVOLVING SUSTAINABLE
C     AGRICULTURE, WATER QUALITY, WATER SUPPLY, AND GLOBAL CLIMATE
C     & CO2 CHANGE.  THE MODEL SIMULATES MOST COMMONLY USED
C     MANAGEMENT PRACTICES LIKE TILLAGE, IRRIGATION, FERTILIZATION,
C     PESTICIDE APPLICATION, LIMING, AND FURROW DIKING.
C     THE MAIN PROGRAM INITIALIZES VARIABLES, ACCUMULATES
C     MONTHLY AND ANNUAL VALUES, AND COMPUTES AVERAGE VALUES FOR THE
C     SIMULATION PERIOD. THE ALMANAC CROP COMPETITION FEATURES ARE
C     INCLUDED IN EPIC FOR THE FIRST TIME (TAKEN FROM ALNC1361)
C     EPIC0509 COMPLETE 20050901
      CHARACTER*1 ASG
      CHARACTER*2 RFPT
      CHARACTER*4 ANM,AYR
      CHARACTER*8 AGIX
      CHARACTER*20 FCMOD,FCROP,FFERT,FMLRN,FOPSC,FPARM,FPEST,FPRNT,
     1FSITE,FSOIL,FTILL,FTR55,FWIDX,FWIND,FWLST,FNLST,FWPM1,FWPM5,VOID

C   TENN
C     2WINDFILE,WPM1FILE
C   TENN

        CHARACTER*400 SCENDIR, WORKDIR, OPCDIR, SITDIR, WEATDIR, SOILDIR 
        CHARACTER*400 CROPNAME, CROPDIR, SHAREDIR, EPIC4CMAQ, MANGDIR,TDRAINDIR
        CHARACTER*400 COMMDIR, INDIR, INDIR2, NDEPDIR
        CHARACTER*400 line14
        CHARACTER*3   RUNTDRAIN
        CHARACTER*2   CROPNUM
        REAL          PARM_9, PARM_10, ARMX_ori, PSTX_ori
        CHARACTER*8   CNYST


	CHARACTER*80 AGSM,TITW5, CO2_FAC
	INTEGER*8    ISIT,INPS,IOPS,LSTN
C  UNC
	INTEGER RECN,SLOPEL,SLOPEU,NSL,HYDDRAINED
        CHARACTER*11  CROPNAME_HI
        REAL*8        HI_TC, CO2FAC
C  UNC

      REAL*8 PPX
      INCLUDE 'EPCM0509_su.for'
      DIMENSION AYR(150),ASG(4),TITW5(2)
      DIMENSION NXX(3,5),NYY(3,5),IG(12),NY(3)
      DIMENSION XZP(13,16),XTP(200),XYP(200),YTP(16),UAV0(12),AKX(3,3),
     1COCH(6),RFPT(4),CSTZ(2)
      DIMENSION PPX(13)
	DATA RFPT/' 1','1A',' 2',' 3'/,ASG/'A','B','C','D'/
	DATA AKX/1.0307,-3.0921,2.0614,-.040816,4.1224,-4.0816
     1,.010101,-1.0303,2.0202/

C   TENN/UNC      

	KWTNA=301
	KWNCM=302
	KWTNS=303
	KWNCF=304
	KWNCS=305
C	KWDNC=306
	KWSNC=307
	KWANC=308
	KWDNCL=309
	KWGRAZE=310
	N1VWB=0
      KWHEAD=0

C       Added by UNC, dyang
C       Environment variables used by this management program
       CALL GETENV( "SCEN_DIR", SCENDIR )
       CALL GETENV( "COMM_DIR", COMMDIR )
       CALL GETENV( "WORK_DIR", WORKDIR )
       CALL GETENV( "SOIL_DIR", SOILDIR )
       CALL GETENV( "WEAT_DIR", WEATDIR )
       CALL GETENV( "SHARE_DIR", SHAREDIR )
       CALL GETENV( "EPIC_CMAQ_OUTPUT", EPIC4CMAQ )
       CALL GETENV( "CROP_NAME", CROPNAME )
       CALL GETENV( "CROP_NUM", CROPNUM )
       CALL GETENV( "NDEP_DIR", NDEPDIR )
       CALL GETENV( "CO2_FAC", CO2_FAC )
       CALL GETENV( "RUN_TD", RUNTDRAIN )

       INDIR = TRIM(COMMDIR)//'/EPIC_model/spinup'
       INDIR2 = TRIM(COMMDIR)//'/EPIC_model'

       CROPDIR = TRIM(SCENDIR)//'/'//ADJUSTL(CROPNAME)
       MANGDIR = TRIM(CROPDIR)//'/spinup/manage'
       OPCDIR = TRIM(MANGDIR)//'/OPC'
       TDRAINDIR = TRIM(MANGDIR)//'/tileDrain'
       SITDIR = TRIM(SHAREDIR)//'/SIT'
       read(CROPNUM, * ) CROPNUM_N
       if ( TRIM(CO2_FAC) .EQ. "" )  THEN
         write(*,*) "Error:  Please add CO2_FAC to script by setenv  CO2_FAC  372.00"
         STOP 1
       ELSE
          read(CO2_FAC, * ) CO2FAC
          write(*,*)  "CO2 Level =", CO2FAC
       END IF
 
       CALL OPENV(KWDNCL,trim(CROPNUM)//'.NCD', trim(EPIC4CMAQ)//'/daily', 'W')
       CALL OPENV(KWSNC,trim(CROPNUM)//'.NCS', trim(EPIC4CMAQ)//'/daily', 'W')
       CALL OPENV(KWANC,trim(CROPNUM)//'.csv', trim(EPIC4CMAQ)//'/5years', 'W')
       CALL OPENV(KWGRAZE,'GRAZE.DAT', WORKDIR, 'W')

C Commented out by RICEU for adding new N VARS
C   TENN/UNC
C      DO 2003 K=1,40
C	OUT(K)=0
C   TENN/UNC
C Added by RICEU for adding new N VARS
      DO 2003 K=1,49
      OUT(K)=0
 2003 CONTINUE
      DO 2012 KJ=1,23
	CROPOUT(KJ)= 0
 2012 CONTINUE
      PLANTDATEAVE =0
      GERMDATEAVE = 0
	HARVDATEAVE = 0

C      Added by UNC for 5-year average daily N DEP input
       USEDEP = .FALSE.
       IF (LEN_TRIM(NDEPDIR) == 0 ) THEN
           WRITE(*,*) "Environmental var NDEP_DIR is not exist. "
           WRITE(*,*) "setenv    NDEP_DIR   RFNO  # for not using DEP data"
           WRITE(*,*) "setenv    NDEP_DIR   $EPIC_DIR/common_data/EPIC_model/dailyNDep_2008"
           STOP 
       ENDIF

       IF (LEN_TRIM(NDEPDIR) > 5 )  USEDEP = .TRUE.
C      WRITE(*,*) "USEDEP= ", USEDEP, NDEPDIR


       USETILED = .FALSE.
       IF ( CROPNUM_N > 6 .AND. CROPNUM_N .NE. 23 .AND. TRIM(RUNTDRAIN) .EQ. 'YES' ) THEN
         USETILED = .TRUE.
         write(*,*) "CROPNUM_N=",CROPNUM_N,"  tileDrain=", RUNTDRAIN
       END IF

C       write(*,*) "USETILED=", USETILED


	IRUN=0
	DO I=1,200
   	KW(I)=I+50
	END DO

      if ( MOD(CROPNUM_N, 2) .EQ. 0 ) THEN
        CALL OPENV(KR(11),'EPICRUNFILEIRR.DAT', MANGDIR, 'R')
      ELSE
        CALL OPENV(KR(11),'EPICRUNFILERAIN.DAT', MANGDIR, 'R')
      END IF

      CALL OPENV(KR(12),'EPICFILE.DAT', INDIR, 'R')
      if ( TRIM(CROPNAME) .EQ. "POTATOES" ) THEN
          CALL OPENV(KR(21),'EPICCONT_POTATOES.DAT', INDIR, 'R')
      ELSE
          CALL OPENV(KR(21),'EPICCONT.DAT', INDIR, 'R')
      END IF

C     UNC  Tech adjust. coeff. for harvest index
      CALL OPENV(KR(32),'HI_PARM50.DAT', INDIR, 'R')

C     UNC
C      CALL OPENV(KR(28),'AYEAR.DAT', CROPDIR, 'R')
C      CALL OPENV(KW(30),'RUN0509.SUM', CROPDIR, 'w')
C     UNC
	CALL OPENV(KW(32),'RTSOIL.DAT',WORKDIR, 'W')
      READ(KR(12),509)FSITE,FWPM1,FWPM5,FWIND,FWIDX,FCROP,FTILL,FPEST,
     1FFERT,FSOIL,FOPSC,FTR55,FPARM,FMLRN,FPRNT,FCMOD,FWLST,FNLST
      
C  1  NBYR0= NUMBER OF YEARS OF SIMULATION
C  2  IYR0 = BEGINNING YEAR OF SIMULATION
C  3  IMO0 = MONTH SIMULATION BEGINS
C  4  IDA0 = DAY OF MONTH SIMULATION BEGINS
C  5  IPD  = N1 FOR 8NNUAL PRINTOUT                     | N YEAR INTERVA
C          = N2 FOR ANNUAL WITH SOIL TABLE              | N=0 SAME AS
C          = N3 FOR MONTHLY                             | N=1 EXCEPT
C          = N4 FOR MONTHLY WITH SOIL TABLE             | N=0 PRINTS
C          = N5 FOR MONTHLY WITH SOIL TABLE AT HARVEST  | OPERATIONS
C          = N6 FOR N DAY INTERVAL
C          = N7 FOR SOIL TABLE ONLY N DAY INTERVAL
C          = N8 FOR N DAY INTERVAL RAINFALL DAYS ONLY
C          = N9 FOR N DAY INTERVAL DURING GROWING SEASON
C  6  NGN  = ID NUMBER OF WEATHER VARIABLES INPUT.  RAIN=1,  TEMP=2,
C            RAD=3,  WIND SPEED=4,  REL HUM=5.  IF ANY VARIABLES ARE INP
C            RAIN MUST BE INCLUDED.  THUS, IT IS NOT NECESSARY TO SPECIF
C            ID=1 UNLESS RAIN IS THE ONLY INPUT VARIABLE.
C            LEAVE BLANK IF ALL VARIABLES ARE GENERATED.  EXAMPLES
C            NGN=1 INPUTS RAIN.
C            NGN=23 INPUTS RAIN, TEMP, AND RAD.
C            NGN=2345 INPUTS ALL 5 VARIABLES.
C  7  IGN  = NUMBER TIMES RANDOM NUMBER GEN CYCLES BEFORE SIMULATION
C            STARTS.
C  8  IGS0 = 0 FOR NORMAL OPERATION OF WEATHER MODEL.
C          = N NO YRS INPUT WEATHER BEFORE REWINDING (USED FOR REAL
C            TIME SIMULATION).
C  9  LPYR = 0 IF LEAP YEAR IS CONSIDERED
C          = 1 IF LEAP YEAR IS IGNORED
C 10  IET  = PET METHOD CODE
C          = 1 FOR PENMAN-MONTEITH
C          = 2 FOR PENMAN
C          = 3 FOR PRIESTLEY-TAYLOR
C          = 4 FOR HARGREAVES
C          = 5 FOR BAIER-ROBERTSON
C 11  ISCN = 0 FOR STOCHASTIC CURVE NUMBER ESTIMATOR.
C          > 0 FOR RIGID CURVE NUMBER ESTIMATOR.
C 12  ITYP = 0 FOR MODIFIED RATIONAL EQ PEAK RATE ESTIMATE.
C          > 0 FOR SCS TR55 PEAK RATE ESTIMATE.
C          = 1 FOR TYPE 1 RAINFALL PATTERN
C          = 2     TYPE 1A
C          = 3     TYPE 2
C          = 4     TYPE 3
C 13  ISTA = 0 FOR NORMAL EROSION OF SOIL PROFILE
C          = 1 FOR STATIC SOIL PROFILE
C 14  IHUS = 0 FOR NORMAL OPERATION
C          = 1 FOR AUTOMATIC HEAT UNIT SCHEDULE(PHU MUST BE INPUT AT
C            PLANTING)
C 15  NCOW = # COWS
!          <0 SETS NCOW AUTOMATICALLY
C 16  NVCN = 0 VARIABLE DAILY CN WITH DEPTH SOIL WATER WEIGHTING
C          = 1 VARIABLE DAILY CN WITHOUT DEPTH WEIGHTING
C          = 2 VARIABLE DAILY CN LINEAR CN/SW NO DEPTH WEIGHTING
C          = 3 NON-VARYING CN--CN2 USED FOR ALL STORMS
C          = 4 VARIABLE DAILY CN SMI(SOIL MOISTURE INDEX)
C 17  INFL = 0 FOR CN ESTIMATE OF Q
C          = 1 FOR GREEN & AMPT ESTIMATE OF Q, RF EXP DST, PEAK RF RATE
C              SIMULATED.
C          = 2 FOR G&A Q, RF EXP DST, PEAK RF INPUT
C          = 3 FOR G&A Q, RF UNIFORMLY DST, PEAK RF INPUT
C 18  MASP < 0 FOR MASS ONLY NO PESTICIDE IN .OUT
C          = 0 FOR MASS ONLY PESTICIDES IN .OUT
C          > 0 FOR PESTICIDE & NUTRIENT OUTPUT IN MASS & CONCENTRATION
C 19  LBP  = 0 FOR SOL P RUNOFF ESTIMATE USING GLEAMS PESTICIDE APPROACH
C          > 0 FOR MODIFIED NONLINEAR APPROACH
C 20  NSTP = REAL TIME DAY OF YEAR
C 21  IGMX = # TIMES GENERATOR SEEDS ARE INITIALIZED FOR A SITE.
C 22  IERT = 0 FOR EPIC ENRICHMENT RATIO METHOD
C          = 1 FOR GLEAMS ENRICHMENT RATIO METHOD
C 23  ICG  = CROP GROWTH BIOMASS CONVERSION OPTION
C          = 0 FOR TRADITIONAL EPIC RADIATION TO BIOMASS
C          > 0 FOR NEW EXPERIMENTAL WATER USE TO BIOMASS
C 24  LMS  = 0 APPLIES LIME
C          = 1 DOES NOT APPLY LIME
C 25  ICF  = 0 USES RUSLE C FACTOR FOR ALL EROSION EQS
C          > 0 USES EPIC C FACTOR FOR ALL EROSION EQS EXCEPT RUSLE
C 26  ISW  = 0 FIELD CAP/WILTING PT EST RAWLS METHOD DYNAMIC.
C          = 1 FIELD CAP/WILTING PT EST BAUMER METHOD DYNAMIC.
C          = 2 FIELD CAP/WILTING PT INP RAWLS METHOD DYNAMIC.
C          = 3 FIELD CAP/WILTING PT INP BAUMER METHOD DYNAMIC.
C          = 4 FIELD CAP/WILTING PT EST RAWLS METHOD STATIC.
C          = 5 FIELD CAP/WILTING PT EST BAUMER METHOD STATIC.
C          = 6 FIELD CAP/WILTING PT INP STATIC.
!          = 7 FIELD CAP/WILTING PT NEAREST NEIGHBOR DYNAMIC
!          = 8 FIELD CAP/WILTING PT NEAREST NEIGHBOR STATIC
C 27  IRW  = 0 FOR NORMAL RUNS WITH DAILY WEATHER INPUT
C          > 0 FOR CONTINUOUS DAILY WEATHER FROM RUN TO RUN(NO REWIND)
C 28  ICO2 = 0 FOR CONSTANT ATMOSPHERIC CO2
C          = 1 FOR DYNAMIC ATMOSPHERIC CO2
!          = 2 FOR INPUTTING CO2 
C 29  IDUM = 0 FOR READING DATA FROM WORKING DIRECTORY
C          > 0 FOR READING FROM WEATDATA DIRECTORY
C 30  ICOR = 0 FOR NORMAL RUN
C          = DAY OF YEAR WHEN WEATHER CORRECTION TO SIMULATE INPUT MO MEANS   
C            STOPS
C 31  IDN  = 0 FOR ORIGINAL EPIC DENITRIFICATION SUBPROGRAM.
C          > 0 FOR ARMEN KEMANIAN DENITRIFICATION SUBPROGRAM
C          = 1 FOR ARMEN KEMANIAN DENITRIFICATION SUBPROGRAM
C          = 2 FOR RICEU DENITRIFICATION SUBPROGRAM 
C 32  NUPC = N AND P PLANT UPTAKE CONCENTRATION CODE
C          = 0 FOR SMITH CURVE
C          > 0 FOR S CURVE
C 33  IOX  = 0 FOR ORIGINAL EPIC OXYGEN/DEPTH FUNCTION
C          > 0 FOR ARMEN KEMANIAN CARBON/CLAY FUNCTION
! 34  IDI0 = 0 FOR READING DATA FROM WORKING DIRECTORY
!          = 1 FOR READING FROM WEATDATA DIRECTORY
!          = 2 FOR READING FROM WORKING DIRECTORY + 3 OTHER DIRECTORIES
! 35  IPAT = 0 TURNS OFF AUTO P APPLICATION
!          > 0 FOR AUTO P APPLICATION
! 36  IPRK = 0 FOR HPERC
!          = 1 FOR HPERC1 (4MM SLUG FLOW)
C     LINE 1/2
      READ(KR(21),300)NBYR0,IYR0,IMO0,IDA0,IPD,NGN,IGN,IGS0,LPYR,IET,
     &ISCN,ITYP,ISTA,IHUS,NCOW0,NVCN,INFL0,MASP,LBP,NSTP,IGMX,IERT,ICG,
     &LMS,ICF,ISW,IRW,ICO2,IDUM,ICOR,IDN,NUPC,IOX,IDI0,IPAT,IPRK 

C   UNC
      NBYRVWB=NBYR0
C   UNC

       CALL OPENV(KR(6),FMLRN, INDIR, 'R') 
       CALL OPENV(KR(2),FPARM, INDIR, 'R')
       CALL OPENV(KR(5),FPRNT, INDIR, 'R')
       CALL OPENV(KR(26),FCMOD, INDIR, 'R')
       CALL OPENV(KR(3),FTILL, INDIR, 'R')
       CALL OPENV(KR(4),FCROP, INDIR, 'R')
       CALL OPENV(KR(8),FPEST, INDIR, 'R')
       CALL OPENV(KR(9),FFERT, INDIR, 'R')
       CALL OPENV(KR(10),FTR55, INDIR, 'R')

       IF ( USETILED )  THEN              
           CALL OPENV(KR(13),FSOIL, TDRAINDIR, 'R')
       ELSE
           CALL OPENV(KR(13),FSOIL, CROPDIR, 'R')
       ENDIF

       CALL OPENV(KR(15),FOPSC, MANGDIR, 'R')
       CALL OPENV(KR(17),FWPM1, INDIR, 'R')
       CALL OPENV(KR(18),FWPM5, INDIR, 'R')
       CALL OPENV(KR(19),FWIND, INDIR, 'R')
       CALL OPENV(KR(20),FWIDX, INDIR, 'R')
       CALL OPENV(KR(23),FSITE, SHAREDIR, 'R')
       CALL OPENV(KR(27),FWLST, INDIR, 'R')
       IF ( USEDEP ) CALL OPENV(KR(30),FNLST, INDIR2, 'R')

C     SCRP = S CURVE SHAPE PARAMETERS (CONSTANTS EXCEPT FOR
C            EXPERIMENTAL PURPOSES)
C     LINE 1/25
   18 READ(KR(2),239)((SCRP(I,J),J=1,2),I=1,30)
C     MISCELLANEOUS PARAMETERS(CONSTANTS EXCEPT FOR EXPERIMENTAL PURPOSES
C     LINE 26/32
      READ(KR(2),303)PARM

C     UNC modification for PARM(13) for HARGREAVES PET METHOD
      IF( IET == 4 )  PARM(13)=0.0
C     UNC

C     UNC modification for PARM(50) based on input from: HI_PARM50.DAT
      DO
        READ(KR(32),910,IOSTAT=NFL)CROPNAME_HI,HI_TC
        IF(NFL/=0)EXIT
        IF ( TRIM(CROPNAME) .EQ. TRIM(CROPNAME_HI) ) THEN
C           WRITE(*,*)'CROPNAME=',TRIM(CROPNAME),' CROPNAME_HI=',CROPNAME_HI,' HI_TC=',HI_TC
C           PARM(50) = HI_TC  
          EXIT 
        END IF
      END DO
      CLOSE(KR(32))
  910 FORMAT(A11,F6.4)
C     UNC

C     For EPA, LRan
C     EPA saves PARM 9 and PARM 10 for changes with regions
      PARM_9 = PARM(9)
      PARM_10 = PARM(10)
C     EPA

C     READ ECONOMIC DATA
C  1  COIR = COST OF IRRIGATION WATER ($/MM)
C  2  COL  = COST OF LIME ($/T)
C  3  FULP = COST OF FUEL ($/L)
C  4  WAGE = LABOR COST ($/H)
C  5  CSTZ = MISCELLANEOUS COST ($/HA)
C  6  1/2
C     LINE 33
      READ(KR(2),303)COIR,COL,FULP,WAGE,CSTZ(1),CSTZ(2)
      CLOSE(KR(2))
      DO 23 I=1,2
      DO 23 J=1,30
   23 VIRR(I,J)=SCRP(J,I)
      DO 24 I=1,29
      IF(SCRP(I,1).LT.1.E-10)GO TO 24
      X1=ASPLT(SCRP(I,1))
      X2=ASPLT(SCRP(I,2))
      CALL ASCRV(SCRP(I,1),SCRP(I,2),X1,X2)
   24 CONTINUE
C     CQP  = COEFS OF 7TH DEG POLY IN TR55 QP EST
      READ(KR(10),396)CQP
C     COCH = COEFS FOR CHANNEL GEOMETRY X=COCH(N)*WSA**COCH(N+1)
C            X=DEPTH FOR COCH(3) & COCH(4)
C            X=LENGTH FOR COCH(5) & COCH(6)
      READ(KR(10),303)COCH
      CLOSE(KR(10))
      IF(COCH(3).LT.1.E-10)COCH(3)=.0208
      IF(COCH(4).LT.1.E-10)COCH(4)=.4
      IF(COCH(5).LT.1.E-10)COCH(5)=.0803
      IF(COCH(6).LT.1.E-10)COCH(6)=.6
C     UNC
C	READ(KR(28),*,END=735)AYR
C  735	REWIND KR(28)
C	READ(KR(28),*,END=736)IGY
C     UNC

C     KA   = OUTPUT VARIABLE ID NO (ACCUMULATED AND AVERAGE VALUES)
C     SELECT FROM THIS LIST:(UP TO 60 VARIABLES)
C      1  TMX,  2  TMN,  3  RAD,  4 PRCP,  5 SNOF,  6 SNOM,  7 WSPD,
C      8 RHUM,  9  VPD, 10  PET, 11   ET, 12   EP, 13    Q, 14   CN,
C     15  SSF, 16  PRK, 17 QDRN, 18 IRGA, 19  QIN, 20 TLGE, 21 TLGW,
C     22 TLGQ, 23 TLGF, 24   EI, 25    C, 26 USLE, 27 MUSL, 28  AOF,
C     29 MUSS, 30 MUST, 31 MUSI, 32  WK1, 33 RHTT, 34 RRUF, 35 RGRF,
C     36   YW, 37  YON, 41  MNN, 42   DN, 43 NFIX, 44  HMN, 45 NITR,
C     46 AVOL, 47 DRNN, 48   YP, 50  MNP, 51 PRKP, 52   ER, 53  FNO,
C     54 FNO3, 55 FNH3, 56  FPO, 57  FPL, 58 LIME, 59  TMP, 66 SW10
C     LINE 1/3
  736 READ(KR(5),300)(KDC1(I),I=1,NKA)
      DO 2 I=1,NKA
      IF(KDC1(I).LE.0)GO TO 3
      KA(I)=KDC1(I)
    2 CONTINUE
    3 NKA=I-1
C     JC = OUTPUT VARIABLE ID NO (CONCENTRATION VARIABLES)
C     SELECT FROM THIS LIST: (UP TO 4 VARIABLES)
C     38 QNO3, 39 SSFN, 40 PRKN, 49  QAP
C     LINE 4
      READ(KR(5),300)(KDC1(I),I=1,NJC)
      DO 5 I=1,NJC
      IF(KDC1(I).LE.0)GO TO 6
      JC(I)=KDC1(I)
    5 CONTINUE
    6 NJC=I-1
C     KS = OUTPUT VARIABLE ID NO (MO STATE VARIABLES)
C     SELECT FROM THIS LIST: (UP TO 27 VARIABLES)
C     1 TNH3, 2 TNO3, 3 PLAB, 4 UNO3, 5  UPP, 6 RZSW, 7 WTBL, 8 GWST,
C     9  STD, 10 RSD, 11 TOC, 12 SNOA
C     LINE 5/6
      READ(KR(5),300)(KDC1(I),I=1,NKS)
      DO 8 I=1,NKS
      IF(KDC1(I).LE.0)GO TO 9
      KS(I)=KDC1(I)
    8 CONTINUE
    9 NKS=I-1
C     KD = DAILY OUTPUT VARIABLE ID NO
C     SELECT FROM ACCUMULATED AND AVERAGE LIST (UP TO 40 VARIABLES)
C     LINE 7/8
      READ(KR(5),300)(KDC1(I),I=1,NKD)
      DO 11 I=1,NKD
      IF(KDC1(I).LE.0)GO TO 12
   11 KD(I)=KDC1(I)
   12 NKD=I-1
C     KYA = ANNUAL OUTPUT TO FILE VARIABLE ID NOS(ACCUMULATED
C     AND AVERAGE VALUES)
C     SELECT FROM THE KA LIST ABOVE: (UP TO 40 VARIABLES)
C     LINE 9/10
      READ(KR(5),300)(KDC1(I),I=1,NKYA)
      DO 14 I=1,NKYA
      IF(KDC1(I).LE.0)GO TO 15
   14 KYA(I)=KDC1(I)
   15 NKYA=I-1
C     KFS = MONTHLY FLIPSIM VARIABLES.  SELECT FROM THE ACCUMULATED AND
C     AVERAGE LIST ABOVE (UP TO 40 VARIABLES)
C     LINE 11/12
      READ(KR(5),300)(KDC1(I),I=1,NFS)
      DO 687 I=1,NFS
      IF(KDC1(I).LE.0)GO TO 688
  687 IFS(I)=KDC1(I)
  688 NFS=I-1
C     SELECT OUTPUT FILES--KFL=0(NO OUTPUT); KFL>0(GIVES OUTPUT FOR
C     SELECTED FILE)
C     1  OUT = STANDARD OUTPUT
C     2  ACM = ANNUAL CROPMAN
C     3  SUM = AVE ANNUAL SUMMARY
C     4  DHY = DAILY HYDROLOGY 
C     5  DPS = DAILY PESTICIDE 
C     6  MFS = MONTHLY FLIPSIM 
C     7  MPS = MONTHLY PESTICIDE
C     8  ANN = ANNUAL 
C     9  SOL = ENDING SOIL TABLE
C    10  DTP = DAILY SOIL TEMPERATURE
C    11  MCM = MONTHLY CROPMAN
C    12  DCS = DAILY CROP STRESS
C    13  SCO = SUMMARY OPERATION COST
C    14  ACN = ANNUAL SOIL ORGANIC C & N TABLE
C    15  DCN = DAILY SOIL ORGANIC C & N TABLE
C    16  SCN = SUMMARY SOIL ORGANIC C & N TABLE
C    17  DGN = DAILY GENERAL OUTPUT
C    18  DWT = DAILY SOIL WATER IN CONTROL SECTION AND .5M SOIL T
C    19  ACY = ANNUAL CROP YIELD 
C    20  ACO = ANNUAL COST 
C    21  DSL = DAILY SOIL TABLE.
C    22  MWC = MONTHLY WATER CYCLE + N CYCLE
C    23  ABR = ANNUAL BIOMASS ROOT WEIGHT
C    24  ATG = ANNUAL TREE GROWTH.
C    25  MSW = MONTHLY OUTPUT TO SWAT.
C    26  APS = ANNUAL PESTICIDE
C    27  DWC = DAILY WATER CYCLE
C    28  DHS = DAILY HYDROLOGY/SOIL  
C    29  RUN0509.SUM = AVE ANNUAL SUMMARY FILE FOR ALL SIMULATIONS IN A 
C        BATCH.
!    32  DGZ = DAILY GRAZING FILE
C    33  SGI = SUMMARY GIS FILE
C    34  ANNUAL FILES FOR GIS
C    35  TNA  ANNUAL FILE DESIGNED FOR U OF TENNESSEE
C    36  TNS  SUMMARY FILE DESIGNED FOR U OF TENNESSEE
C    37  NCM  MONTHLY OUTPUT FOR UNC /NCM
C    38  NCS  SUMMARY OUTPUT FOR UNC

C     LINE 13/14
      READ(KR(5),300)KFL
C     LINE 15/16
	READ(KR(5),300)NHC
C     LINE 17 
	READ(KR(5),300)NDC
	IF(NHC(1).NE.0)GO TO 713
	DO 712 I=1,26
  712	NHC(I)=I
  713 IF(NDC(1).NE.0)GO TO 724  
  	DO 725 I=1,10
  725	NDC(I)=I
  724 CLOSE(KR(5))
	NGN0=NGN
	ICOR0=ICOR
C  1  RFN0 = AVE CONC OF N IN RAINFALL (PPM)
C  2  CO20 = CO2 CONCENTRATION IN ATMOSPHERE (PPM)
C  3  CNO30= CONC OF NO3 IN IRRIGATION WATER (PPM)
C  4  CSLT=  CONC OF SALT IN IRRIGATION WATER (PPM)
C  5  PSTX = PEST DAMAGE SCALING FACTOR (0.-10.)--0. SHUTS OFF PEST
C            DAMAGE FUNCTION. PEST DAMAGE FUNCTION CAN BE REGULATED FROM
C            VERY MILD(0.05-0.1) TO VERY SEVERE(1.-10.)
C  6  YWI  = NO Y RECORD MAX .5H RAIN (BLANK IF WI IS NOT
C            INPUT--LINE 19)
C  7  BTA  = COEF (0-1)GOVERNING WET-DRY PROBABILITIES GIVEN DAYS
C            OF RAIN (BLANK IF UNKNOWN OR IF W|D PROBS ARE
C            INPUT--LINES 16 & 17)
C  8  EXPK = PARAMETER USED TO MODIFY EXPONENTIAL RAINFALL AMOUNT
C            DISTRIBUTION (BLANK IF UNKNOWN OR IF ST DEV & SK CF ARE
C            INPUT--LINES 14 & 15)
C  9  FL   = FIELD LENGTH (KM)(BLANK IF UNKNOWN
C 10  FW   = FIELD WIDTH (KM)(BLANK IF UNKNOWN
C 11  ANG0 = CLOCKWISE ANGLE OF FIELD LENGTH FROM NORTH (DEG)(BLANK IF
C            UNKNOWN)
C 12  STD0 = STANDING DEAD CROP RESIDUE (T/HA)(BLANK IF UNKNOWN
C 13  UXP  = POWER PARAMETER OF MODIFIED EXP DIST OF WIND SPEED (BLANK
C            IF UNKNOWN)
C 14  DIAM = SOIL PARTICLE DIAMETER (UM)(BLANK IF UNKNOWN
C 15  ACW  = WIND EROSION CONTROL FACTOR
C          = 0.0 NO WIND EROSION
C          = 1.0 FOR NORMAL SIMULATION
C          > 1.0 ACCELERATES WIND EROSION (CONDENSES TIME)
C 16  BIR  = IRRIGATION TRIGGER--3 OPTIONS
C            1. PLANT WATER STRESS FACTOR (0-1)
C            2. SOIL WATER TENSION IN TOP 200 MM(> 1 KPA)
C            3. PLANT AVAILABLE WATER DEFICIT IN ROOT ZONE (-MM)
C 17  EFI  = RUNOFF VOL / VOL IRR WATER APPLIED (BLANK IF IRR=0)
C 18  VIMX = MAXIMUM ANNUAL IRRIGATION VOLUME ALLOWED (MM)
C 19  ARMN = MINIMUM SINGLE APPLICATION VOLUME ALLOWED (MM)
C 20  ARMX = MAXIMUM SINGLE APPLICATION VOLUME ALLOWED (MM)
C 21  BFT0 = AUTO FERTILIZER TRIGGER--2 OPTIONS
C            1. PLANT N STRESS FACTOR (0-1)
C            2. SOIL N CONC IN ROOT ZONE (G/T)
C 22  FNP  = FERT APPLICATION VARIABLE--2 MEANINGS
C            1. APPLICATION RATE AUTO/FIXED (KG/HA)
C            2. MANURE INPUT TO LAGOON (KG/COW/D) IRR=4
C     CHANGE 01/02/2013
C 23  FMX0 = MAXIMUM ANNUAL N FERTILIZER APPLICATION FOR A CROP(KG/HA)
C     PRIOR TO 01/02/2013
C 23  FMX  = MAXIMUM ANNUAL N FERTILIZER APPLICATION FOR A CROP(KG/HA)
C 24  DRT  = TIME REQUIRED FOR DRAINAGE SYSTEM TO REDUCE PLANT STRESS(D)
C            (BLANK IF DRAINAGE NOT USED)
C 25  FDS0 = FURROW DIKE SAFETY FACTOR (0-1.)
C 26  PEC0 = CONSERVATION PRACTICE FACTOR(=0.0 ELIMINATES WATER EROSION)
C 27  VLGN = LAGOON VOLUME RATIO--NORMAL / MAXIMUM
C 28  COWW = LAGOON INPUT FROM WASH WATER (M**3/COW/D)
C 29  DDLG = TIME TO REDUCE LAGOON STORAGE FROM MAX TO NORM (D)
C 30  SOLQ = RATIO LIQUID/TOTAL MANURE APPLIED
C 31  GZLM = ABOVE GROUND PLANT MATERIAL GRAZING LIMIT (T/HA)
C 32  FFED = FRACTION OF TIME HERD IS IN FEEDING AREA
C 33  DRV  = SPECIFIES WATER EROSION DRIVING EQ.
C            (0=MUST;  1=AOF;  2=USLE;  3=MUSS;  4=MUSL;  5=MUSI;  
C             6=RUSLE;  7=RUSL2)
C 34  BUS  = INPUT PARMS FOR MUSI
C            YSD(6)=BUS(1)*QD**BUS(2)*QP**BUS(3)*WSA**BUS(4)*KCPLS
C     LINE 3/6
      READ(KR(21),303)RFN0,CO20,CNO30,CSLT,PSTX,YWI,BTA,EXPK,FL,FW,ANG0,
     &STD0,UXP,DIAM,ACW,BIR,EFI,VIMX,ARMN,ARMX,BFT0,FNP,FMX0,DRT,FDS0,
     &PEC0,VLGN,COWW,DDLG,SOLQ,GZLM,FFED,DRV,BUS

C Added by UNC, EPA 
      ARMX_ori = ARMX
      PSTX_ori = PSTX
      CO20 = CO2FAC 
      IF ( USEDEP ) RFN0 = 0.0
C END of UNC, EPA

      BUS0=BUS(1)
      ANG=ANG0/CLT
C     READ ECONOMIC DATA
C  1  COIR = COST OF IRRIGATION WATER ($/M**3)
C  2  COL  = COST OF LIME ($/T)
C  3  FULP = COST OF FUEL ($/GAL)
C  4  WAGE = LABOR COST ($/H)
C  5  CSTZ = MISCELLANEOUS COST ($/HA)
C  6  1/2
C     LINE 7                                                           
      READ(KR(21),303)(XTP(I),I=1,6)
      IF(XTP(1).GT.0.)COIR=XTP(1)
      IF(XTP(2).GT.0.)COL=XTP(2)
      IF(XTP(3).GT.0.)FULP=XTP(3)
      IF(XTP(4).GT.0.)WAGE=XTP(4)
      IF(XTP(5).GT.0.)CSTZ(1)=XTP(5)
      IF(XTP(6).GT.0.)CSTZ(2)=XTP(6)
      IF(ARMX.LT.1.E-10)ARMX=1000.
      IF(FMX0.LT.1.E-10)FMX0=200.
      IF(GZLM.LT..01)GZLM=.01
      IF(UXP.LT.1.E-10)UXP=.5
      IF(DIAM.LT.1.E-10)DIAM=500.
      USTRT=.0161*SQRT(DIAM)
      USTT=USTRT*USTRT
	DO 87 I=1,3
   87 PSZ(I)=.411*PSZ(I)*PSZ(I)
      CALL ATIMER(0)
      IF(ISW>6)THEN
	CALL OPENV(KR(29),'SOIL38K.DAT',WEATDIR, 'R')
	READ(KR(29),528)XAV,XDV,XRG,BRNG,NSX
	NSNN=.655*NSX**.493
	EXNN=.767*NSX**.049
  528 FORMAT(10F10.0,I10)
	DO I=1,NSX
	READ(KR(29),528)(XSP(I,J),J=1,5)
	NX(I)=I
	END DO
	CLOSE(KR(29))
	END IF
C	CALL DATE_AND_TIME(AYMD,AHMS)
      IF(KFL(29).EQ.0)GO TO 621
      WRITE(KW(30),2073)IYER,IMON,IDAY,IT1,IT2,IT3
      WRITE(KW(30),693)(HED(KYA(J)),J=1,NKYA)
  621 IF(FL.LT.1.E-10)FL=.632
      IF(FW.LT.1.E-10)FW=.316
      NDRV=DRV+1.1
      IF(YWI.LT.1.E-10)YWI=10.
      IF(BTA.LT.1.E-10)BTA=.75
      IF(EXPK.LT.1.E-10)EXPK=1.3
	IF(KFL(NGF).EQ.0)GO TO 519
	DO 738 I=1,150
	IF(IYR0.EQ.IGY(I))GO TO 739
  738 CONTINUE
      GO TO 519
  739 IGYX=I
      N1=NGF-1
        AGSM=AYR(I)//"-"//AYR(I+NBYR0-1)//".TXT"
        CALL OPENV(KW(N1),AGSM, CROPDIR, ' ')
        IF(KFL(NGF).LT.0)GO TO 435
        DO 
	READ(KW(N1),505,IOSTAT=NFL)WINDFILE
	IF(NFL/=0)EXIT
	END DO
  435	IGIS=NGF
	DO 737 I=1,NBYR0
	AGIX=AYR(IGYX)//".TXT"
	IGYX=IGYX+1
	CALL OPENV(KW(IGIS), AGIX, CROPDIR, ' ')
	IF(KFL(NGF).LT.0)GO TO 740
	DO 
		READ(KW(IGIS),505,IOSTAT=NFL)WINDFILE
		IF(NFL/=0)EXIT
	END DO
  740	IGIS=IGIS+1
  737 CONTINUE
C   UNC

   
C   UNC
C  1  ASTN = RUN #
C  2  ISIT = SITE #
C  3  IWP1 = WEATHER STA # FROM KR(17) WPM10509.DAT
C  4  IWP5 = WEATHER STA # FROM KR(18) WPM10509.DAT
C  5  IWND = WIND STA # FROM KR(19) WIND0509.DAT
C  6  INPS = SOIL # FROM TABLE KR(13)
C  7  IOPS = OP SCHED # FROM TABLE KR(15)
C  8  IWTH = DAILY WEATHER STA # FROM KR(27) WTHCOM.DAT
  519 READ(KR(11),*,END=219)ASTN,ISIT,IWP1,IWP5,IWND,INPS,IOPS,IWTH
      IF(ISIT==0)GO TO 219   !added by Jimmy 2017-01-04

C   UNC
C   RESET FERTILIZER APPLICATION VARIABLE TO 0
	X1VWB=0
	ZFTVWB=0
	X3VWB=0
	X4VWB=0
	X5VWB=0
      X2VWB=0
	X6VWB=0
	XHSMVWB=0
C  UNC
      IF(ISIT.EQ.0)GO TO 219
	ASTN=ADJUSTR(ASTN)
	IDFX=0
C	WRITE(*,679)ASTN,ISIT,IWP1,INPS,IOPS
	K19=0
      CALL OPENF(WORKDIR)
	NBYR=NBYR0
        FMX=FMX0

	WRITE(KW(1),508)'FSITE',FSITE,'FWPM1',FWPM1,'FWPM5',FWPM5,'FWIND',
     1FWIND,'FWIDX',FWIDX,'FCROP',FCROP,'FTILL',FTILL,'FPEST',FPEST,
     2'FFERT',FFERT,'FSOIL',FSOIL,'FOPSC',FOPSC,'FTR55',FTR55,'FPARM',
     3FPARM,'FMLRN',FMLRN,'FPRNT',FPRNT,'FCMOD',FCMOD,'FWLST',FWLST,
     4'FNLST',FNLST

      WPM1FILE=' '
      WINDFILE=' '

	UAV0=0.
      NYD=1
      DO 542 I=1,5
      KGN(I)=0
  542 CONTINUE
      CALL AINLZ
      CALL AINIX
	DO 717 J=1,21
  717 IDG(J)=J
      NGN=NGN0
      IWRT=0
      IRO0=1
      IRUN=IRUN+1
      WRITE(KW(1),346)
      WRITE(KW(1),229)
      WRITE(KW(1),287)HED
      WRITE(KW(1),245)
      DO 25 J=1,30
   25 WRITE(KW(1),242)J,PARM(J),(VIRR(I,J),I=1,2),(SCRP(J,I),I=1,2)
      DO 389 J=31,SIZE(PARM)
  389 WRITE(KW(1),242)J,PARM(J)
      DO 
        READ(KR(23),2455,IOSTAT=NFL)LSTN,SITEFILE,CNYST
C        write(*,*) LSTN,SITEFILE,CNYST
C        IF(INDEX(CNYST, "TX") .GT. 0)  write(*,*) "has TX, ", CNYST

	IF(NFL/=0)EXIT
	IF(LSTN.EQ.ISIT)GO TO 728
      END DO
      REWIND KR(23)
      WRITE(*,*)'SITE NO = ',ISIT,' NOT IN SITE LIST FILE'
      GO TO 519
  728 REWIND KR(23)
      CALL OPENV(KR(1), SITEFILE, SITDIR, 'R')
C     TITLE=PROBLEM DESCRIPTION(3 LINES)
C     LINES 1/3
      READ(KR(1),299)(TITLE(I),I=1,60)

C     EPA - read region by LRan
      READ(TITLE(29),3001)  REG_N
C      write(*,*)  "KR(1): ", TITLE(29), " REG_N=",REG_N
C     END EPA

	CALL APAGE(0)
      INFL=INFL0+1
      IF(IRW.EQ.0)GO TO 681
      IF(IRUN.EQ.1)GO TO 681
      GO TO 682
  681 IYR=IYR0
  682 IBDT=IDA0+100*IMO0+10000*IYR
      CALL AISPL(IPD,INP)
      IF(IWP5.EQ.0)GO TO 622
      READ(KR(20),505)VOID
      READ(KR(20),300)II
      II=IYR-II
      DO 608 I=1,II
      READ(KR(20),505)VOID
  608 CONTINUE
  622 NOP=1
      IF(IPD.LE.5.AND.INP.GT.0)NOP=0
      IF(INP.EQ.0)INP=1
      IF(IPD.LE.5)IPYI=INP
C  1  YLAT = LATITUDE(DEG)
C  2  XLOG = LONGITUDE(DEG)
C  3  ELEV = ELEVATION OF WATERSHED (M)
C  4  APM  = PEAK RATE - EI ADJUSTMENT FACTOR (BLANK IF UNKNOWN)
C  5  CO2X = CO2 CONCENTRATION IN ATMOSPHERE (PPM)--NON ZERO VALUE
C            OVERRIDES CO2 INPUT IN EPICCONT.DAT
C  6  CNO3X= CONC OF NO3 IN IRRIGATION WATER (PPM)--NON ZERO VALUE
C            OVERRIDES CNO30 INPUT IN EPICCONT.DAT 
C  7  RFNX = AVE CONC OF N IN RAINFALL (PPM)
C  8  X1   = DUMMY
C  9  X2   = DUMMY
C 10  SNO0 = WATER CONTENT OF SNOW ON GROUND AT START OF SIMULATION(MM)
C     LINE 4
      READ(KR(1),303)YLAT,XLOG,ELEV,APM,CO2X,CNO3X,RFNX,X1,X2,SNO0

C  1  WSA  = WATERSHED AREA(HA)
C  2  CHL  = MAINSTEM CHANNEL LENGTH (KM)(BLANK IF UNKNOWN
C  3  CHS  = MAINSTEM CHANNEL SLOPE (M/M)(BLANK IF UNKNOWN
C  4  CHD  = CHANNEL DEPTH (M)
C  5  CHN  = MANNINGS N FOR CHANNEL (BLANK IF UNKNOWN)
C  6  SN   = SURFACE N VALUE (BLANK IF UNKNOWN)
C  7  UPSL = UPLAND SLOPE LENGTH (M)
C  8  UPS  = UPLAND SLOPE STEEPNESS (M/M)
!  9  PEC  = CONSERVATION PRACTICE FACTOR(=0.0 ELIMINATES WATER EROSION)  
C     LINE 5
      READ(KR(1),303)WSA,CHL,CHS,CHD,CHN,SN,UPSL,UPS,PEC
	IF(PEC<1.E-10)PEC=PEC0
      IF(NCOW0>0)THEN
          RSTK=WSA/REAL(NCOW0)
      ELSE
          RSTK=0.
      END IF

C     READ MANAGEMENT INFORMATION
C  1  IRR  = N0 FOR DRYLAND AREAS          | N = 0 APPLIES MINIMUM OF
C          = N1 FROM SPRINKLER IRRIGATION  | VOLUME INPUT, ARMX, & FC-SW
C          = N2 FOR FURROW IRRIGATION      | N = 1 APPLIES INPUT VOLUME
C          = N3 FOR IRR WITH FERT ADDED    | OR ARMX
C          = N4 FOR IRR FROM LAGOON        |
C          = N5 FOR DRIP IRR
C  2  IRI  = N DAY APPLICATION INTERVAL FOR AUTOMATIC IRRIGATION--------------------------------------------------------------------------------------------------------
C  3  IFA  = MIN FERT APPL INTERVAL(BLANK FOR USER SPECIFIED)
C  4  IFD  = 0 WITHOUT FURROW DIKES
C            1 WITH FURROW DIKES
C  5  IDR0 = 0 NO DRAINAGE
C          = DEPTH OF DRAINAGE SYSTEM(MM)
C  6  IDF0 = FERT # FOR AUTO FERT & FERTIGATION--BLANK DEFAULTS TO
C            ELEMENTAL N
C  7  MNU  = > 0 AUTO DRY MANURE APPL WITHOUT TRIGGER
C  8  IMW  = MIN INTERVAL BETWEEN AUTO MOW
!  9  IDFP = FERT # FOR AUTO P FERT--BLANK DEFAULTS TO ELEM P
C     LINE 6
      READ(KR(1),300)IRR,IRI,IFA,IFD,IDR0,IDF0,MNU,IMW,IDFP

C     EPA WHEAT by region, LRan
C     set original PARM 9 and 10 back
      PARM(9) = PARM_9
      PARM(10) = PARM_10

      IF ( (CROPNUM_N>=33 .AND. CROPNUM_N<=36) .OR. (CROPNUM_N>=7 .AND. CROPNUM_N<=8) 
     1   .OR. (CROPNUM_N>=15 .AND. CROPNUM_N<=18) .OR. (CROPNUM_N>=25 .AND. CROPNUM_N<=26) )  THEN

          PARM(9) = 25.0
          PARM(10) = 5.0

          IF ( CROPNUM_N==36 ) IRI = 14
          IF ( CROPNUM_N==34 .AND. REG_N==7 ) IRI = 14

      END IF
C     EPA PARM 9 and 10 change

C     UNC-FARMERS
      IF(IDFO==0)IDFO=52

C     EPA LRan: to delay N application
C      IF(CROPNUM_N==1 .OR. CROPNUM_N==2.OR. CROPNUM_N==5)  IFA=225
      IF(CROPNUM_N>=1 .AND. CROPNUM_N<=6) THEN 
         IFA=225
!         PARM(25) = 0.5
!         PARM(66) = 0.01
      ENDIF

C     UNC
C     DEFAULT TO AUTOMATIC IRRIGATION
      IF ( MOD(CROPNUM_N, 2) .EQ. 0 ) IRR= 11

C     EPA LRan: to reduce high grass yield     
C     set original value back
      ARMX = ARMX_ori
      PSTX = PSTX_ori

      IF(  CROPNUM_N == 2 .OR. CROPNUM_N == 4 .OR. CROPNUM_N == 6 )  THEN
          IRR = 12
          IRI = 14
          ARMX = 100.0
      END IF

      IF ( (CROPNUM_N>=33 .AND. CROPNUM_N<=36) .OR. (CROPNUM_N>=7 .AND. CROPNUM_N<=8) 
     1   .OR. (CROPNUM_N>=15 .AND. CROPNUM_N<=18) .OR. (CROPNUM_N>=25 .AND. CROPNUM_N<=26) )  THEN
          PSTX = 5
      END IF

C     END of EPA

C     UNC
      CALL AISPL(IRR,IAC)
	CO2=CO20 

C Added by UNC
      CO2X = CO2FAC

      IF(CO2X.GT.0.) CO2=CO2X

	CNO3I=CNO30
	IF(CNO3X.GT.0.)CNO3I=CNO3X
      CNO3I=CNO3I*.01
      RFNC=RFN0
	IF(RFNX.GT.0.)RFNC=RFNX
	RFNC=RFNC*.01
      IF(CHN.LT.1.E-10)CHN=.05
      IF(SN.LT.1.E-10)SN=.15
      IF(APM.LT.1.E-10)APM=1.
	XLOX=XLOG
	IF(XLOG.LT.0.)XLOX=XLOG+360.
      WSX=1.+WSA
      YSW=.79*WSX**.009
      WSA1=1.586*WSX**.12
      PMX=PARM(16)
	CFMN=PARM(32)
      SX=SQRT(UPS)
      UPSQ=(1.-2.*EXP(-13.86*UPS))/3.
	XX=YLAT/CLT
      YLS=SIN(XX)
      YLC=COS(XX)
      YTN=TAN(XX)
      IF( USEDEP )  THEN
        CALL WDEP(NDEPDIR)
      ENDIF

      IF(NGN.EQ.0)GO TO 601
      IF(IRW.EQ.0)GO TO 683
      IF(IRUN.GT.1)GO TO 601
  683 CALL WDOP(WEATDIR)
      IYR=IYR0
  601 CALL ALPYR(IYR,NYD,LPYR)
      PB=101.3-ELEV*(.01152-5.44E-7*ELEV)
	MOFX=12
C	IF(YLAT.LT.0.)MOFX=6
      GMA=6.595E-4*PB
      CH=.4349*ABS(YTN)
      IF(CH.GE.1.)GO TO 74
      H=ACOS(CH)
      GO TO 75
   74 H=0.
   75 HLMN=7.72*H
      HR0=HLMN
      GO TO(28,29,30,402,431,403,640,609),NDRV
   28 NDVSS=34
      GO TO 31
   29 NDVSS=32
      GO TO 31
   30 NDVSS=30
      GO TO 31
  402 NDVSS=33
      GO TO 31
  431 NDVSS=31
      GO TO 31
  403 NDVSS=83
      GO TO 31
  640 NDVSS=36
      GO TO 31
  609 NDVSS=35
   31 XY2=.5/YWI
      IF(IWP5.EQ.0)GO TO 598
      IWP5=IWP5-1
      II=67*IWP5
      IF(II.EQ.0)GO TO 619
      DO I=1,II
        READ(KR(18),505,IOSTAT=NFL)VOID
        IF(NFL/=0)EXIT
      END DO
      WRITE(*,*)'WPM5 NO = ',IWP5,' NOT IN WPM5 FILE'
      GO TO 519
C     LINE 1/2
  619 READ(KR(18),505)TITW5
  598 IF(IWP1.GT.0)GO TO 620
C     write(*,*)  "XLOX:", XLOX, ELEX, YLS, YLC
C     IF(IWP1==0)THEN
          W0=1.E20                                                                       
          DO 
            READ(KR(17),*,IOSTAT=NFL)II,OPSCFILE,Y,X,ELEX 
            IF(NFL/=0)EXIT 
            RY=Y/CLT
            XX=YLS*SIN(RY)+YLC*COS(RY)*COS((X-XLOX)/CLT)
            D=6378.8*ACOS(XX)
            E=ABS(ELEV-ELEX)
            W1=PARM(79)*D+(1.-PARM(79))*E 
            IF(W1>=W0)CYCLE 
            W0=W1  
            WPM1FILE=OPSCFILE  
          END DO 
C         write(*,*) "WPM1FILE: ", WPM1FILE
C     
C      D0=1.E20
C      DO 
C		READ(KR(17),*,IOSTAT=NFL)LSTN,OPSCFILE,Y,X
C		IF(NFL/=0)EXIT
C		RY=Y/CLT
C		XX=YLS*SIN(RY)+YLC*COS(RY)*COS((X-XLOX)/CLT)
C		D=6378.8*ACOS(XX)
C		IF(D.GT.D0)CYCLE
C		D0=D
C		WPM1FILE=OPSCFILE
C	END DO
      
      GO TO 653
  620 DO 
        READ(KR(17),*,IOSTAT=NFL)II,WPM1FILE
        IF(NFL/=0)  EXIT
        IF(II.EQ.IWP1)GO TO 653
      END DO
      WRITE(*,*)'WPM1 NO = ',IWP1,' NOT IN MO WEATHER LIST FILE'
      REWIND KR(17)
      GO TO 519
  653 REWIND KR(17)
      CALL OPENV(KR(24),WPM1FILE,WEATDIR, 'R' )
C     LINE 1/2
      READ(KR(24),505)VOID
      READ(KR(24),505)VOID
      CALL APAGE(0)
      WRITE(KW(1),307)
	IYX=IYR0-1880
      IF(ICO2.EQ.0)GO TO 696
	IF(ICO2==1)THEN
	IF(IYX.LT.25)GO TO 611
      X1=IYX
      CO2=280.33-X1*(.1879-X1*.0077)
      GO TO 623
  611 CO2=280.33
  623 WRITE(KW(1),697)
      ELSE
	WRITE(KW(1),600)
	END IF
      GO TO 617
  696 WRITE(KW(1),699)
  617 WRITE(KW(1),367)CO2
      WRITE(KW(1),240)YWI
      IF(NGN.GT.0)GO TO 36
      WRITE(KW(1),308)
      GO TO 48
   36 CALL WIGV
   48 IF(IET.GT.1)GO TO 66
      WRITE(KW(1),309)
      GO TO 69
   66 IF(IET.GT.2)GO TO 67
      WRITE(KW(1),312)
      GO TO 69
   67 IF(IET.GT.3)GO TO 493
      WRITE(KW(1),313)
      GO TO 69
  493 IF(IET.GT.4)GO TO 68
      WRITE(KW(1),318)
      GO TO 69
   68 WRITE(KW(1),494)
   69 DO 568 IW=1,6
C  3  OBMX   = AV MO MAX TEMP (C)
C  4  OBMN   = AV MO MIN TEMP (C)
C  5  SDTMX  = MO STANDARD DEV MAX TEMP (C)OR EXTREME MAXIMUM TEMP (C)
C              IF STANDARD DEV IS NOT AVAILABLE (BLANK IF TEMP IS INPUT
C              DAILY)
C  6  SDTMN  = MO STANDARD DEV MIN TEMP (C)OR EXTREME MIN TEMP (C)
C              IF STANDARD DEV IS NOT AVAILABLE (BLANK IF TEMP IS INPUT
C              DAILY)
C  7  RMO    = AV MO PRECIPITATION (MM)
C  8  RST(2) = MONTHLY ST DEV OF DAILY RAINFALL (MM)(BLANK IF UNKNOWN
C              OR IF DAILY PRECIPITATION IS INPUT)
C  9  RST(3) = MONTHLY SKEW COEF OF DAILY RAINFALL (BLANK IF UNKNOWN OR
C              DAILY PRECIPITATION IS INPUT)
C 10  PRW(1) = MONTHLY PROBABILITY OF WET DAY AFTER DRY DAY (BLANK IF
C              UNKNOWN OR IF DAILY PRECIPITATION IS INPUT)
C 11  PRW(2) = MONTHLY PROBABILITY OF WET DAY AFTER WET DAY (BLANK IF
C              UNKNOWN OR IF DAILY PRECIPITATION IS INPUT)
C 12  UAVM   = AV NO DAYS OF PRECIPITATION/MO (BLANK IF PRECIP IS
C              GENERATED AND IF PRW 1&2 ARE INPUT)
C 13  WI     = 3 OPTIONS--(1)MO MAX .5 H RAIN FOR PERIOD = YWI (MM)
C                         (2)ALPHA (MEAN .5 H RAIN/MEAN STORM
C                             AMOUNT)
C                         (3)BLANK IF UNKNOWN
C 14  OBSL   = AV MO SOL RAD (MJ/M2 OR LY)(BLANK IF UNKNOWN)
C 15  RH     = 3 OPTIONS--(1)AV MO RELATIVE HUMIDITY (FRACTION)
C                         (2)AV MO DEW POINT TEMP DEG C
C                         (3)BLANK IF UNKNOWN
C              USED IN PENMAN OR PENMAN-MONTEITH EQS
C 16  UAV0   = AV MO WIND SPEED (M/S)
C     LINES 3/15
      IF(IW.GT.1)GO TO 603
      READ(KR(24),310)(OBMX(IW,I),I=1,12)
      READ(KR(24),310)(OBMN(IW,I),I=1,12)
      READ(KR(24),310)(SDTMX(IW,I),I=1,12)
      READ(KR(24),310)(SDTMN(IW,I),I=1,12)
      READ(KR(24),310)(RMO(IW,I),I=1,12)
      READ(KR(24),310)(RST(2,IW,I),I=1,12)
      READ(KR(24),310)(RST(3,IW,I),I=1,12)
      READ(KR(24),310)(PRW(1,IW,I),I=1,12)
      READ(KR(24),310)(PRW(2,IW,I),I=1,12)
      READ(KR(24),310)(UAVM(I),I=1,12)
      READ(KR(24),310)(WI(IW,I),I=1,12)
      READ(KR(24),310)(OBSL(IW,I),I=1,12)
C     LETS EPIC ESTIMATE RADIATION
C      OBSL=0
      READ(KR(24),310)(RH(IW,I),I=1,12)
      READ(KR(24),310,END=711)(UAV0(I),I=1,12)
  711 REWIND KR(24)
      WRITE(KW(1),295)
      TAV(1)=.25*(OBMX(IW,12)+OBMN(IW,12)+OBMX(IW,1)+OBMN(IW,1))
      JT1=1
      IF(OBMN(IW,1).GT.OBMN(IW,12))JT1=12
      TMN=OBMN(IW,JT1)
      DO 569 I=2,12
      I1=I-1
      TAV(I)=.25*(OBMX(IW,I)+OBMN(IW,I)+OBMX(IW,I1)+OBMN(IW,I1))
      IF(OBMN(IW,I).GT.TMN)GO TO 569
      JT1=I
      TMN=OBMN(IW,I)
  569 CONTINUE
      GO TO 604
  603 READ(KR(18),310)(OBMX(IW,I),I=1,12)
      READ(KR(18),310)(OBMN(IW,I),I=1,12)
      READ(KR(18),310)(SDTMX(IW,I),I=1,12)
      READ(KR(18),310)(SDTMN(IW,I),I=1,12)
      READ(KR(18),310)(RMO(IW,I),I=1,12)
      READ(KR(18),310)(RST(2,IW,I),I=1,12)
      READ(KR(18),310)(RST(3,IW,I),I=1,12)
      READ(KR(18),310)(PRW(1,IW,I),I=1,12)
      READ(KR(18),310)(PRW(2,IW,I),I=1,12)
      READ(KR(18),310)(UAVM(I),I=1,12)
      READ(KR(18),310)(WI(IW,I),I=1,12)
      READ(KR(18),310)(OBSL(IW,I),I=1,12)
      READ(KR(18),310)(RH(IW,I),I=1,12)
	READ(KR(18),310)(UAV0(I),I=1,12)
  604 DO 51 I=1,12
      IF(RST(2,IW,I).LT.1.E-5.OR.RST(3,IW,I).LT.1.E-5)GO TO 52
   51 CONTINUE
      ICDP=0
      GO TO 492
   52 ICDP=1
      SUM=0.
      DO 50 I=1,10000
      XX=AUNIF(IDG(3))
   50 SUM=SUM+(-ALOG(XX))**EXPK
      REXP=10100./SUM
  492 BIG=0.
      V3=AUNIF(IDG(3))
      ADD=0.
      XYP=0.
      DO I=1,12
                I1=I+1
                XM=NC(I1)-NC(I)
                JDA=(NC(I1)+NC(I))*.5
                CALL WHLRMX
                SRMX(I)=RAMX
                THRL(I)=HRLT
                IF(HRLT.GT.BIG)BIG=HRLT
                XX=SDTMX(IW,I)-SDTMN(IW,I)
                IF(XX>10.)THEN
                        SDTMX(IW,I)=(SDTMX(IW,I)-OBMX(IW,I))*.25
                        SDTMN(IW,I)=(OBMN(IW,I)-SDTMN(IW,I))*.25
            END IF
            IF(PRW(1,IW,I)>0.)THEN
                UAVM(I)=XM*PRW(1,IW,I)/(1.-PRW(2,IW,I)+PRW(1,IW,I))
            ELSE
                        PRW(1,IW,I)=BTA*(UAVM(I)+.0001)/XM
                        PRW(2,IW,I)=1.-BTA+PRW(1,IW,I)
            END IF
            RST(1,IW,I)=RMO(IW,I)/(UAVM(I)+.01)
                X2=SQRT(OBMX(IW,I)-OBMN(IW,I))
                IF(OBSL(IW,I)<1.E-5)THEN
                        X1=AMAX1(.8,.21*X2)
                        OBSL(IW,I)=X1*RAMX
                END IF
                TX=.5*(OBMX(IW,I)+OBMN(IW,I))
                XL=2.501-2.2E-3*TX
                RAMM=RAMX/XL
                EO=PARM(38)*RAMM*(TX+17.8)*X2
                ADD=ADD+EO
            XYP(3)=XYP(3)+RMO(IW,I)
                IF(ICDP>0)THEN
                        RST(1,IW,I)=RST(1,IW,I)*REXP
                        PCF(IW,I)=1.
                    CYCLE
            END IF
          SUM=0.
                RFVM=RST(1,IW,I)
                RFSD=RST(2,IW,I)
                RFSK=RST(3,IW,I)
                R6=RFSK/6.
                DO J=1,1000
                        V4=AUNIF(IDG(3))
                        XX=ADSTN(V3,V4)
                        V3=V4
                        R1=WRAIN(R6,XX,RFSD,RFSK,RFVM)
                        SUM=SUM+R1
            END DO
                PCF(IW,I)=1010.*RST(1,IW,I)/SUM
        END DO
        AAP=XYP(3)
        IF(NCOW0<0)THEN
                ADD=30.44*ADD
                RTO=ADD/AAP
                F=RTO/(RTO+EXP(SCRP(25,1)-SCRP(25,2)*RTO))
                RSTK=10.*F+1.
                GCOW=WSA/RSTK
                NCOW=GCOW+.99
        END IF
      XYP(1)=OBMX(IW,1)
      BIG=OBSL(IW,1)
      UPLM=RH(IW,1)
      RFMX=RMO(IW,1)
      EXTM=WI(IW,1)
      DO 70 I=2,12
      IF(OBSL(IW,I).GT.BIG)BIG=OBSL(IW,I)
      IF(RMO(IW,I).GT.RFMX)RFMX=RMO(IW,I)
      IF(RH(IW,I).GT.UPLM)UPLM=RH(IW,I)
      IF(WI(IW,I).GT.EXTM)EXTM=WI(IW,I)
      XYP(1)=XYP(1)+OBMX(IW,I)
   70 CONTINUE
      XYP(1)=XYP(1)/12.
      RUNT=1.
      IF(BIG.GT.100.)RUNT=.04184
      X3=.3725/(XYP(1)+20.)
	SUM=0.
      DO 73 I=1,12
      XM=NC(I+1)-NC(I)
      WFT(IW,I)=UAVM(I)/XM
      XYP(2)=XYP(2)+OBMN(IW,I)
C      XYP(3)=XYP(3)+RMO(IW,I)
      XYP(4)=XYP(4)+UAVM(I)
      OBSL(IW,I)=RUNT*OBSL(IW,I)
      XYP(5)=XYP(5)+OBSL(IW,I)
      X1=AMAX1(RMO(IW,I),12.7)
      TX=.5*(OBMX(IW,I)+OBMN(IW,I))
      IF(UPLM.GT.1.)GO TO 407
      IF(RH(IW,I).GT.1.E-10)GO TO 408
      XX=OBMX(IW,I)-OBMN(IW,I)
      RH(IW,I)=.9-.8*XX/(XX+EXP(5.122-.1269*XX))
      GO TO 408
  407 RH(IW,I)=ASVP(RH(IW,I)+273.)/ASVP(TX+273.)
  408 X2=AMAX1(TX,-1.7)
      XYP(6)=XYP(6)+((X1/25.4)/(1.8*X2+22.))**1.111
      X1=RMO(IW,I)/(UAVM(I)+1.E-10)
      IF(EXTM.GT.1.)GO TO 71
      IF(EXTM.LT.1.E-10)WI(IW,I)=AMAX1(.05,APM*X3*(OBMX(IW,I)+20.))
      XTP(I)=5.3*X1*WI(IW,I)
      GO TO 73
   71 F=XY2/(UAVM(I)+.01)
      XTP(I)=WI(IW,I)
      WI(IW,I)=-XTP(I)/ALOG(F)
      WI(IW,I)=APM*WI(IW,I)/(X1+1.)
      IF(WI(IW,I).LT..1)WI(IW,I)=.1
      IF(WI(IW,I).GT..95)WI(IW,I)=.95
      X1=1.4-.0778*TX
      X2=.5+.37*TX
      X1=MIN(1.,X1,X2)
      IF(X1.LE.0.)GO TO 73
      SUM=SUM+X1*XM
   73 CONTINUE
      XYP(2)=XYP(2)/12.
      XYP(5)=XYP(5)/12.
      IF(IW.GT.1)GO TO 605
      WRITE(KW(1),602)WPM1FILE
      GO TO 606
  605 II=IW-1
      WRITE(KW(1),571)II,TITW5(1)
  606 WRITE(KW(1),321)HED(1),(OBMX(IW,I),I=1,12),XYP(1),HED(1)
      WRITE(KW(1),321)HED(2),(OBMN(IW,I),I=1,12),XYP(2),HED(2)
      WRITE(KW(1),224)'SDMX',(SDTMX(IW,I),I=1,12),'SDMX'
      WRITE(KW(1),224)'SDMN',(SDTMN(IW,I),I=1,12),'SDMN'
      WRITE(KW(1),243)HED(4),(RMO(IW,I),I=1,12),XYP(3),HED(4)
      WRITE(KW(1),223)'SDRF',(RST(2,IW,I),I=1,12),'SDRF'
      WRITE(KW(1),224)'SKRF',(RST(3,IW,I),I=1,12),'SKRF'
      WRITE(KW(1),225)'PW/D',(PRW(1,IW,I),I=1,12),'PW/D'
      WRITE(KW(1),225)'PW/W',(PRW(2,IW,I),I=1,12),'PW/W'
      WRITE(KW(1),321)'DAYP',(UAVM(I),I=1,12),XYP(4),'DAYP'
      WRITE(KW(1),223)'P5MX',(XTP(I),I=1,12),'P5MX'
      WRITE(KW(1),243)HED(3),(OBSL(IW,I),I=1,12),XYP(5),HED(3)
      WRITE(KW(1),223)'RAMX',SRMX,'RAMX'
      WRITE(KW(1),224)'HRLT',THRL,'HRLT'
      WRITE(KW(1),224)'RHUM',(RH(IW,I),I=1,12),'RHUM'
      WRITE(KW(1),224)'ALPH',(WI(IW,I),I=1,12),'ALPH'
      WRITE(KW(1),224)' PCF',(PCF(IW,I),I=1,12),' PCF'
      IF(IWP5.EQ.0)GO TO 599
  568 CONTINUE
  599 REWIND KR(18)
      IF(IWND.GT.0)GO TO 656
	 W0=1.E20                                                                       
          DO                                                                             
              READ(KR(19),*,IOSTAT=NFL)II,OPSCFILE,Y,X,ELEX                                     
	          IF(NFL/=0)EXIT                                                                    
	          RY=Y/CLT
              XX=YLS*SIN(RY)+YLC*COS(RY)*COS((X-XLOX)/CLT)
              D=6378.8*ACOS(XX)
              E=ABS(ELEV-ELEX)
              W1=PARM(79)*D+(1.-PARM(79))*E                                                                  
              IF(W1>=W0)CYCLE                                                                
              W0=W1           
              WINDFILE=OPSCFILE                                                            
	      END DO     
C      D0=1.E20
C      DO 
C		READ(KR(19),*,IOSTAT=NFL)LSTN,OPSCFILE,Y,X
C		IF(NFL/=0)EXIT
C		RY=Y/CLT
C		XX=YLS*SIN(RY)+YLC*COS(RY)*COS((X-XLOX)/CLT)
C		D=6378.8*ACOS(XX)
C		IF(D.GT.D0)CYCLE
C		D0=D
C		WINDFILE=OPSCFILE
C	END DO
      GO TO 655
  656 DO 
      READ(KR(19),*,IOSTAT=NFL)II,WINDFILE
	IF(NFL/=0)EXIT
	IF(II.EQ.IWND)GO TO 655
	END DO
	WRITE(*,*)'WIND NO = ',IWND,' NOT IN MO WIND LIST FILE'
      REWIND KR(19)
      GO TO 519
  655 REWIND KR(19)
      CALL OPENV(KR(25),WINDFILE,WEATDIR, 'R')
C     LINE 1/2     
      READ(KR(25),505)VOID
      READ(KR(25),505)VOID
      SX=SX/SN
      IF(CHL.LT.1.E-10)CHL=COCH(5)*WSA**COCH(6)
      IF(CHS.LT.1.E-10)CHS=UPS*WSX**(-.3)
      IF(CHD.LT.1.E-10)CHD=COCH(3)*WSA**COCH(4)
      UPSL=MIN(UPSL,SQRT(10000.*WSA))
      XM=.3*UPS/(UPS+EXP(-1.47-61.09*UPS))+.2
      UPSX=UPSL/22.127
      SL=UPSX**XM*(UPS*(65.41*UPS+4.56)+.065)
      X1=3.*UPS**.8+.56
      BETA=UPS/(.0896*X1)
      RXM=BETA/(1.+BETA)
	RLF=UPSX**RXM
      IF(UPSL.GT.4.57)GO TO 614
      RSF=X1
      GO TO 612
  614 IF(UPS.GT..09)GO TO 613
      RSF=10.8*UPS+.03
      GO TO 612
  613 RSF=16.8*UPS-.5 
  612 IF(ITYP.GT.0)GO TO 426
      TCS=.0216*(UPSL*SN)**.75/UPS**.375
      TCC=1.75*CHL*CHN**.75/(WSA**.125*CHS**.375)
      X4=MIN(UPSL/360.,TCS)
      TC=X4+TCC
      GO TO 430
  426 IF(CHL.GT..1)GO TO 427
      IF(CHL.GT..05)GO TO 428
      SFL=0.
      GO TO 429
  428 SFL=100.*(CHL-.05)
      GO TO 429
  427 SFL=50.
  429 TSF=SFL/MIN(2160.,17712.*SX*SN)
      X1=AMAX1(CHL-(UPSL+SFL)*.001,0.)
      TCC=X1/(3.6*CHD**.66667*SQRT(CHS)/CHN)
      TCS=.0913*(UPSL*SN)**.8/UPS**.4
      TCC=TCC+TSF
      TC=TCC+TCS
  430 JDHU=400
      WDRM=HLMN
      IF(HLMN<11.)THEN
                CALL ADAJ(NC,JDHU,JT1,15,NYD)
                WDRM=PARM(6)+HLMN
        END IF
  437 AAP=XYP(3)
C     UNC
        IF(NCOW0<0)THEN
                ADD=30.44*ADD
                RTO=ADD/AAP
                F=RTO/(RTO+EXP(SCRP(25,1)-SCRP(25,2)*RTO))
                RSTK=10.*F+1.
                GCOW=WSA/RSTK
                NCOW=GCOW+.99
        END IF
C     UNC

      XYP(6)=115.*XYP(6)
      AVT=(XYP(1)+XYP(2))*.5
C     UAVM = AV MO WIND SPEED (M/S)(REQUIRED TO SIMULATE WIND
C            EROSION--ACW>0 LINE 24  AND POTENTIAL ET IF PENMAN OR
C            PENMAN-MONTEITH EQS ARE USED--LINE 4)
C     LINE 3
      READ(KR(25),310)UAVM
      AWV=0.
	WB=0.
      DO 81 I=1,12
      RNCF(I)=1.
      TMNF(I)=1.
	IF(UAVM(I).LT.1.E-5)UAVM(I)=UAV0(I)
	SMY(I)=0.
      DO 742 J=1,100
      RN2=AUNIF(IDG(5))
      WV=UAVM(I)*(-ALOG(RN2))**UXP
      IF(WV.LT.PARM(67))GO TO 742
      EV=193.*EXP(1.103*(WV-30.)/(WV+1.))
      SMY(I)=SMY(I)+EV
  742 CONTINUE
      WB=WB+SMY(I)
   81 AWV=AWV+UAVM(I)
      AWV=AWV/12.
	WCF=(3.86*AWV**3/XYP(6)**2)**.3484
      IF(PARM(40).GT.0..AND.IRR.EQ.0)GO TO 657
      CLF=1.
      GO TO 658
  657 X1=AMAX1(1.,AVT)
      CLF=SQRT(AAP/(X1*PARM(40)))
  658 WRITE(KW(1),593)CLF
C     DIR  = AV MO FRACTION OF WIND FROM 16 DIRECTIONS (BLANK UNLESS
C            WIND EROSION IS SIMULATED--ACW>0 LINE 24).
      DO 80 J=1,16
C     LINES 4/19
      READ(KR(25),310)(WDIR(I,J),I=1,12)
      IF(WDIR(1,J).GT.0.)GO TO 80
      DO 79 I=1,12
      WDIR(I,J)=1.
   79 CONTINUE
   80 CONTINUE
      REWIND KR(25)
      WRITE(KW(1),597)WINDFILE
      WRITE(KW(1),321)HED(7),(UAVM(I),I=1,12),AWV,HED(7)
      IF(ICDP.EQ.0)GO TO 535
      WRITE(KW(1),238)EXPK
      WRITE(KW(1),237)BTA
      GO TO 536
  535 WRITE(KW(1),292)
  536 AHSM=CAHU(1,365,0.,1)
      WRITE(KW(1),221)SUM,AHSM
      WRITE(KW(1),284)
      WRITE(KW(1),285)FL,FW,ANG0,UXP,DIAM,ACW
      DO 83 I=1,12
      IF(UAVM(1).LT.1.E-10)GO TO 415
      CALL AEXINT(UXP,SUM)
      UAVM(I)=UAVM(I)/SUM
  415 DO 82 J=2,16
      WDIR(I,J)=WDIR(I,J)+WDIR(I,J-1)
   82 CONTINUE
      DO 83 J=1,16
      WDIR(I,J)=WDIR(I,J)/WDIR(I,16)
   83 CONTINUE
      TX=(OBMX(1,MO)+OBMN(1,MO))/2.
      ST0=OBSL(1,MO)
      DST0=TX
      CALL APAGE(0)
      WRITE(KW(1),345)
      KRX=KR(16)
      IF(NSTP.GT.0)THEN
	WRITE(KW(1),545)
	READ(KW(32),300)ISTP
		IF(ISTP>0)THEN
		KRX=KR(22)
		CALL OPENV(KR(22),'RTOPSC.DAT',CROPDIR, 'R')
		END IF
	ELSE 
      WRITE(KW(1),546)
	END IF
      IF(PARM(50)>0.)THEN
	WRITE(KW(1),734)
	ELSE 
	WRITE(KW(1),732)
	END IF
      WRITE(KW(1),301)NBYR,IYR0,IMO0,IDA0
      IF(LPYR.GT.0)GO TO 26
      WRITE(KW(1),363)
      GO TO 27
   26 WRITE(KW(1),364)
   27 WRITE(KW(1),365)WSA,YLAT,XLOG,ELEV,CHL,CHS,CHN,CHD,UPSL,UPS,SN
      WRITE(KW(1),304)HED(NDVSS)
      IF(NDRV.EQ.6)WRITE(KW(1),404)BUS
      BUS(1)=BUS0*WSX**BUS(4)
      WRITE(KW(1),405)SL,RXM,RLF,RSF,TC
      WRITE(KW(1),457)
      GO TO(455,482,483,484),INFL
  455 WRITE(KW(1),458)
      GO TO 459
  482 WRITE(KW(1),456)
      GO TO 459
  483 WRITE(KW(1),485)
      GO TO 459
  484 WRITE(KW(1),486)
  459 IF(NVCN.GT.0)GO TO 451
      WRITE(KW(1),452)
      GO TO 453
  451 IF(NVCN.GT.1)GO TO 547
      WRITE(KW(1),548)
      GO TO 453
  547 IF(NVCN.GT.2)GO TO 565
      WRITE(KW(1),564)
      GO TO 453
  565 IF(NVCN.GT.3)GO TO 561
      WRITE(KW(1),454)
      GO TO 453
  561 WRITE(KW(1),562)
  453 IF(ISCN.EQ.0)GO TO 32
      WRITE(KW(1),232)
      GO TO 33
   32 WRITE(KW(1),231)
   33 IF(ITYP.GT.0)GO TO 398
      WRITE(KW(1),399)
      GO TO 400
  398 WRITE(KW(1),401)RFPT(ITYP)
  400 IF(IERT.GT.0)GO TO 586
      WRITE(KW(1),588)
      GO TO 563
  586 WRITE(KW(1),570)
  563 IF(ICG.GT.0)GO TO 572
      WRITE(KW(1),587)
      GO TO 590
  572 WRITE(KW(1),589)
  590 IF(ICF.EQ.0)GO TO 615
      WRITE(KW(1),616)
      GO TO 698
  615 WRITE(KW(1),618)
C Commented out by RICEU for adding new IDN mechanism
C  698 IF(IDN>0)THEN
C          WRITE(KW(1),414)
C      ELSE
C          WRITE(KW(1),409)
C      END IF
C added by RICEU for adding new IDN mechanism
  698 SELECT CASE(IDN)
      CASE(0)
            WRITE(KW(1),414)
      CASE(1)
            WRITE(KW(1),409)
      CASE(2)
            WRITE(KW(1),410)
      END SELECT	  
C RICEU ADDED END
      IF(NUPC.GT.0)GO TO 828
      WRITE(KW(1),829)
      GO TO 830
  828 WRITE(KW(1),831)
  830 IF(IOX.GT.0)GO TO 834
      WRITE(KW(1),835)
  835 FORMAT(T10,'EPIC O2=F(Z)')
      GO TO 836
  834 WRITE(KW(1),837)
  837 FORMAT(T10,'O2=F(C/CLA)')
  836 WRITE(KW(1),233)APM,SNO0,RFN0,CNO3I,CSLT
      IF(IPRK==0)THEN
          WRITE(KW(1),'(T10,A)')'PERCOLATION--HPERC'
      ELSE
          WRITE(KW(1),'(T10,A)')'PERCOLATION--HPERC1 (4mm SLUG FLOW)'
      END IF
      IF(MASP.LE.0)GO TO 580
      WRITE(KW(1),502)
      GO TO 628
  580 WRITE(KW(1),504)
  628 IF(LBP.GT.0)GO TO 496
      WRITE(KW(1),497)
      GO TO 500
  496 WRITE(KW(1),499)
  500 WRITE(KW(1),330)COL,COIR,FULP,WAGE,CSTZ(1),CSTZ(2)
  531 CALL AINLZ
      CALL AINIX
	IYX=IYR0-1880
      SNO=SNO0
	IG=0

      DO 1 J=1,21
      IDG(J)=J
    1 CONTINUE
      CALL APAGE(0)
C     RANDOM NUMBER GENERATOR ID NUMBERS
C     IDG = 1 DETERMINES WET AND DRY DAYS
C         = 2 RELATES WEATHER VARIABLES TO RAIN
C         = 3 RAINFALL AMOUNT
C         = 4 RAINFALL ENERGY (EI)- PEAK RUNOFF RATE (QP)
C         = 5 WIND SPEED
C         = 6 WIND DIRECTION
C         = 7 RELATIVE HUMIDITY
C         = 8 RUNOFF CURVE NUMBER
C         = 9 WITHIN DAY WIND SPEED DIST
      IF(IGN.EQ.0)GO TO 21
      DO 20 J=1,20
      RN=AUNIF(21)
      II=100*IGN*RN
      DO 156 KK=1,II
  156 XX=AUNIF(21)
   20 IX(J)=IX(21)
      CALL AISHFL
   21 DO J=1,21
      IX0(J)=IX(J)
      END DO
      WRITE(KW(1),297)IGN,(IX(IDG(I)),I=1,10),(IDG(I),I=1,10)
	V3=AUNIF(IDG(3))
      V1=AUNIF(IDG(2))
      BIG=AMAX1(.2,PARM(24))
      CALL ADAJ(NC,IBD,IMO0,IDA0,NYD)
      JDA=IBD
      MO=1
      CALL AXMON(IBD,MO)
      MO1=MO
	XX=0.
      RZ=2.

      DO 
C     UNC
        IF ( USETILED )  THEN
           READ(KR(13),*,IOSTAT=NFL)LSTN,SOILFILE,HYDDRAINED,TILEDEPTH
        ELSE
           READ(KR(13),*,IOSTAT=NFL)LSTN,SOILFILE
        ENDIF

C     UNC

        IF(NFL/=0)EXIT
        IF(LSTN.EQ.INPS)GO TO 22
      END DO

      WRITE(*,*)'SOIL NO = ',INPS,' NOT IN SOIL LIST FILE'
      REWIND KR(13)
      GO TO 519
   22 REWIND KR(13)
       CALL OPENV(KR(14),SOILFILE,SOILDIR, 'R')
C      write(*,*) "KR(14): ", KR(14), SOILFILE
C      READ(KR(14),*) line14
C      write(*,*) "line1:",trim(line14)
C      READ(KR(14),*) line14
C      write(*,*) "line2:", trim(line14)
C      READ(KR(14),505)VOID
C   UNC
      READ(KR(14),9505) RECN,NUMS5,STATE,CNDX,EXT,SOILNAME,MUSYB,TEXID,
     1SLOPEL,SLOPEU,UMOD,GTGRP,SBGRPM,PARTSZ,MINER,REACT,TEMP,
     2OTHER,HYDGRP,NSL,SALBDR
C     write(*,*) OTHER,HYDGRP,NSL,SALBDR
C 9505 FORMAT(36X,I5,A6,A2,A1,A4,2X,A29,A5,A8,1X,I3,1X,I3,
C     1A3,A5,A4,A3,4A2,3X,A3,1X,I1,2X,F4.2)
C INITIAL SOIL BEFORE RUNNING THROUGH EPIC
 9505 FORMAT(1X,I5,A6,A2,A1,A4,2X,A29,A5,A8,1X,I3,1X,I3,
     1A3,A5,A4,A3,4A2,3X,A3,1X,I1,2X,F4.2)

C   UNC
C      READ(KR(14),505)VOID
C     READ SOIL DATA
C  1  SALB = SOIL ALBEDO
C  2  HSG  = HYDROLOGIC SOIL GROUP--1.=A; 2.=B; 3.=C; 4.=D
C  3  FFC  = FRACTION OF FIELD CAP FOR INITAL WATER STORAGE (BLANK IF
C            UNKNOWN)
C  4  WTMN = MIN DEPTH TO WATER TABLE(M)(BLANK IF UNKNOWN
C  5  WTMX = MAX DEPTH TO WATER TABLE (M)(BLANK IF UNKNOWN
C  6  WTBL = INITIAL WATER TABLE HEIGHT(M) (BLANK IF UNKNOWN)
C  7  GWST = GROUNDWATER STORAGE (MM)
C  8  GWMX = MAXIMUM GROUNDWATER STORAGE (MM)
C  9  RFT0 = GROUNDWATER RESIDENCE TIME(D)(BLANK IF UNKNOWN)
C 10  RFPK = RETURN FLOW / (RETURN FLOW + DEEP PERCOLATION)
C 11  TSLA = NUMBER OF SOIL LAYERS AFTER SPLITTING (3-15)
C          = 0 NO SPLITTING OCCURS INITIALLY
C 12  XIDP = 0. FOR CALCAREOUS SOILS AND NON CALCAREOUS
C               WITHOUT WEATHERING INFORMATION
C          = 1. FOR NON CACO3 SLIGHTLY WEATHERED
C          = 2. NON CACO3 MODERATELY WEATHERED
C          = 3. NON CACO3 HIGHLY WEATHERED
C          = 4. INPUT PSP OR ACTIVE + STABLE MINERAL P (KG/HA)
C 13  RTN0 = NUMBER YEARS OF CULTIVATION AT START OF SIMULATION.
C 14  XIDK = 1 FOR KAOLINITIC SOIL GROUP
C          = 2 FOR MIXED SOIL GROUP
C          = 3 FOR SMECTITIC SOIL GROUP
C 15  ZQT  = MINIMUM THICKNESS OF MAXIMUM LAYER (M)(SPLITTING
C            STOPS WHEN ZQT IS REACHED)
C 16  ZF   = MINIMUM PROFILE THICKNESS(M)--STOPS SIMULATION.
C 17  ZTK  = MINIMUM LAYER THICKNESS FOR BEGINNING SIMULATION LAYER
C            SPLITTING--MODEL SPLITS FIRST LAYER WITH THICKNESS GREATER
C            THAN ZTK(M); IF NONE EXIST THE THICKEST LAYER IS SPLIT.
C 18  FBM  = FRACTION OF ORG C IN BIOMASS POOL(.03-.05)
C 19  FHP  = FRACTION OF HUMUS IN PASSIVE POOL(.3-.7)
C 20  XCC  = CODE WRITTEN AUTOMATICALLY BY .SOL (NOT USER INPUT)
C     LINE 2/3
      READ(KR(14),303)SALB,HSG,FFC,WTMN,WTMX,WTBL,GWST,GWMX,RFT0,RFPK,
     1TSLA,XIDP,RTN0,XIDK,ZQT,ZF,ZTK,FBM,FHP,XCC

C     UNC
      IF ( USETILED )  THEN
         IF(HYDDRAINED>0)HSG = HYDDRAINED
      ENDIF
C     UNC

C     SET ALL SOILS TO 200 YEARS OF CULTIVATION TO REDUCE MINERALIZATION RATE
      RTN0=200.
      NCC=XCC
      IF(GWST.LT.1.E-10)GWST=25.
      IF(GWMX.LT.1.E-10)GWMX=50.
      IF(WTMX.GT.0.)GO TO 85
      WTMN=50.
      WTMX=100.
      WTBL=75.
   85 IDSP=XIDP+1.1
      IF(FBM.LT.1.E-10)FBM=.04
      IF(FHP.LT.1.E-10)FHP=.9-.4*EXP(-.0277*RTN0)
      IDSK=XIDK
      IF(FFC.LT.1.E-10)FFC=AAP/(AAP+EXP(9.043-.002135*AAP))
      DO 86 I=1,15
      WNH3(I)=0.
      SEV(I)=0.
      U(I)=0.
      LORG(I)=I
      LID(I)=I
      PFOL(I)=0.
      DO 513 J=1,30
      PSTZ(J,I)=0.
  513 CONTINUE
   86 CONTINUE
      MXLA=TSLA
      IF(ZQT.LT.1.E-10)ZQT=.1
      IF(ZF.LT.1.E-10)ZF=.1
      IF(ZTK.LT.1.E-10)ZTK=.15
      RFTT=RFT0
      IF(RFT0.LT.1.E-10)RFTT=10.
C     THE SOIL IS DIVIDED VERTICALLY INTO LAYERS (MAX OF 10 LAYERS
C     OF USER SPECIFIED THICKNESS)
C  4  Z    = DEPTH TO BOTTOM OF LAYERS(M)
C  5  BD   = BULK DENSITY (T/M**3)
C  6  U    = SOIL WATER CONTENT AT WILTING POINT (1500 KPA)(M/M)
C            (BLANK IF UNKNOWN)
C  7  FC   = WATER CONTENT AT FIELD CAPACITY (33KPA)(M/M)
C            (BLANK IF UNKNOWN)
C  8  SAN  = % SAND
C  9  SIL  = % SILT
C 10  WN   = INITIAL ORGANIC N CONC (G/T)        (BLANK IF UNKNOWN)
C 11  PH   = SOIL PH
C 12  SMB  = SUM OF BASES (CMOL/KG)              (BLANK IF UNKNOWN)
C 13  WOC  = ORGANIC CARBON CONC(%)
C 14  CAC  = CALCIUM CARBONATE (%)
C 15  CEC  = CATION EXCHANGE CAPACITY (CMOL/KG) (BLANK IF UNKNOWN)
C 16  ROK  = COARSE FRAGMENTS (% VOL)           (BLANK IF UNKNOWN)
C 17  CNDS = INITIAL NO3 CONC (G/T)             (BLANK IF UNKNOWN)
C 18  PKRZ = INITIAL LABILE P CONC (G/T)        (BLANK IF UNKNOWN)
C 19  RSD  = CROP RESIDUE(T/HA)                 (BLANK IF UNKNOWN)
C 20  BDD  = BULK DENSITY (OVEN DRY)(T/M**3)    (BLANK IF UNKNOWN)
C 21  PSP  = P SORPTION RATIO <1.               (BLANK IF UNKNOWN)
C          = ACTIVE & STABLE MINERAL P (KG/HA) >1.
C 22  SATC = SATURATED CONDUCTIVITY (MM/H)      (BLANK IF UNKNOWN)
C 23  HCL  = LATERAL HYDRAULIC CONDUCTIVITY(MM/H)(BLANK IF UNKNOWN)
C 24  WP   = INITIAL ORGANIC P CONC (G/T)       (BLANK IF UNKNOWN)
C 25  EXCK = EXCHANGEABLE K CONC (G/T)
C 26  ECND = ELECTRICAL COND (MMHO/CM)
C 27  STFR = FRACTION OF STORAGE INTERACTING WITH NO3 LEACHING
C                                               (BLANK IF UNKNOWN)
C 28  ST   = INITIAL SOIL WATER STORAGE (FRACTION OF FIELD CAP)
C 29  CPRV = FRACTION INFLOW PARTITIONED TO VERTICLE CRACK OR PIPE FLOW
C 30  CPRH = FRACTION INFLOW PARTITIONED TO HORIZONTAL CRACK OR PIPE 
C            FLOW
C 31  WLS  = STRUCTURAL LITTER(KG/HA)           (BLANK IF UNKNOWN)
C 32  WLM  = METABOLIC LITTER(KG/HA)            (BLANK IF UNKNOWN)
C 33  WLSL = LIGNIN CONTENT OF STRUCTURAL LITTER(KG/HA)(B I U)
C 34  WLSC = CARBON CONTENT OF STRUCTURAL LITTER(KG/HA)(B I U)
C 35  WLMC = C CONTENT OF METABOLIC LITTER(KG/HA)(B I U)
C 36  WLSLC= C CONTENT OF LIGNIN OF STRUCTURAL LITTER(KG/HA)(B I U)
C 37  WLSLNC=N CONTENT OF LIGNIN OF STRUCTURAL LITTER(KG/HA)(BIU)
C 38  WBMC = C CONTENT OF BIOMASS(KG/HA)(BIU)
C 39  WHSC = C CONTENT OF SLOW HUMUS(KG/HA)(BIU)
C 40  WHPC = C CONTENT OF PASSIVE HUMUS(KG/HA)(BIU)
C 41  WLSN = N CONTENT OF STRUCTURAL LITTER(KG/HA)(BIU)
C 42  WLMN = N CONTENT OF METABOLIC LITTER(KG/HA)(BIU)
C 43  WBMN = N CONTENT OF BIOMASS(KG/HA)(BIU)
C 44  WHSN = N CONTENT OF SLOW HUMUS(KG/HA)(BIU)
C 45  WHPN = N CONTENT OF PASSIVE HUMUS(KG/HA)(BIU)
C 46  OBC  = OBSERVED C CONTENT AT END OF SIMULATION (T/HA)
C     LINES 4/43
      READ(KR(14),625)Z,BD,U,FC,SAN,SIL,WON,PH,SMB,WOC,CAC,CEC,ROK,CNDS,
     1PKRZ,RSD,BDD,PSP,SATC,HCL,WP,EXCK,ECND,STFR,ST,CPRV,CPRH,WLS,WLM,
     2WLSL,WLSC,WLMC,WLSLC,WLSLNC,WBMC,WHSC,WHPC,WLSN,WLMN,WBMN,WHSN,
     3WHPN,OBC
      L=1
      XCB=.2
      SUM=0.
      SOCF=0.
      LZ=1
      K=1
      PZW=0.
      TPAW=0.
      DO 118 J=1,15
      IF(Z(J).LT.1.E-10)GO TO 119
      CLA(J)=100.-SAN(J)-SIL(J)
      DG=1000.*(Z(J)-XX)
      OBC(J)=1000.*OBC(J)
      SOCF=SOCF+OBC(J)
	IF(J<4)THEN
C		IF(PARM(79)>0.)THEN
C			PKRZ(J)=PARM(79)
C		ELSE
C			PKRZ(J)=3.
C		END IF
	END IF
      CALL SBDSC(BD(J),PARM(2),F,J,1)
      CALL SDST(RSD,DG,DG1,.01,.01,J)
      CALL SDST(PKRZ,DG,DG,20.,.001,J)
      CALL SDST(CNDS,DG,DG,10.,.001,J)
      CALL SDST(EXCK,DG,DG,10.,.001,J)
      IF(STFR(J).LT.1.E-10)STFR(J)=1.
      TRSD=TRSD+RSD(J)
      ZD=.25*(XX+Z(J))
      F=ZD/(ZD+EXP(-.8669-2.0775*ZD))
      STMP(J)=F*(AVT-TX)+TX
      IF(WOC(J).GT.0.)GO TO 91
      WOC(J)=XCB*EXP(-.001*DG)
   91 XCB=WOC(J)
      XZ=WOC(J)*.0172
      ZZ=1.-XZ
      BDM(J)=ZZ/(1./BD(J)-XZ/.224)
	IF(BDM(J).GT.1.)GO TO 94
	BDM(J)=1.
	BD(J)=1./(ZZ+XZ/.224)
   94 WT(J)=BD(J)*DG*10.
      DG1=DG
      WT1=WT(J)/1000.
      X1=10.*WOC(J)*WT(J)
      WOC(J)=X1
      IF(WON(J).LT.1.E-10)GO TO 664
      WON(J)=WT1*WON(J)
	KK=0
      GO TO 665
  664 WON(J)=.1*WOC(J)
      KK=1 
  665 IF(NCC.GT.0)GO TO 663
      WBM=FBM*X1
      WBMC(J)=WBM
      IF(KK.EQ.0)GO TO 92
	RTO=.1
	GO TO 93
   92 RTO=WON(J)/WOC(J)
   93 WBMN(J)=RTO*WBMC(J)
      WHP=FHP*(X1-WBM)
      WHS=X1-WBM-WHP
      WHSC(J)=WHS
      WHSN(J)=RTO*WHSC(J)
      WHPC(J)=WHP
      WHPN(J)=RTO*WHPC(J)
      X1=RSD(J)
      IF(J.EQ.1)X1=X1+STD
      WLM(J)=500.*X1
      WLS(J)=WLM(J)
      WLSL(J)=.8*WLS(J)
      WLMC(J)=.42*WLM(J)
      WLMN(J)=.1*WLMC(J)
      WLSC(J)=.42*WLS(J)
      WLSLC(J)=.8*WLSC(J)
      WLSLNC(J)=.2*WLSC(J)
      WLSN(J)=WLSC(J)/150.
      WOC(J)=WOC(J)+WLSC(J)+WLMC(J)
      WON(J)=WON(J)+WLSN(J)+WLMN(J)
  663 FOP(J)=RSD(J)*1.1
      SEV(4)=SEV(4)+FOP(J)
      PMN(J)=0.
      IF(WP(J).LT.1.E-10)GO TO 666
      WP(J)=WT1*WP(J)
      GO TO 667
  666 WP(J)=.125*WON(J)
  667 PO(J)=1.-BD(J)/2.65
      ZZ=.5*(XX+Z(J))
      X2=.1*WOC(J)/WT(J)
      X1=MIN(.8*CLA(J),5.+2.428*X2+1.7*ZZ)
      CEC(J)=AMAX1(CEC(J),X1)
      IF(ISW/=0.AND.ISW/=4)GO TO 641
	CALL SWRTNR(CLA(J),SAN(J),X2,U(J),FC(J))
	GO TO 99
  641 IF(ISW/=1.AND.ISW/=5)GO TO 642
      CEM(J)=CEC(J)-2.428*X2-1.7*ZZ
      CALL SWRTNB(CEM(J),CLA(J),X2,SAN(J),U(J),FC(J),ZZ)
      GO TO 99
  642	IF(ISW>6)CALL SWNN(CLA(J),SAN(J),X2,U(J),FC(J))
   99 XY=1.-ROK(J)*.01
      U(J)=U(J)*XY
      XY=XY*DG
      FC(J)=FC(J)*XY
      CAP=CAP+FC(J)
      S15(J)=U(J)*DG
      PO(J)=PO(J)*XY
      CALL SPOFC(J)
      IF(ST(J).LT.1.E-10.AND.NCC.EQ.0)ST(J)=FFC
      ST(J)=ST(J)*(FC(J)-S15(J))+S15(J)
      SEV(1)=SEV(1)+XY
      SEV(3)=SEV(3)+WT(J)
      IF(HCL(J).LT.1.E-20)HCL(J)=UPS*SATC(J)
      IF(CEC(J).GT.0.)GO TO 100
      CEC(J)=PH(J)
      SMB(J)=CEC(J)
      GO TO 101
  100 IF(CAC(J).GT.0.)SMB(J)=CEC(J)
      IF(SMB(J).GT.CEC(J))SMB(J)=CEC(J)
      BSA=SMB(J)*100./(CEC(J)+1.E-20)
      IF(PH(J).GT.5.6)GO TO 101
      X1=.1*WOC(J)/WT(J)
      ALS(J)=154.2-1.017*BSA-3.173*X1-14.23*PH(J)
      IF(ALS(J).LT.0.)GO TO 101
      IF(ALS(J).GT.95.)ALS(J)=95.
      GO TO 102
  101 ALS(J)=0.
  102 IF(IDSP.LT.5)GO TO 302
      IF(PSP(J).LT.1.)GO TO 105
      PMN(J)=.2*PSP(J)
      PSP(J)=PKRZ(J)/(PMN(J)+PKRZ(J))
      GO TO 113
  302 GO TO(106,109,111,110),IDSP
  105 IF(CAC(J).GT.0.)GO TO 108
      GO TO 113
  106 IF(CAC(J).GT.0.)GO TO 107
      PSP(J)=.5
      GO TO 113
  107 PSP(J)=.58-.0061*CAC(J)
  108 BPC(J)=.00076
      IF(PSP(J).LT..05)PSP(J)=.05
      IF(PSP(J).GT..75)PSP(J)=.75
      GO TO 114
  109 PSP(J)=.02+.0104*PKRZ(J)
      GO TO 112
  110 PSP(J)=.46-.0916*ALOG(CLA(J))
      GO TO 112
  111 PSP(J)=.0054*BSA+.116*PH(J)-.73
  112 IF(PSP(J).LT..05)PSP(J)=.05
      IF(PSP(J).GT..75)PSP(J)=.75
  113 BPC(J)=EXP(-1.77*PSP(J)-7.05)
  114 IF(PMN(J).LT.1.E-5)PMN(J)=PKRZ(J)*(1.-PSP(J))/PSP(J)
      OP(J)=4.*PMN(J)
      IF(IDSK-2)161,162,163
  161 SOLK(J)=AMAX1(.05*EXCK(J),.052*EXCK(J)-.12)
      FIXK(J)=374.+236.*CLA(J)
      GO TO 164
  162 SOLK(J)=.026*EXCK(J)+.5
      FIXK(J)=1781.+316.*CLA(J)
      GO TO 164
  163 SOLK(J)=.026*EXCK(J)+.5
      FIXK(J)=1781.+316.*CLA(J)
  164 EQKS(J)=SOLK(J)/EXCK(J)
      EQKE(J)=EXCK(J)/FIXK(J)
      PMN(J)=PMN(J)*WT1
      OP(J)=OP(J)*WT1
      AP(J)=PKRZ(J)*WT1
      TAP=TAP+AP(J)
      WSLT(J)=6.4*ECND(J)*ST(J)
      TSLT=TSLT+WSLT(J)
      TMP=TMP+PMN(J)
      EXCK(J)=EXCK(J)*WT1
      SOLK(J)=SOLK(J)*WT1
      FIXK(J)=FIXK(J)*WT1
      IF(Z(J).GT.PMX)GO TO 115
      SUM=SUM+WT(J)
      APB=APB+AP(J)
      OCPD=OCPD+WOC(J)
      PDSW=PDSW+ST(J)-S15(J)
      FCSW=FCSW+FC(J)-S15(J)
      L=J
  115 WNO3(J)=CNDS(J)*WT1
      TNO3=TNO3+WNO3(J)
      IF(Z(J).GT.RZ)GO TO 116
      RZSW=RZSW+ST(J)-S15(J)      
      PAW=PAW+FC(J)-S15(J)
      LZ=J
  116 IF(BDD(J).LT.1.E-5)BDD(J)=BD(J)
      BDP(J)=BD(J)
      BDD(J)=BDD(J)/BD(J)
      TOP=TOP+OP(J)
      TP=TP+WP(J)
      TSK=TSK+SOLK(J)
      TEK=TEK+EXCK(J)
      TFK=TFK+FIXK(J)
      ZLS=ZLS+WLS(J)
      ZLM=ZLM+WLM(J)
      ZLSL=ZLSL+WLSL(J)
      ZLSC=ZLSC+WLSC(J)
      ZLMC=ZLMC+WLMC(J)
      ZLSLC=ZLSLC+WLSLC(J)
      ZLSLNC=ZLSLNC+WLSLNC(J)
      ZBMC=ZBMC+WBMC(J)
      ZHSC=ZHSC+WHSC(J)
      ZHPC=ZHPC+WHPC(J)
      ZLSN=ZLSN+WLSN(J)
      ZLMN=ZLMN+WLMN(J)
      ZBMN=ZBMN+WBMN(J)
      ZHSN=ZHSN+WHSN(J)
      ZHPN=ZHPN+WHPN(J)
      IF(K.GT.3)GO TO 670
      TPAW=TPAW+FC(J)-S15(J)
  672 IF(TPAW.LT.WCS(K))GO TO 670
      ZCS(K)=XX+(Z(J)-XX)*((WCS(K)-PZW)/(TPAW-PZW))
      K=K+1
      IF(K.LT.4)GO TO 672
  670 PZW=TPAW
      XX=Z(J)
  118 CONTINUE
      NBSL=10
      GO TO 120
  119 L1=LZ+1
      NBSL=J-1
      IF(L1.EQ.J)GO TO 120
      ZZ=RZ-Z(LZ)
      RTO=ZZ/(Z(L1)-Z(LZ))
      RZSW=RZSW+(ST(L1)-S15(L1))*RTO
      PAW=PAW+RTO*(FC(L1)-S15(L1))
  120 IR=NBSL
      IF(MXLA.LT.NBSL)MXLA=NBSL
      LD1=1
      IF(Z(1)<.01)GO TO 123
	IF(Z(1)>.01)GO TO 121
	GO TO 124
  121 NBSL=NBSL+1
      J=NBSL
  122 LID(J)=LID(J-1)
      J=J-1
      IF(J.GT.1)GO TO 122
      LID(1)=NBSL
      LD1=NBSL
      LORG(NBSL)=1
      L=L+1
      RTO=.01/Z(1)
      CALL SPLA(1,1,NBSL,0,RTO)
      Z(NBSL)=.01
      GO TO 124
  123 Z(1)=.01
  124 IF(L.EQ.NBSL)GO TO 125
      L1=LID(L+1)
      X1=0.
      IF(L.GT.0)X1=Z(LID(L))
	IF(X1>PMX)THEN
		L1=LID(1)
		RTO=PMX/Z(L1)
      ELSE
		RTO=(PMX-X1)/(Z(L1)-X1)
	END IF
      SUM=SUM+WT(L1)*RTO
      APB=APB+AP(L1)*RTO
      OCPD=OCPD+WOC(L1)*RTO
      PDSW=PDSW+RTO*(ST(L1)-S15(L1))
      FCSW=FCSW+RTO*(FC(L1)-S15(L1))
      GO TO 126
  125 PMX=Z(LID(NBSL))
C 126 OCPD=.1*OCPD/SUM
  126 APBC=1000.*APB/SUM
      OCPD=.001*OCPD
      SUM=1.E-4*SUM/PMX
      ABD=1.E-4*SEV(3)/XX
  127 IF(NBSL.GE.MXLA)GO TO 132
      L1=LID(1)
      ZMX=0.
      MXZ=2
      DO 129 J=2,NBSL
      L=LID(J)
      ZZ=Z(L)-Z(L1)
      IF(ZZ.LT.ZTK)GO TO 128
      MXZ=J
      GO TO 130
  128 IF(ZZ.LE.ZMX+.01)GO TO 129
      ZMX=ZZ
      MXZ=J
  129 L1=L
      L=LID(MXZ)
      L1=LID(MXZ-1)
  130 NBSL=NBSL+1
      CALL SPLA(L,L1,NBSL,1,.5)
      J=NBSL
  131 LID(J)=LID(J-1)
      J=J-1
      IF(J.GT.MXZ)GO TO 131
      LID(MXZ)=NBSL
      LORG(NBSL)=LORG(L)
      GO TO 127
  132 DO I=1,13
      DO 647 J=1,16
      XZP(I,J)=0.
  647 CONTINUE
      END DO
      DO 556 J=1,NBSL
      L=LID(J)
      IF(NCC.GT.0)GO TO 559
      WLSC(L)=.42*WLS(L)
      WLMC(L)=.42*WLM(L)
      WLSLC(L)=.42*WLSL(L)
      WLSLNC(L)=WLSC(L)-WLSLC(L)
	GO TO 720
  559 WOC(L)=WLSC(L)+WLMC(L)+WBMC(L)+WHSC(L)+WHPC(L)
      WON(L)=WLSN(L)+WLMN(L)+WBMN(L)+WHSN(L)+WHPN(L) 
  720 XZP(1,L)=WHSC(L)
      XZP(2,L)=WHPC(L)
      XZP(3,L)=WLSC(L)
      XZP(4,L)=WLMC(L)
      XZP(5,L)=WBMC(L)
      XZP(6,L)=WOC(L)
      XZP(7,L)=WHSN(L)
      XZP(8,L)=WHPN(L)
      XZP(9,L)=WLSN(L)
      XZP(10,L)=WLMN(L)
      XZP(11,L)=WBMN(L)
      XZP(12,L)=WON(L)
      XZP(13,L)=WOC(L)/WON(L)
	SOL(1,L)=WHSC(L)
      SOL(2,L)=WHPC(L)
      SOL(3,L)=WLSC(L)
      SOL(4,L)=WLMC(L)
      SOL(5,L)=WBMC(L)
      SOL(6,L)=WOC(L)
      SOL(7,L)=WHSN(L)
      SOL(8,L)=WHPN(L)
      SOL(9,L)=WLSN(L)
      SOL(10,L)=WLMN(L)
      SOL(11,L)=WBMN(L)
      SOL(12,L)=WON(L)
	SOL(13,L)=PMN(L)
      SOL(14,L)=WP(L)
      SOL(15,L)=OP(L)
      SOL(16,L)=EXCK(L)
      SOL(17,L)=FIXK(L)
      SOL(18,L)=ST(L)
	SOL(19,L)=WLS(L)
	SOL(20,L)=WLM(L)
	SOL(21,L)=WLSL(L)
      SOL(22,L)=WLSLC(L)
      SOL(23,L)=WLSLNC(L)
  556 CONTINUE
      TWN=ZLSN+ZLMN+ZBMN+ZHSN+ZHPN
      TOC=ZLSC+ZLMC+ZBMC+ZHSC+ZHPC
	TWN0=TWN
      XZP(1,16)=ZHSC
      XZP(2,16)=ZHPC
      XZP(3,16)=ZLSC
      XZP(4,16)=ZLMC
      XZP(5,16)=ZBMC
      XZP(6,16)=TOC
      XZP(7,16)=ZHSN
      XZP(8,16)=ZHPN
      XZP(9,16)=ZLSN
      XZP(10,16)=ZLMN
      XZP(11,16)=ZBMN
      XZP(12,16)=TWN
      XZP(13,16)=TOC/TWN
      CALL SPRNT(YTP)
C	WBGN=YTP(5)
      WRITE(KW(1),347)
      WRITE(KW(1),594)SOILFILE
      WRITE(KW(1),290)SALB,TSLA,ZQT,ZF,ZTK,FBM,FHP,RTN0,XIDP,XIDK,PMX,
     1OCPD
      WRITE(KW(1),351)WTMN,WTMX,WTBL,GWST,GWMX,RFTT
      IF(ISTA.GT.0)WRITE(KW(1),416)
      II=ISW+1
	SELECT CASE(II)
	CASE(1)
	WRITE(KW(1),643)
	CASE(2)
	WRITE(KW(1),650)
	CASE(3)
	WRITE(KW(1),645)
	CASE(4)
	WRITE(KW(1),706)
	CASE(5)
	WRITE(KW(1),707)
	CASE(6)
	WRITE(KW(1),708)
	CASE(7)
	WRITE(KW(1),709)
	CASE(8)
	WRITE(KW(1),701)
	CASE(9)
	WRITE(KW(1),702)
	END SELECT
      SATK=SATC(LID(2))
      DO 
        READ(KR(15),*,IOSTAT=NFL)LSTN,OPSCFILE
	IF(NFL/=0)EXIT
	IF(LSTN.EQ.IOPS)GO TO 646 
      END DO
      REWIND KR(15)
      REWIND KR(14)
      WRITE(*,*)'OPS NO = ',IOPS,' NOT IN OPSC LIST FILE'
      GO TO 519
  646 REWIND KR(15)
      REWIND KR(14)
      CALL OPENV(KR(16),OPSCFILE,OPCDIR, 'R')
C     LINE 1
      READ(KR(16),505)VOID
C     LINE 2
      READ(KR(16),300)LUN,IAUI
      IF(IAUI.EQ.0)IAUI=500
      ISG=HSG
      CALL HSGCN
      CALL HCNSLP(CN2,X3)
      WRITE(KW(1),390)ASG(ISG),CN2,X3,SCRP(30,1),SCRP(30,2),SCRP(4,1),
     1SCRP(4,2)
      CN2=X3
      CN0=CN2
      CALL SOLIO(YTP,1)
      REWIND KR(14)
      YTP(2)=YTP(2)*XX*1000.
      SW=YTP(2)
      SWW=YTP(2)+SNO
      SLT0=TSLT
C      IF(XX.LT.1.)SMX=SMX*SQRT(XX)
	SCI=AMAX1(3.,SMX*(1.-RZSW/PAW))
      CALL APAGE(1)
      IF(IWRT.GT.0)GO TO 521
      IWRT=1
      DO 553 I=2,29
      IF(KFL(I).EQ.0)GO TO 553
      IF(I.NE.9)GO TO 680
      XCC=1.
      X1=0.
C   UNC
C      WRITE(KW(9),523)SOILFILE,IYER,IMON,IDAY
      WRITE(KW(9),9523)SOILFILE,IYER,IMON,IDAY,
     1RECN,NUMS5,STATE,CNDX,EXT,SOILNAME,MUSYB,TEXID,
     1SLOPEL,SLOPEU,UMOD,GTGRP,SBGRPM,PARTSZ,MINER,REACT,TEMP,
     2OTHER,HYDGRP,NSL,SALBDR
 9523 FORMAT(T10,A12,2X,3I4,1X,I5,A6,A2,A1,A4,2X,A29,A5,A8,1X,I3,1X,I3,
     1A3,A5,A4,A3,4A2,3X,A3,1X,I1,2X,F4.2)
C   UNC
C      WRITE(KW(9),523)SOILFILE,IYER,IMON,IDAY
      WRITE(KW(9),303)SALB,HSG,FFC,WTMN,WTMX,WTBL,GWST,GWMX,RFT0,RFPK,
     1TSLA,XIDP,X1,XIDK,ZQT,ZF,ZTK,FBM,FHP,XCC
      GO TO 553
  680	WRITE(KW(I),2073)IYER,IMON,IDAY,IT1,IT2,IT3
 2073 FORMAT(/T5,'EPIC0509',2X,I4,2I2,2X,2(I2,':'),I2)
      WRITE(KW(I),827)ASTN
  827 FORMAT(10X,A16)
      WRITE(KW(I),286)IRUN,IRO0,IGN
      WRITE(KW(I),592)SITEFILE
      WRITE(KW(I),592)WPM1FILE
      WRITE(KW(I),592)WINDFILE
      WRITE(KW(I),592)SOILFILE
      WRITE(KW(I),592)OPSCFILE
      IF(I.EQ.14)CALL SOCIOA(IYR0,1,1)
      IF(I.EQ.15)CALL SOCIOD(1)
  553 CONTINUE
  521 IF(KFL(2).GT.0)WRITE(KW(2),557)HED(4),HED(10),HED(11),HED(14),HED
     1(16),HED(17),HED(29),HED(33),HED(42),HED(48),HED(47),HED(50),HED
     2(51),HED(52),HED(49),HED(43),HED(44),HED(45),HED(46),HED(56),HED
     3(54),HED(55),HED(57),HED(66)
C	WRITE(KW(82),2073)IYER,IMON,IDAY,IT1,IT2,IT3 
	IF(KFL(19).GT.0.AND.K19.EQ.0)WRITE(KW(19),551) 
	K19=1
C Commented out by RICEU for adding new N VARS
C    TENN
C      IF(KWHEAD==0)WRITE(KWANC,7569) HED(4),HED(10),HED(11),HED(14),
C     1HED(16),HED(17),HED(35),HED(NDVSS),HED(42),HED(48),
C     2HED(47),HED(50),HED(51),HED(52),HED(49),HED(43),HED(44),
C     3HED(45),HED(46),HED(59),HED(60),HED(61),HED(62),HED(63),
C     4HED(56),HED(54),HED(55),HED(57),HED(66),HED(77),HED(89),
C     5HED(18),HED(31),HED(53),HED(114)

C Modified by RICEU for adding new N VARS
      IF(KWHEAD==0)WRITE(KWANC,7569) HED(4),HED(10),HED(11),HED(14),
     1HED(16),HED(17),HED(35),HED(NDVSS),HED(42),HED(48),
     2HED(47),HED(50),HED(51),HED(52),HED(49),HED(43),HED(44),
     3HED(45),HED(46),HED(59),HED(60),HED(61),HED(62),HED(63),
     4HED(56),HED(54),HED(55),HED(57),HED(66),HED(77),HED(89),
     5HED(18),HED(31),HED(53),HED(114),HED(115),HED(116),HED(117),
     6HED(118),HED(119),HED(120),HED(121),HED(122),HED(123)


C Commented out by RICEU for adding new N VARS
C 7569 FORMAT(1X,'  RUN NAME    ,',1X,' LOCATION NAME,      ',
C     1'STATISTICAL WEATHER,',' STATISTICAL WIND,  ',
C	2' SOIL FILE NAME,    ',
C	3'OPERATION FILE NAME,','YEAR,','     ROT., ',' LATITUDE,',
C     &'LONGITUDE,',
C     430(4X,A4,','),4X,'OCPD,',4X,'APBC,',4X,' TOC,',4X,
C     1' TAP,',4X,'TNO3,',5(4X,A4,','),3(3X,'CPNM,',4X,'YLDG,',4X
C     5,'YLDF,',4X,' HI, ',4X,'BIOM,',4X,' YLN,',4X,' YLP,',4X,'FTN,',4X,
C     6'FTP,',4X,'IRGA,',4X,'WUEF,',4X,'GSET,',4X,' CAW,',4X,
C     7' CRF,',4X,' CQV,',4X,'PSTF,',4X,'  WS,',4X,'  NS,',4X,'  PS,'
C     9,4X,'  KS,',4X,'  TS,',4X,'  AS,',4X,'  SS,',5X,'PPOP,',5X,
C     &'IPLD,',5X,'IGMD,',5X,'IHVD, '))


C Modified by RICEU for adding new N VARS
 7569 FORMAT(1X,'  RUN NAME    ,',1X,' LOCATION NAME,      ',
     1'STATISTICAL WEATHER,',' STATISTICAL WIND,  ',
     2' SOIL FILE NAME,    ',
     3'OPERATION FILE NAME,','YEAR,','     ROT., ',' LATITUDE,',
     &'LONGITUDE,',
     430(4X,A4,','),4X,'OCPD,',4X,'APBC,',4X,' TOC,',4X,
     1' TAP,',4X,'TNO3,',5(4X,A4,','),9(4X,A4,','),3(3X,'CPNM,',4X,'YLDG,',4X
     5,'YLDF,',4X,' HI, ',4X,'BIOM,',4X,' YLN,',4X,' YLP,',4X,'FTN,',4X,
     6'FTP,',4X,'IRGA,',4X,'WUEF,',4X,'GSET,',4X,' CAW,',4X,
     7' CRF,',4X,' CQV,',4X,'PSTF,',4X,'  WS,',4X,'  NS,',4X,'  PS,'
     9,4X,'  KS,',4X,'  TS,',4X,'  AS,',4X,'  SS,',5X,'PPOP,',5X,
     &'IPLD,',5X,'IGMD,',5X,'IHVD, '))




      IF(KFL(35).GT.0)WRITE(KWTNA,7565) HED(4),HED(10),HED(11),HED(14),
     1HED(16),HED(17),HED(35),HED(NDVSS),HED(42),HED(48),
     2HED(47),HED(50),HED(51),HED(52),HED(49),HED(43),HED(44),
     3HED(45),HED(46),HED(59),HED(60),HED(61),HED(62),HED(63),
     4HED(56),HED(54),HED(55),HED(57),HED(66),HED(77)
 7565 FORMAT(1X,'  RUN NAME     ',1X,' LOCATION NAME       ',
     1'STATISTICAL WEATHER ',' STATISTICAL WIND   ',
	2' SOIL FILE NAME     ',
	3'OPERATION FILE NAME ','ROT. ','YEAR ',' LATITUDE ',' LONGITUDE',
     430(4X,A4),4X,'OCPD',4X,'APBC',4X,' TOC',4X,
     1' TAP',4X,'TNO3',10(4X,'CPNM',4X,'YLDG',4X
     5,'YLDF',4X,' HI ',4X,'BIOM',4X,' YLN',4X,' YLP',4X,' FTN',4X,
     6' FTP',4X,'IRGA',4X,'WUEF',4X,'GSET',4X,' CAW',4X,
     7' CRF',4X,' CQV',4X,'PSTF',4X,'  WS',4X,'  NS',4X,'  PS'
     9,4X,'  KS',4X,'  TS',4X,'  AS',4X,'  SS',4X,'PPOP',5X,'IPLD',5X,
     5'IGMD',5X,'IHVD '))

C    TENN


      IF(KFL(8).GT.0)WRITE(KW(8),558)(HED(KYA(J1)),J1=1,NKYA)
      IF(KFL(13).GT.0)WRITE(KW(13),583)
      IF(KFL(17).GT.0)WRITE(KW(17),826)(HED(KD(J1)),J1=1,NKD),'TNO3',
     &'NO31','PRK1','LN31',' HUI',' LAI','BIOM','YLDF','UNO3',(HEDS(I),
     &I=23,28)
      IF(KFL(18).GT.0)WRITE(KW(18),671)ASTN,NBYR,IYR0,YLAT
      IF(KFL(4).GT.0)WRITE(KW(4),669)
      IF(KFL(20).GT.0)WRITE(KW(20),583)
	IF(KFL(24).GT.0)WRITE(KW(24),726)
	IF(KFL(26).GT.0)WRITE(KW(26),729)
	IF(KFL(29).GT.0)WRITE(KW(29),727)
  727 FORMAT(4X,'Y',3X,'M',3X,'D',1X,'OPERATION',2X,'CROP',2X,'BIOMt/ha'
     &,3X,'RWTt/ha',6X,'LAI',4X,'STLt/ha',2X,'AGPMt/ha',5X,'ORHI',4X,
     &'YLDt/ha',2X,'YLSDt/ha',6X,'HUSC')
     	IF(KFL(23).EQ.0)GO TO 721
	WRITE(KW(23),722)(SID(LORG(LID(J))),J=1,NBSL),SID(16)
	WRITE(KW(23),723)'DEPTH(M)',(Z(LID(I)),I=1,NBSL)
  721 WRITE(KW(1),344)
      WRITE(KW(1),595)OPSCFILE
      IF(IRR.EQ.0)GO TO 133
      IF(VIMX.LT.1.E-10)VIMX=2000.
      IF(IRR.NE.4)GO TO 134
      WRITE(KW(1),331)
      GO TO 137
  133 VIMX=0.
      WRITE(KW(1),306)
      GO TO 142
  134 IF(BIR.LT.0.)GO TO 411
      IF(BIR.GT.0.)GO TO 413
      GO TO 136
  413 WRITE(KW(1),331)
      IF(BIR.GT.1.)GO TO 135
      WRITE(KW(1),360)BIR,IRI
      GO TO 137
  135 WRITE(KW(1),355)BIR,IRI
      GO TO 137
  411 WRITE(KW(1),331)
      WRITE(KW(1),412)BIR,IRI
      GO TO 137
  136 WRITE(KW(1),332)
  137 WRITE(KW(1),354)VIMX,ARMN,ARMX
      IF(IAC.EQ.0)GO TO 138
      WRITE(KW(1),361)
      GO TO 139
  138 WRITE(KW(1),362)
  139 GO TO(438,140,439,444,718),IRR
  438 WRITE(KW(1),288)
      GO TO 141
  140 WRITE(KW(1),289)
      GO TO 141
  439 WRITE(KW(1),440)
  141 WRITE(KW(1),305)EFI
      GO TO 142
  718 WRITE(KW(1),719)
      GO TO 142
  444 X3=COWW*NCOW
      X1=RFMX-12.7
      QLG=X1*X1/(RFMX+50.8)
      DALG=SOLQ*WSA
      X1=10.*DALG
      QWW=30.*X3/X1
      VLGM=QLG+QWW
      VLGN=VLGN*VLGM
      WRITE(KW(1),445)DALG,VLGN,VLGM,DDLG,COWW
      COWW=X3
      VLGB=VLGN
      VLGN=X1*VLGN
      VLGM=X1*VLGM
      VLG=VLGN
      CFNP=100.
      WTMU=CFNP*VLG
      WTMB=WTMU
      VLGI=(VLGM-VLGN)/(DDLG+1.E-5)
      FNPI=NCOW*FNP*FFED
      AFLG=365.*FNPI/WSA
      AILG=.1*(AAP*DALG+365.*X3)/WSA
      COWW=X3
      GO TO 433
  142 IF(BFT0.GT.0.)GO TO 143
      IAUF=0
      IF(MNU.GT.0)GO TO 143
      WRITE(KW(1),340)
      GO TO 433
  143 WRITE(KW(1),341)IFA
      IAUF=1
      IF(BFT0.GT.1.)GO TO 479
      WRITE(KW(1),480)BFT0
      GO TO 491
  479 WRITE(KW(1),481)BFT0
  491 IF(FNP.GT.1.)GO TO 487
      WRITE(KW(1),488)
      GO TO 433
  487 WRITE(KW(1),490)FNP
  433 WRITE(KW(1),434)FMX
      IF(IPAT>0)THEN
		WRITE(KW(1),'(T10,A)')'AUTO P FERT'
	ELSE
		WRITE(KW(1),'(T10,A)')'MANUAL P FERT'
	END IF
      WRITE(KW(1),436)NCOW,RSTK,GZLM,FFED
C     UNC
      WRITE(KWGRAZE,7436)ASTN,SITEFILE,WPM1FILE,WINDFILE,SOILFILE,
     1OPSCFILE,YLAT,XLOG,NUMS5,STATE,SOILNAME,TEXID,NCOW,RSTK,GZLM,FFED
 7436 FORMAT(1X,A16,1X,5A20,2(1X,F8.2,1X),1X,A6,1X,A2,1X,A29,A8,
     12X,I8,F6.2,F6.3,F7.3)    !format modified by Jimmy 2017-01-04

C     UNC
	IF(FFED>0.)GCOW=NCOW*(1.-FFED)
	NII=IRI
      FDSF=FDS0
      IF(FDS0.LT.1.E-10)FDSF=.9

C     UNC
      IF ( USETILED )  THEN
         IF (TILEDEPTH>0) IDR0 = TILEDEPTH
      ENDIF
C     UNC

      IDR=IDR0
      IF(IDR0.EQ.0)GO TO 148
      X1=.001*IDR0
      DO 145 I=1,NBSL
      L=LID(I)
      IF(Z(L).GT.X1)GO TO 146
  145 CONTINUE
  146 IDR=L
      HCLN=HCL(L)
      HCL(L)=AMAX1(10.*SATC(L),(PO(L)-S15(L))/(24.*DRT))
	HCLD=HCL(L)
      WRITE(KW(1),327)L,DRT,HCL(L)
      IF(DRT.LT.RFTT)RFTT=DRT
  148 IF(IFD.GT.0)WRITE(KW(1),244)FDSF
      WRITE(KW(1),530)PEC
      RFTT=1.-EXP(-1./RFTT)
      FDSF=FDSF*1000.
      IF(LMS.EQ.0)GO TO 149
      WRITE(KW(1),352)
      GO TO 150
  149 WRITE(KW(1),353)
  150 HU(1)=0.
      IBGN=1
      JJK=1
      I=1
      IY1=1
      K1=1
      WRITE(KW(1),314)
  189 NCRP=IGO
      I1=I-1
      K=1
	WRITE(KW(1),315)I
      KI=0
      KF=0
      KP=0
      HU0=0.
      IF(JDHU.LT.366)HU(JJK)=0.
      IF(IGO.EQ.0)GO TO 151
      DO 34 J=1,12
      IF(NHU(J).EQ.0)GO TO 34
      LY(I,K)=NHU(J)
      K=K+1
   34 CONTINUE
  151 J=0
      WRITE(KW(1),316)
  152 J=J+1
C     READ OPERATION SCHEDULE
C  1  JX(1)= YR OF OPERATION
C  2  JX(2)= MO OF OPERATION
C  3  JX(3)= DAY OF OPERATION
C  4  JX(4)= EQUIPMENT ID NO
C  5  JX(5)= TRACTOR ID NO
C  6  JX(6)= CROP ID NO
C  7  JX(7)= XMTU--TIME FROM PLANTING TO MATURITY (Y)(FOR TREE
C            CROPS AT PLANTING ONLY).
C          = TIME FROM PLANTING TO HARVEST (Y)(HARVEST ONLY)
C          = PESTICIDE ID NO (FOR PESTICIDE APPLICATION ONLY)
C          = FERTILIZER ID NO (FOR FERTILIZER APPLICATION ONLY)
C  8  OPV1 = POTENTIAL HEAT UNITS FOR PLANTING (BLANK IF UNKNOWN)
C          = APPLICATION VOLUME (MM)FOR IRRIGATION
C          = FERTILIZER APPLICATION RATE (KG/HA) = 0 FOR VARIABLE RATE
C          = PEST CONTROL FACTOR FOR PEST APPLICATION (FRACTION OF PESTS
C            CONTROLLED)
C  9  OPV2 = LINE NUMBER FOR SCS HYDROLOGIC SOIL GROUP/RUNOFF CURVE
C            NUMBER TABLE
C          = SCS CURVE NUMBER (NEGATIVE)
C          = PESTICIDE APPLICATION RATE (KG/HA)
C  10 OPV3 = PLANT WATER STRESS FACTOR(0-1); SOIL WATER TENSION(>1KPA);
C            OR PLANT AVAILABLE WATER DEFICIT IN ROOT ZONE(-MM)TO
C            TRIGGER AUTO IRR. (0. OR BLANK DOES NOT CHANGE TRIGGER)
C  11 OPV4 = RUNOFF VOL/VOL IRRIGATION WATER APPLIED
C  12 OPV5 = PLANT POPULATION (PLANTS/M**2 OR PLANTS/HA IF P/M2<1.)
C            (FOR PLANTING ONLY)
C  13 OPV6 = MAX ANNUAL N FERTILIZER APPLIED TO A CROP (0. OR BLANK
C            DOES NOT CHANGE FMX; > 0 SETS NEW FMX)(FOR PLANTING ONLY
C  14 OPV7 = TIME OF OPERATION AS FRACTION OF GROWING SEASON (ENTER
C            EARLIEST POSSIBLE MO & DAY -- JX(2) & JX(3))
C     LINE 3/L
      IF(I.EQ.1.OR.J.GT.1)READ(KRX,235)JX,(OPV(L),L=1,9)
      IF(I.EQ.1.AND.J.EQ.1)JJK0=JX(6)
      IF(JX(1).NE.IY1)GO TO 183
      CALL TILTBL
      LT(I,J)=NDT
      JH(I,J)=JX(6)
      IJ=LT(I,J)
      CALL ADAJ(NC,ITL(I,J),JX(2),JX(3),1)
      X4=TLD(IJ)*1000.
      I3=IHC(IJ)
      IF(IBGN.LT.ITL(I,J))GO TO 419
      IF(IBGN.EQ.ITL(I,J))GO TO 422
      IF(IGO.GT.0)HU(JJK)=HU(JJK)+CAHU(IBGN,365,BASE,0)/
     1(PHU(JJK,IHU(JJK))+1.)
      IBGN=1
  419 IF(IGO.GT.0)HU(JJK)=HU(JJK)+CAHU(IBGN,ITL(I,J),BASE,0)/
     1(PHU(JJK,IHU(JJK))+1.)
      HU0=HU0+CAHU(IBGN,ITL(I,J),0.,1)/AHSM
      IBGN=ITL(I,J)
  422 IF(OPV(7).GT.0.)GO TO 420
      IF(IHUS.EQ.0)GO TO 420
      IF(IGO.EQ.0)GO TO 441
      IF(IDC(JJK).EQ.NDC(1).OR.IDC(JJK).EQ.NDC(2).OR.IDC(JJK).EQ.NDC(4)
     1.OR.IDC(JJK).EQ.NDC(5).OR.IDC(JJK).EQ.NDC(9))GO TO 423
  441 HUSC(I,J)=HU0
      GO TO 421
  423 HUSC(I,J)=HU(JJK)
      GO TO 421
  420 HUSC(I,J)=OPV(7)
  421 CALL INIFP(I3,I,J,JRT)
      X1=AMAX1(0.,COOP(IJ))
      X2=AMAX1(0.,COTL(IJ))
C     PRINTOUT OPERATION SCHEDULE
      WRITE(KW(1),317)I,JX(2),JX(3),TIL(IJ),I3,JX(4),JX(5),X1,X2,EMX(IJ)
     1,RR(IJ),X4,FRCP(IJ),RHT(IJ),RIN(IJ),DKH(IJ),DKI(IJ),HE(IJ),ORHI
     2(IJ),CN2,BIR,EFI,HUSC(I,J)
      X1=0.
      IF(TLD(IJ).GT.BIG)BIG=TLD(IJ)
      IF(I3.NE.NHC(5).AND.I3.NE.NHC(6))GO TO 180
	CALL CPTBL
	LY(I,K)=JJK
	IF(IG(JJK)>0)GO TO 584
      NCRP=NCRP+1
      IGO=IGO+1
	IG(JJK)=1
      NBCX(I,JJK)=NBCX(I,JJK)+1
      BASE=TBSC(JJK)
      IPL=ITL(I,J)+365*I1
      IPLD(1,JJK)=IPL
      NHU(JJK)=JJK
      K=K+1
      X1=SDW(JJK)*COSD(JJK)
      X2=X1+X2
      WRITE(KW(1),236)X1,CPNM(JJK)
      GO TO 584
  180 IF(I3.NE.NHC(1).AND.I3.NE.NHC(2).AND.I3.NE.NHC(3))GO TO 584
      IF(KDC1(JX(6)).EQ.0)GO TO 584
      JJK=KDC1(JX(6))
      IF(I3.NE.NHC(1))GO TO 424
      IHV=ITL(I,J)+365*I1
      IHVD(1,JJK)=IHV
      NHU(JJK)=0
      IGO=MAX0(0,IGO-1)
	IF(NBCX(I,JJK).EQ.0)NBCX(I,JJK)=1
  424 HU(JJK)=0.
      LYR(I,J)=MAX0(1,JX(7))
      WRITE(KW(1),236)HU(JJK),CPNM(JJK)
  584 IF(KFL(13).GT.0)WRITE(KW(13),582)I,JX(2),JX(3),TIL(IJ),JX(6),I3,
     1JX(4),JX(5),X2,COOP(IJ),X1
	GO TO 152
  183 ITL(I,J)=367
      HUSC(I,J)=10.
      NBC(I)=NCRP
	J1=J-1
      NTL(I)=J1
      NPST(I)=KP
      LT(I,J)=1
      JH(I,J)=0
      CND(I,J)=CN2
      QIR(I,J)=EFI
      TIR(I,J)=BIR
	CFRT(I,J)=CFMN
	HWC(I,J)=0.
      MO=1
      IF(KI.EQ.0)GO TO 185
      WRITE(KW(1),247)
      DO 184 L=1,J1
      J2=LT(I,L)
      IF(IHC(J2).NE.NHC(8))GO TO 184
      JDA=ITL(I,L)
      IF(NYD.EQ.0)JDA=JDA+1
      CALL AXMON(JDA,MO)
      CALL AICL
      XZ=COIR*VIRR(I,L)
      XY=AMAX1(0.,COTL(J2))+XZ
C     PRINTOUT IRRIGATION SCHEDULE
      WRITE(KW(1),230)I,MO,KDA,VIRR(I,L),XY,HUSC(I,L)
      IF(KFL(13).GT.0)WRITE(KW(13),503)I,MO,KDA,JH(I,L),IHC(J2),XY,XZ,
     1VIRR(I,L)
  184 CONTINUE
      MO=1
  185 IF(KF.EQ.0)GO TO 187
      WRITE(KW(1),328)
      JJ=367
      KK=0
      DO 186 L=1,J1
      J2=LT(I,L)
      IF(IHC(J2).NE.NHC(9))GO TO 186
      X1=AMAX1(0.,COTL(J2))
      JDA=ITL(I,L)
      IF(NYD.EQ.0)JDA=JDA+1
      IF(JDA.NE.JJ)GO TO 573
      IF(NBT(J2).GT.0)GO TO 573
      IF(NBE(J2).NE.KK)GO TO 573
      X1=0.
  573 JJ=JDA
      KK=NBE(J2)
      CALL AXMON(JDA,MO)
      CALL AICL
      M=LFT(I,L)
      XZ=FCST(M)*WFA(I,L)
      XY=X1+XZ
C     PRINTOUT FERTILIZER SCHEDULE
      WRITE(KW(1),329)I,MO,KDA,FTNM(M),KDF(M),NBE(J2),NBT(J2),XY,WFA
     1(I,L),TLD(J2),FN(M),FNH3(M),FNO(M),FP(M),FPO(M),FK(M),HUSC(I,L)
      IF(KFL(13).GT.0)WRITE(KW(13),510)I,MO,KDA,FTNM(M),JH(I,L),KDF(M),
     1IHC(J2),NBE(J2),NBT(J2),XY,XZ,WFA(I,L)
  186 CONTINUE
      MO=1
  187 JJ=367
      KK=0
      IF(KP.EQ.0)GO TO 525
      WRITE(KW(1),377)
      DO 188 L=1,J1
      J2=LT(I,L)
      IF(IHC(J2).NE.NHC(7))GO TO 188
      X1=AMAX1(0.,COTL(J2))
      JDA=ITL(I,L)
      IF(NYD.EQ.0)JDA=JDA+1
      IF(JDA.NE.JJ)GO TO 574
      IF(NBT(J2).GT.0)GO TO 574
      IF(NBE(J2).NE.KK)GO TO 574
      X1=0.
  574 JJ=JDA
      KK=NBE(J2)
      CALL AXMON(JDA,MO)
      CALL AICL
      M=LPC(I,L)
      XZ=PCST(M)*PSTR(I,L)
      XY=X1+XZ
C     PRINTOUT PESTICIDE SCHEDULE
      WRITE(KW(1),378)I,MO,KDA,PSTN(M),KDP(M),NBE(J2),NBT(J2),XY,PSTR
     1(I,L),PSTE(I,L),HUSC(I,L)
      IF(KFL(13).GT.0)WRITE(KW(13),501)I,MO,KDA,PSTN(M),JH(I,L),KDP(M),
     1IHC(J2),NBE(J2),NBT(J2),XY,XZ,PSTR(I,L)
  188 CONTINUE
  525 IF(JX(1).EQ.0)GO TO 526
      I=JX(1)
      IY1=I
      GO TO 189
  526 K2=1
      REWIND KR(16)
      NRO=IY1
      IGSD=0
      IF(NSTP.GT.0.AND.NSTP.LT.366)IGSD=NRO
      JX(4)=IAUI
      JX(5)=0
      CALL TILTBL
      IAUI=NDT 
	WRITE(KW(1),715)TIL(NDT),TLD(NDT)
C     IF(IAUF.EQ.0)GO TO 689
      JX(4)=261
      JX(5)=0
      CALL TILTBL
      IAUF=NDT 
      IF(LMS.GT.0)GO TO 690
      JX(4)=267
      JX(5)=0
      CALL TILTBL
      IAUL=NDT
	WRITE(KW(1),714)TIL(NDT),TLD(NDT)
  690 IDFT(1)=IDF0
      L=1
      IF(IDFT(1).EQ.0)GO TO 425
      IDFT(2)=IDF0
	GO TO 442
  425 IDFT(1)=52
      IDFT(2)=52
  442 DO 246 K=1,2
      JX(7)=IDFT(K)
      CALL NFTBL(L)
  246 IDFT(K)=L
      WRITE(KW(1),716)TIL(IAUF),TLD(IAUF),FTNM(IDFT(1))
	IF(IDFP==0)IDFP=53
	IF(IDFX==0)THEN
	JX(7)=IDFP
	CALL NFTBL(L)
	IDFP=L
C    FARMERS
      IDFX=1
	END IF
      DO 193 I=1,NRO
      IF(NBC(I).EQ.0)NBC(I)=1
      IF(LY(I,1).GT.0)GO TO 193
      I1=I-1
      IF(I1.EQ.0)I1=NRO
	NBC(I1)=MAX(NBC(I1),1)
      LY(I,1)=LY(I1,NBC(I1))
  193 CONTINUE
      IF(IGO.EQ.0)GO TO 170
	NBCX(1,LY(NRO,NBC(NRO)))=NBCX(1,LY(NRO,NBC(NRO)))+1
      NN=NBC(1)
      DO 171 J=1,12
      IF(NHU(J).EQ.0)GO TO 171
      DO 177 I=1,NN
      IF(LY(1,I).EQ.J)GO TO 171
  177 CONTINUE
      NBC(1)=NBC(1)+1
      L=NBC(1)
  176 L1=L-1
      LY(1,L)=LY(1,L1)
      L=L1
      IF(L1.GT.1)GO TO 176
      LY(1,1)=NHU(J)
  171 CONTINUE
C     ANM = CROP NAME
C     X1  = GRAIN PRICE ($/T)
C     X2  = FORAGE PRICE ($/T)
C     LINE 8/27
  170 READ(KR(26),630)ANM,X1,X2
      IF(ANM=='    ')GO TO 686
      DO 685 J=1,LC
      IF(ANM.EQ.CPNM(J))GO TO 684
  685 CONTINUE
      GO TO 170
  684 PRYG(J)=X1
      PRYF(J)=X2
      GO TO 170
C     PRINTOUT CROP PARAMETERS
  686 CALL APAGE(1)
      REWIND KR(26)

      WRITE(KW(1),348)
      WRITE(KW(1),248)(CPNM(I),I=1,LC)
      WRITE(KW(1),49)'WA  ',(WA(I),I=1,LC)
      WRITE(KW(1),53)'WUB ',(WUB(I),I=1,LC)
      WRITE(KW(1),53)'HI  ',(HI(I),I=1,LC)
      WRITE(KW(1),49)'TOPT',(TOPC(I),I=1,LC)
      WRITE(KW(1),49)'TBAS',(TBSC(I),I=1,LC)
      WRITE(KW(1),35)'GMHU',(GMHU(I),I=1,LC)
      WRITE(KW(1),53)'DMLA',(DMLA(I),I=1,LC)
      WRITE(KW(1),53)'DLAI',(DLAI(I),I=1,LC)
      WRITE(KW(1),63)'LAP1',(DLAP(1,I),I=1,LC)
      WRITE(KW(1),63)'LAP2',(DLAP(2,I),I=1,LC)
      WRITE(KW(1),63)'PPL1',(PPLP(1,I),I=1,LC)
      WRITE(KW(1),63)'PPL2',(PPLP(2,I),I=1,LC)
      WRITE(KW(1),63)'FRS1',(FRST(1,I),I=1,LC)
      WRITE(KW(1),63)'FRS2',(FRST(2,I),I=1,LC)
      WRITE(KW(1),53)'RLAD',(RLAD(I),I=1,LC)
      WRITE(KW(1),53)'RBMD',(RBMD(I),I=1,LC)
      WRITE(KW(1),49)'ALT ',(ALT(I),I=1,LC)
      WRITE(KW(1),53)'CAF ',(CAF(I),I=1,LC)
      WRITE(KW(1),78)'GSI ',(GSI(I),I=1,LC)
      WRITE(KW(1),53)'WAC2',(WAC2(2,I),I=1,LC)
      WRITE(KW(1),49)'WAVP',(WAVP(I),I=1,LC)
      WRITE(KW(1),49)'VPTH',(VPTH(I),I=1,LC)
      WRITE(KW(1),53)'VPD2',(VPD2(I),I=1,LC)
      WRITE(KW(1),49)'SDW ',(SDW(I),I=1,LC)
      WRITE(KW(1),53)'HMX ',(HMX(I),I=1,LC)
      WRITE(KW(1),53)'RDMX',(RDMX(I),I=1,LC)
      WRITE(KW(1),63)'RWP1',(RWPC(1,I),I=1,LC)
      WRITE(KW(1),63)'RWP2',(RWPC(2,I),I=1,LC)
      WRITE(KW(1),78)'CNY ',(CNY(I),I=1,LC)
      WRITE(KW(1),78)'CPY ',(CPY(I),I=1,LC)
      WRITE(KW(1),78)'CKY ',(CKY(I),I=1,LC)
      WRITE(KW(1),78)'WSYF',(WSYF(I),I=1,LC)
      WRITE(KW(1),53)'PST ',(PST(I),I=1,LC)
      WRITE(KW(1),53)'COSD',(COSD(I),I=1,LC)
      WRITE(KW(1),53)'PRYG',(PRYG(I),I=1,LC)
      WRITE(KW(1),53)'PRYF',(PRYF(I),I=1,LC)
      WRITE(KW(1),53)'WCYS',(WCY(I),I=1,LC)
      WRITE(KW(1),78)'BN1 ',(BN(1,I),I=1,LC)
      WRITE(KW(1),78)'BN2 ',(BN(2,I),I=1,LC)
      WRITE(KW(1),78)'BN3 ',(BN(3,I),I=1,LC)
      WRITE(KW(1),78)'BP1 ',(BP(1,I),I=1,LC)
      WRITE(KW(1),78)'BP2 ',(BP(2,I),I=1,LC)
      WRITE(KW(1),78)'BP3 ',(BP(3,I),I=1,LC)
      WRITE(KW(1),78)'BK1 ',(BK(1,I),I=1,LC)
      WRITE(KW(1),78)'BK2 ',(BK(2,I),I=1,LC)
      WRITE(KW(1),78)'BK3 ',(BK(3,I),I=1,LC)
      WRITE(KW(1),63)'BW1 ',(BWD(1,I),I=1,LC)
      WRITE(KW(1),63)'BW2 ',(BWD(2,I),I=1,LC)
      WRITE(KW(1),63)'BW3 ',(BWD(3,I),I=1,LC)
      WRITE(KW(1),63)'STX1',(STX(1,I),I=1,LC)
      WRITE(KW(1),63)'STX2',(STX(2,I),I=1,LC)
      WRITE(KW(1),63)'BLG1',(BLG(1,I),I=1,LC)
      WRITE(KW(1),63)'BLG2',(BLG(2,I),I=1,LC)
      WRITE(KW(1),78)'FTO ',(FTO(I),I=1,LC)
      WRITE(KW(1),78)'FLT ',(FLT(I),I=1,LC)
      WRITE(KW(1),281)(IDC(I),I=1,LC)
      IPL=0
      LRG=0
      DO 194 I=1,LC
      NHU(I)=IHU(I)
      IF(NHU(I).GT.LRG)LRG=NHU(I)
      IF(RDMX(I).GT.RZ)RZ=RDMX(I)
      IF(IDC(I).EQ.NDC(7).OR.IDC(I).EQ.NDC(8).OR.IDC(I).EQ.NDC(10))XMTU
     1(I)=(1.-EXP(-FTO(I)/XMTU(I)))/144.
      BLG(3,I)=BLG(2,I)
      BLG(1,I)=BLG(1,I)/BLG(2,I)
      BLG(2,I)=.99
      CALL ASCRV(BLG(1,I),BLG(2,I),.5,1.)
	IF(NUPC.EQ.0)GO TO 832
      BN(4,I)=BN(1,I)
      X1=BN(1,I)-BN(3,I)
      BN(1,I)=1.-(BN(2,I)-BN(3,I))/X1
      BN(2,I)=1.-.00001/X1
      CALL ASCRV(BN(1,I),BN(2,I),.5,1.)
      BP(4,I)=BP(1,I)
      X1=BP(1,I)-BP(3,I)
      BP(1,I)=1.-(BP(2,I)-BP(3,I))/X1
      BP(2,I)=1.-.00001/X1
      CALL ASCRV(BP(1,I),BP(2,I),.5,1.)
      GO TO 833
  832 CALL NCONC(BN(1,I),BN(2,I),BN(3,I),BN(4,I))
      CALL NCONC(BP(1,I),BP(2,I),BP(3,I),BP(4,I))
  833 DO 575 K=1,3
      XTP(K)=0.
      DO 631 J=1,3
      XTP(K)=XTP(K)+BK(J,I)*AKX(K,J)
  631 CONTINUE
  575 CONTINUE
      BK(1,I)=XTP(1)
      BK(2,I)=XTP(2)
      BK(4,I)=XTP(3)
      IHU(I)=1
      X1=ASPLT(DLAP(1,I))*.01
      X2=ASPLT(DLAP(2,I))*.01
      CALL ASCRV(DLAP(1,I),DLAP(2,I),X1,X2)
      X1=ASPLT(FRST(1,I))
      X2=ASPLT(FRST(2,I))
      CALL ASCRV(FRST(1,I),FRST(2,I),X1,X2)
      WAC2(1,I)=WA(I)*.01
      X2=ASPLT(WAC2(2,I))
      CALL ASCRV(WAC2(1,I),WAC2(2,I),330.,X2)
      X2=ASPLT(VPD2(I))
      VPD2(I)=(1.-VPD2(I))/(X2-VPTH(I))
      UNA(I)=PARM(39)*BN(3,I)*WA(I)*PARM(28)
	ULYN(I)=UNA(I)
      BLYN(I)=0.
      DO 194 J=1,18
      DO 194 K=1,12
      SMMC(J,K,I)=0.
  194 CONTINUE
      DO 62 J=1,LRG
      WRITE(KW(1),78)'POP ',(POP(I,J),I=1,LC)
   62 WRITE(KW(1),49)'MXLA',(PPLA(I,J),I=1,LC)
      DO 195 J=1,LRG
      WRITE(KW(1),35)'PHU ',(PHU(I,J),I=1,LC)
  195 CONTINUE
      CALL APAGE(1)
      WRITE(KW(1),348)
      WRITE(KW(1),248)(CPNM(I),I=1,LC)
      WRITE(KW(1),78)'BN1 ',(BN(1,I),I=1,LC)
      WRITE(KW(1),78)'BN2 ',(BN(2,I),I=1,LC)
      WRITE(KW(1),78)'BN3 ',(BN(3,I),I=1,LC)
      WRITE(KW(1),78)'BN4 ',(BN(4,I),I=1,LC)
      WRITE(KW(1),78)'BP1 ',(BP(1,I),I=1,LC)
      WRITE(KW(1),78)'BP2 ',(BP(2,I),I=1,LC)
      WRITE(KW(1),78)'BP3 ',(BP(3,I),I=1,LC)
      WRITE(KW(1),78)'BP4 ',(BP(4,I),I=1,LC)
      WRITE(KW(1),78)'BK1 ',(BK(1,I),I=1,LC)
      WRITE(KW(1),78)'BK2 ',(BK(2,I),I=1,LC)
      WRITE(KW(1),78)'BK3 ',(BK(3,I),I=1,LC)
      WRITE(KW(1),63)'LAP1',(DLAP(1,I),I=1,LC)
      WRITE(KW(1),63)'LAP2',(DLAP(2,I),I=1,LC)
      WRITE(KW(1),63)'FRS1',(FRST(1,I),I=1,LC)
      WRITE(KW(1),63)'FRS2',(FRST(2,I),I=1,LC)
      WRITE(KW(1),63)'WAC1',(WAC2(1,I),I=1,LC)
      WRITE(KW(1),63)'WAC2',(WAC2(2,I),I=1,LC)
      WRITE(KW(1),63)'PPC1',(PPCF(1,I),I=1,LC)
      WRITE(KW(1),63)'PPC2',(PPCF(2,I),I=1,LC)
      IF(NDP.EQ.0)GO TO 197
      WRITE(KW(1),381)
      WRITE(KW(1),382)
      DO 196 I=1,NDP
C     PRINTOUT PESTICIDE DATA
      WRITE(KW(1),380)PSTN(I),PSOL(I),PHLS(I),PHLF(I),PWOF(I),PKOC(I),
     1PCST(I)
      PSOL(I)=PSOL(I)*10.
      PHLS(I)=1.-EXP(-.693/PHLS(I))
  196 PHLF(I)=1.-EXP(-.693/PHLF(I))
  197 JD=LY(NRO,NBC(NRO))
      ICCD=0
      IRTC=1
      I=1
      IF(NBC(NRO).GT.1)GO TO 634
      IF(IHVD(1,JD).EQ.0)GO TO 677
      IF(IPLD(1,JD).LT.IHVD(1,JD))GO TO 677
  634 N1=NSTP+365*(NRO-1)
  676 IF(N1.LT.IHVD(1,LY(NRO,I)))GO TO 677
      I=I+1
      IF(I.LE.NBC(NRO))GO TO 676
      GO TO 678
  677 ICCD=1 
      IRTC=I
  678 STDN=8.29*STD
      STDP=1.04*STD
      STDK=8.29*STD
      STDL=.1*STD
      IF(RZ.GT.XX)RZ=XX
      IF(BIG.GT.XX)BIG=XX
      BTN=TWN+TNO3+STDN
	BTNX=BTN
      BTC=TOC
      BTP=TAP+TMP+TOP+TP+SEV(4)+STDP
      BTK=TSK+TEK+TFK+STDK
      KK=NTL(1)
      KC=1
      DO 199 KT=1,KK
      IF(ITL(1,KT).GE.IBD)GO TO 200
      II=IHC(LT(1,KT))
      IF(II.EQ.NHC(1))KC=KC+1
  199 CONTINUE
      KT=NTL(1)
  200 JT2=LT(1,KT)
C     IF(NGN.GT.0)CALL WREAD
      BFT=BFT0
      IF(BFT0.GT.1.)BFT=10.*BFT0*ABD*RZ
      UB1=RZ*PARM(54)
      UOB=1.-EXP(-UB1)
      AWC=0.
      AQV=0.
      ARF=0.
	ALB=SALB
      IF(SNO.GT.5.)ALB=.6
	U=0.
	SSF=0.
      IGO=0
      JJK=KDC1(JJK0)
      KC=0
	IPLD=0
      MO=MO1
      JDA=IBD-1
      IF(JDA.LE.0)JDA=365
      CALL WHLRMX
      HR0=HRLT
C     BEGIN ANNUAL SIMULATION LOOP
C TENN
C      WRITE (KW4,4267) (HED(KA(K)),K=1,NKA),(HED(KS(K)),K=1,NKS)
C      WRITE (KW5,4266) (HED(KA(K)),K=1,NKA),(HED(KS(K)),K=1,NKS)
C
C 4266 FORMAT (1X,' INPUT  ','  CROP  ',' TILLAGE ','YEAR ',' MONTH ',
C     140(4X,A4,3X)) 
C 4267 FORMAT (1X,' INPUT  ','  CROP  ',' TILLAGE ','YEAR ',1X,
C     140(3X,A4,3X),
C     11X,'CROP',3X,'YLD-T/HA',1X,'BIOM-T/HA',2X,'IRGA-MM',3X,
C     2'CAW-MM',4X,'TAW-MM',2X,'MXRD-M',2X,'LIME-T/HA',2X, 
C     3'COST-$/HA',1X,'RTRN-$/HA',6X,'EK',8X,'WK',5X,
C     4'MX HU',6X,'THK-MM',5X,'WATER',3X,4X,'N',9X,'P',6X,'TEMP',
C     57X,'AIR',
C     64X,'CROP',3X,'YLD-T/HA',1X,'BIOM-T/HA',2X,'IRGA-MM',3X,
C     7'CAW-MM',4X,'TAW-MM',2X,'MXRD-M',2X,'LIME-T/HA',2X, 
C     8'COST-$/HA',1X,'RTRN-$/HA',6X,'EK',8X,'WK',5X,
C     9'MX HU',6X,'THK-MM',5X,'WATER',3X,4X,'N',9X,'P',6X,'TEMP',
C     17X,'AIR')     
C TENN

      IRO=IRO0-1
C Modified by RICEU for counting NSTEP used by PFACTOR calculation    
  533 IF (IYR==IYR0.AND.MO==1.AND.KDA==1) NSTEP=1
      CALL BSIM
      IF(ISTP.EQ.1)GO TO 219
      IY=MAX0(1,IY-1)
      XYR=IY
      CALL APAGE(1)
      IF(KFL(9).EQ.0)GO TO 585
C   UNC
      WRITE(KWSNC,9569)ASTN,SITEFILE,WPM1FILE,WINDFILE,SOILFILE,
     1OPSCFILE,YLAT,XLOG,NUMS5,STATE,SOILNAME,TEXID,
	2Z(LID(1)),BD(LID(1)),SSF(LID(1)),SOIL(9,LID(1)),SOIL(8,LID(1)),
	3PH(LID(1)),CEC(LID(1)),
	4Z(LID(2)),BD(LID(2)),SSF(LID(2)),SOIL(9,LID(2)),SOIL(8,LID(2)),
	5PH(LID(2)),CEC(LID(2))
 9569 FORMAT(1X,A16,',',5(A20,','),2(1X,F8.2,','),1X,A6,',',1X,A2,',',
     1A29,',',A8,',',2X,14(F8.2,','))

      IF(KFL(38).GT.0)WRITE(KWNCS,9566)ASTN,SITEFILE,WPM1FILE,WINDFILE,
     1SOILFILE,OPSCFILE,YLAT,XLOG,NUMS5,STATE,SOILNAME,TEXID,
	2Z(LID(1)),BD(LID(1)),SSF(LID(1)),SOIL(9,LID(1)),SOIL(8,LID(1)),
	3PH(LID(1)),CEC(LID(1)),
	4Z(LID(2)),BD(LID(2)),SSF(LID(2)),SOIL(9,LID(2)),SOIL(8,LID(2)),
	5PH(LID(2)),CEC(LID(2))
 9566 FORMAT(1X,A16,1X,5A20,2(1X,F8.2,1X),1X,A6,1X,A2,1X,A29,A8,
     12X,14F8.2)

C   UNC
      WRITE(KW(9),625)(Z(LID(I)),I=1,NBSL)
      WRITE(KW(9),625)(BD(LID(I)),I=1,NBSL)
      WRITE(KW(9),625)(SSF(LID(I)),I=1,NBSL)
      WRITE(KW(9),625)(SOIL(9,LID(I)),I=1,NBSL)
      WRITE(KW(9),625)(SAN(LID(I)),I=1,NBSL)
      WRITE(KW(9),625)(SIL(LID(I)),I=1,NBSL)
      WRITE(KW(9),695)(SOIL(6,LID(I)),I=1,NBSL)
      WRITE(KW(9),625)(PH(LID(I)),I=1,NBSL)
      WRITE(KW(9),625)(SMB(LID(I)),I=1,NBSL)
      WRITE(KW(9),625)(SOIL(7,LID(I)),I=1,NBSL)
      WRITE(KW(9),625)(CAC(LID(I)),I=1,NBSL)
      WRITE(KW(9),625)(CEC(LID(I)),I=1,NBSL)
      WRITE(KW(9),625)(ROK(LID(I)),I=1,NBSL)
      WRITE(KW(9),625)(SOIL(5,LID(I)),I=1,NBSL)
      WRITE(KW(9),625)(SOIL(1,LID(I)),I=1,NBSL)
      WRITE(KW(9),625)(RSD(LID(I)),I=1,NBSL)
      WRITE(KW(9),625)(SOIL(13,LID(I)),I=1,NBSL)
      WRITE(KW(9),625)(PSP(LID(I)),I=1,NBSL)
      WRITE(KW(9),625)(SATC(LID(I)),I=1,NBSL)
	WRITE(KW(9),625)(HCL(LID(I)),I=1,NBSL)
      WRITE(KW(9),625)(SOIL(4,LID(I)),I=1,NBSL)
      WRITE(KW(9),625)(SOIL(15,LID(I)),I=1,NBSL)
      WRITE(KW(9),625)(ECND(LID(I)),I=1,NBSL)
	WRITE(KW(9),625)(STFR(LID(I)),I=1,NBSL)
      WRITE(KW(9),625)(SOIL(17,LID(I)),I=1,NBSL)
	WRITE(KW(9),695)(CPRV(LID(I)),I=1,NBSL)
	WRITE(KW(9),695)(CPRH(LID(I)),I=1,NBSL)
      WRITE(KW(9),695)(WLS(LID(I)),I=1,NBSL)
      WRITE(KW(9),695)(WLM(LID(I)),I=1,NBSL)
      WRITE(KW(9),695)(WLSL(LID(I)),I=1,NBSL)
      WRITE(KW(9),695)(WLSC(LID(I)),I=1,NBSL)
      WRITE(KW(9),695)(WLMC(LID(I)),I=1,NBSL)
      WRITE(KW(9),695)(WLSLC(LID(I)),I=1,NBSL)
      WRITE(KW(9),695)(WLSLNC(LID(I)),I=1,NBSL)
      WRITE(KW(9),695)(WBMC(LID(I)),I=1,NBSL)
      WRITE(KW(9),695)(WHSC(LID(I)),I=1,NBSL)
      WRITE(KW(9),695)(WHPC(LID(I)),I=1,NBSL)
      WRITE(KW(9),625)(WLSN(LID(I)),I=1,NBSL)
      WRITE(KW(9),625)(WLMN(LID(I)),I=1,NBSL)
      WRITE(KW(9),625)(WBMN(LID(I)),I=1,NBSL)
      WRITE(KW(9),695)(WHSN(LID(I)),I=1,NBSL)
      WRITE(KW(9),695)(WHPN(LID(I)),I=1,NBSL)
      WRITE(KW(9),625)(SOIL(18,LID(I)),I=1,NBSL)
      WRITE(KW(9),625)(SOIL(19,LID(I)),I=1,NBSL)
  585 WRITE(KW(1),349)
      CALL SOLIO(YTP,1)
	CALL SCONT
      WRITE(KW(1),294)THK
      WRITE(KW(1),322)SNO
C     PRINTOUT WATER BALANCE
      CALL HSWBL(SM(4),SM(14),SM(11),SM(16),SM(17),SM(19),SNO,SW,SWW,
     1SM(20),SM(84),KW)
      IF(IRR.NE.4)GO TO 529
      VLG=.1*VLG/(DALG+1.E-10)
      CALL HLGB(SM(23),SM(21),SM(24),SM(78),VLG,VLGB,SM(22),KW)
      CALL NLGB(SM(79),SM(80),WTMB,WTMU,KW)
  529 RNO3=SM(4)*RFNC
      SUM=0.
      TOT=0.
      ADD=0.
      DO 64 J=1,12
      TOT=TOT+UP1(J)
      ADD=ADD+UK1(J)
   64 SUM=SUM+UN1(J)
      FTN=TNO3+TWN+STDN+STDON+SUM+TNH3
      CALL NBL(BTN,RNO3,SM(43),SM(44),SM(45),SM(46),SM(49),SM(59),TYN,
     1SM(52),SM(60),SM(61),SM(50),FTN,1,KW)
      WRITE(KW(1),636)TNO3,TNH3,TWN,STDN,STDON,SUM
      CALL NCBL(BTC,SM(77),SM(75),SM(76),SM(74),SM(65),SM(73),TOC,KW)
      WRITE(KW(1),637)ZLSC,ZLMC,ZBMC,ZHSC,ZHPC
      FTP=TAP+TOP+TMP+TP+TFOP+STDP+STDOP+TOT
      CALL NBL(BTP,0.,SM(54),SM(55),0.,SM(57),0.,SM(62),TYP,0.,SM(63),
     10.,0.,FTP,2,KW)
      WRITE(KW(1),638)TAP,TOP,TMP,TP,TFOP,STDP,STDOP,TOT
      FTK=TSK+TEK+TFK+STDK+STDOK+ADD
      CALL NBL(BTK,0.,SM(78),SM(79),SM(80),SM(81),0.,0.,TYK,0.,SM(64),
     10.,0.,FTK,3,KW)
      WRITE(KW(1),639)TSK,TEK,TFK,STDK,STDOK,ADD
      CALL SLTB(SM(69),SM(72),SM(82),SM(71),SM(70),SLT0,TSLT,KW)
      XQP=NQP
      XCN=JCN
      XX=XQP+.01
      PRSD=PRSD-PRAV*PRAV/XX
      PRAV=PRAV/XX
      IF(PRSD.GT.0.)PRSD=SQRT(PRSD/XX)
      CYSD=CYSD-CYAV*CYAV/XX
      CYAV=CYAV/XX
      IF(CYSD.GT.0.)CYSD=SQRT(CYSD/XX)
      QPS=QPS/XX
      TCAV=TCAV/XX
      SM(58)=SM(58)/XX
C     DETERMINE AVE ANNUAL VALUES
      SMY(13)=0.
      SUM=0.
      TOT=0.
      ADD=0.
      AD2=0.
      DO 204 I=1,12
      X1=IHRL(I)
      THRL(I)=THRL(I)/X1
      SRMX(I)=SRMX(I)/X1
      TR(I)=TR(I)/XYR
      TSN(I)=TSN(I)/XYR
      TSY(I)=TSY(I)/XYR
      RSY(I)=RSY(I)/XYR
      TYW(I)=TYW(I)/XYR
      TQ(I)=TQ(I)/XYR
      TXMX(I)=TXMX(I)/X1
      TXMN(I)=TXMN(I)/X1
      TSR(I)=TSR(I)/X1
      W(I)=W(I)/(TEI(I)+1.E-20)
      RCM(I)=RCM(I)/(TEI(I)+1.E-20)
      TAL(I)=TAL(I)/CX(I)
      CX(I)=CX(I)/XYR
      TEI(I)=TEI(I)/XYR
      SMY(I)=SRD(I)/XYR
      SET(I)=SET(I)/XYR
      TET(I)=TET(I)/XYR
      ASW(I)=ASW(I)/XYR
      QIN(I)=QIN(I)/XYR
      TSTL(I)=TSTL(I)/XYR
      TRHT(I)=TRHT(I)/XYR
      TAMX(I)=TAMX(I)/XYR
      TOT=TOT+QIN(I)
      ADD=ADD+TAMX(I)
      SUM=SUM+ASW(I)
      SMY(13)=SMY(13)+SMY(I)
      AD2=AD2+CX(I)
  204 CONTINUE
      SM(15)=SM(15)/(XCN+1.E-10)
	X1=SM(28)+1.E-10
      SM(29)=SM(29)/X1
      SM(37)=SM(37)/X1
	SM(90)=SM(90)/X1
	SM(91)=SM(91)/X1
      SRF2=SM(4)*SM(4)
      SUM=SUM/12.
      DO 205 K=1,14
  205 SM(K)=SM(K)/XYR
      DO 449 K=16,28
  449 SM(K)=SM(K)/XYR
      DO 206 K=30,36
  206 SM(K)=SM(K)/XYR
      DO 191 K=38,57
  191 SM(K)=SM(K)/XYR
      DO 192 K=59,NSM-2
  192 SM(K)=SM(K)/XYR
      IF(NDP.EQ.0.OR.MASP.LT.0)GO TO 212
      CALL APAGE(1)
      WRITE(KW(1),385)
      WRITE(KW(1),460)
      NY(1)=1
      NY(2)=.1*XYR+1.5
      NY(3)=.5*XYR+1.5
      DO 461 K=1,NDP
      WRITE(KW(1),462)PSTN(K)
      DO 471 I=1,5
      DO 472 J=1,NBYR
      XYP(J)=APY(I,K,J)
      IF(XYP(J).GT.1.E-4)GO TO 477
      APY(I,K,J)=0.
      AYB(I,K,J)=0.
  477 XTP(J)=APQ(I,K,J)
      IF(XTP(J).GT.1.E-4)GO TO 472
      APQ(I,K,J)=0.
      AQB(I,K,J)=0.
  472 CONTINUE
      CALL ASORT1(XTP,NX,NBYR)
C     WRITE(KW(1),373)(APQ(I,K,NX(J)),J=1,NBYR)
      NXX(1,I)=NX(NY(1))
      NXX(2,I)=NX(NY(2))
      NXX(3,I)=NX(NY(3))
      CALL ASORT1(XYP,NX,NBYR)
C     WRITE(KW(1),373)(APY(I,K,NX(J)),J=1,NBYR)
      NYY(1,I)=NX(NY(1))
      NYY(2,I)=NX(NY(2))
      NYY(3,I)=NX(NY(3))
  471 CONTINUE
      DO 461 N2=1,3
C     PRINTOUT PESTICIDE FREQ SUMMARY
      WRITE(KW(1),463)(APQ(I,K,NXX(N2,I)),I=1,5)
      WRITE(KW(1),464)(AQB(I,K,NXX(N2,I)),I=1,5)
      WRITE(KW(1),465)(APY(I,K,NYY(N2,I)),I=1,5)
      WRITE(KW(1),466)(AYB(I,K,NYY(N2,I)),I=1,5)
      IF(N2-2)476,475,461
  475 WRITE(KW(1),473)
      GO TO 461
  476 WRITE(KW(1),474)
  461 CONTINUE
      WRITE(KW(1),386)
      DO 446 K=1,NDP
      DO 207 L=1,7
  207 SMAP(L,K)=SMAP(L,K)/XYR
  446 SMAP(10,K)=SMAP(10,K)/XYR
      I1=0
      K1=0
  418 I1=I1+10
      N1=MIN0(I1,NDP)
      K2=K1+1
      N2=MIN0(10,NDP-K1)
C     PRINTOUT PESTICIDE SUMMARY
      WRITE(KW(1),383)(PSTN(K),K=K2,N1)
      IF(MASP.EQ.0)GO TO 467
      WRITE(KW(1),384)HEDP(1),(SMAP(1,K),K=K2,N1)
      I=1
      DO 208 K=K2,N1
      PPX(I)=SMAP(2,K)
      CALL ACOUT(PPX(I),SM(14),1.)
  208 I=I+1
      WRITE(KW(1),387)HEDP(2),(PPX(I),I=1,N2)
      I=1
      DO 209 K=K2,N1
      PPX(I)=SMAP(3,K)
      CALL ACOUT(PPX(I),SM(17),1.)
  209 I=I+1
      WRITE(KW(1),387)HEDP(3),(PPX(I),I=1,N2)
      I=1
      DO 210 K=K2,N1
      PPX(I)=SMAP(4,K)
      CALL ACOUT(PPX(I),SM(16),1.)
  210 I=I+1
      WRITE(KW(1),387)HEDP(4),(PPX(I),I=1,N2)
      DO 211 L=5,7
  211 WRITE(KW(1),384)HEDP(L),(SMAP(L,K),K=K2,N1)
      I=1
      DO 447 K=K2,N1
      PPX(I)=SMAP(10,K)
      CALL ACOUT(PPX(I),SM(18),1.)
  447 I=I+1
      WRITE(KW(1),387)HEDP(10),(PPX(I),I=1,N2)
      GO TO 469
  467 DO 468 L=1,7
  468 WRITE(KW(1),470)HEDP(L),(SMAP(L,K),K=K2,N1)
      WRITE(KW(1),470)HEDP(10),(SMAP(10,K),K=K2,N1)
  469 IF(N1.GE.NDP)GO TO 212
      K1=I1
      GO TO 418
  212 PPX(1)=SM(44)
      PPX(2)=SM(45)
      PPX(3)=SM(46)
      PPX(4)=SM(55)
      IF(MASP.LE.0)GO TO 178
      CALL ACOUT(PPX(1),SM(14),1000.)
      CALL ACOUT(PPX(2),SM(16),1000.)
      CALL ACOUT(PPX(3),SM(17),1000.)
      CALL ACOUT(PPX(4),SM(14),1000.)
  178 TYN=TYN/XYR
      TYP=TYP/XYR
      X6=CSTZ(1)+CSTZ(2)
      X1=CST1/XYR+X6
      X4=CSO1/XYR
      X2=VALF1/XYR
      X3=X2-X1
      SM1=0.
      DO 659 K=1,6
      XTP(K)=ISIX(K)
      SM1=SM1+XTP(K)
  659 CONTINUE
      DO 660 K=1,6
      XTP(K)=XTP(K)/SM1
  660 CONTINUE
      CALL APAGE(1)
      WRITE(KW(1),350)
      WRITE(KW(1),661)(XTP(K),K=1,6)
      IF(DARF.GT.0..AND.XYR.GT.1.)GO TO 674
      DARF=0.
      GO TO 675
  674 DARF=DARF-SRF2/XYR
      IF(DARF.LE.0.)GO TO 675
      DARF=SQRT(DARF/(XYR-1.))
  675 WRITE(KW(1),662)BARF,SARF,DARF
      WRITE(KW(1),323)PRB,PRAV,PRSD,QPQB,QPS,NQP
      IF(TCMN.GT.1.E10)TCMN=0.
      WRITE(KW(1),417)TCAV,TCMN,TCMX
      WRITE(KW(1),448)CYAV,CYMX,CYSD
      AD1=0.
      DO 213 K=1,10
  213 AD1=AD1+CNDS(K)
      DO 214 K=1,10
  214 CNDS(K)=CNDS(K)/AD1
      WRITE(KW(1),234)(CNDS(K),K=1,10)
	WRITE(KW(1),303)RUSM
      IF(KFL(16).EQ.0)GO TO 710
      DO 691 J=1,6
      XTP(J)=0.
      DO 629 I=1,NBSL
      ISL=LID(I)
      SMS(J,ISL)=SMS(J,ISL)/(SMS(11,ISL)+1.E-5)
      XTP(J)=XTP(J)+SMS(J,ISL)
  629 CONTINUE
  691 CONTINUE
      DO 626 J=7,10
      XTP(J)=0.
      DO 627 I=1,NBSL
      ISL=LID(I)
      SMS(J,ISL)=SMS(J,ISL)/XYR
      XTP(J)=XTP(J)+SMS(J,ISL)
  627 CONTINUE
  626 CONTINUE
      DO 591 I=1,NBSL
      ISL=LID(I)
      XYP(ISL)=WOC(ISL)-XZP(6,ISL)
      YTP(ISL)=WON(ISL)-XZP(12,ISL)
  591 CONTINUE
      XYP(16)=TOC-XZP(6,16)
      YTP(16)=TWN-XZP(12,16)
      WRITE(KW(16),635)(SID(LORG(LID(J))),J=1,15),SID(16)
      XNS=NBSL
      DO 632 J=1,6
      XTP(J)=XTP(J)/XNS
  632 CONTINUE
      WRITE(KW(16),581)'   Z',(Z(LID(I)),I=1,15),Z(LID(15)),' Z   '
      WRITE(KW(16),581)' SWF',(SMS(1,LID(I)),I=1,15),XTP(1),' SWF '
      WRITE(KW(16),581)'TEMP',(SMS(2,LID(I)),I=1,15),XTP(2),' TEMP'
      WRITE(KW(16),581)'SWTF',(SMS(3,LID(I)),I=1,15),XTP(3),' SWTF'
      WRITE(KW(16),581)'TLEF',(SMS(4,LID(I)),I=1,15),XTP(4),' TLEF'
      WRITE(KW(16),581)'SPDM',(SMS(5,LID(I)),I=1,15),XTP(5),' SPDM'
      WRITE(KW(16),576)'RSDC',(SMS(7,LID(I)),I=1,15),XTP(7),' RSDC'
      WRITE(KW(16),576)'RSPC',(SMS(8,LID(I)),I=1,15),XTP(8),' RSPC'
      WRITE(KW(16),576)'RNMN',(SMS(9,LID(I)),I=1,15),XTP(9),' RNMN'
      WRITE(KW(16),576)'DNO3',(SMS(10,LID(I)),I=1,15),XTP(10),' DNO3'
      WRITE(KW(16),576)'HSC0',(XZP(1,LID(I)),I=1,15),XZP(1,16),' HSC0'
      WRITE(KW(16),576)'HSCF',(WHSC(LID(I)),I=1,15),ZHSC,' HSCF'
      WRITE(KW(16),576)'HPC0',(XZP(2,LID(I)),I=1,15),XZP(2,16),' HPC0'
      WRITE(KW(16),576)'HPCF',(WHPC(LID(I)),I=1,15),ZHPC,' HPCF'
      WRITE(KW(16),576)'LSC0',(XZP(3,LID(I)),I=1,15),XZP(3,16),' LSC0'
      WRITE(KW(16),576)'LSCF',(WLSC(LID(I)),I=1,15),ZLSC,' LSCF'
      WRITE(KW(16),576)'LMC0',(XZP(4,LID(I)),I=1,15),XZP(4,16),' LMC0'
      WRITE(KW(16),576)'LMCF',(WLMC(LID(I)),I=1,15),ZLMC,' LMCF'
      WRITE(KW(16),576)'BMC0',(XZP(5,LID(I)),I=1,15),XZP(5,16),' BMC0'
      WRITE(KW(16),576)'BMCF',(WBMC(LID(I)),I=1,15),ZBMC,' BMCF'
      WRITE(KW(16),576)'WOC0',(XZP(6,LID(I)),I=1,15),XZP(6,16),' WOC0'
      WRITE(KW(16),576)'WOCF',(WOC(LID(I)),I=1,15),TOC,' WOCF'
      WRITE(KW(16),576)'DWOC',(XYP(LID(I)),I=1,15),XYP(16),' DWOC'
      WRITE(KW(16),576)'OBCF',(OBC(LID(I)),I=1,15),SOCF,' OBCF'
      WRITE(KW(16),576)'HSN0',(XZP(7,LID(I)),I=1,15),XZP(7,16),' HSN0'
      WRITE(KW(16),576)'HSNF',(WHSN(LID(I)),I=1,15),ZHSN,' HSNF'
      WRITE(KW(16),576)'HPN0',(XZP(8,LID(I)),I=1,15),XZP(8,16),' HPN0'
      WRITE(KW(16),576)'HPNF',(WHPN(LID(I)),I=1,15),ZHPN,' HPNF'
      WRITE(KW(16),576)'LSN0',(XZP(9,LID(I)),I=1,15),XZP(9,16),' LSN0'
      WRITE(KW(16),576)'LSNF',(WLSN(LID(I)),I=1,15),ZLSN,' LSNF'
      WRITE(KW(16),576)'LMN0',(XZP(10,LID(I)),I=1,15),XZP(10,16),' LMN0'
      WRITE(KW(16),576)'LMNF',(WLMN(LID(I)),I=1,15),ZLMN,' LMNF'
      WRITE(KW(16),576)'BMN0',(XZP(11,LID(I)),I=1,15),XZP(11,16),' BMN0'
      WRITE(KW(16),576)'BMNF',(WBMN(LID(I)),I=1,15),ZBMN,' BMNF'
      WRITE(KW(16),576)'WON0',(XZP(12,LID(I)),I=1,15),XZP(12,16),' WON0'
      WRITE(KW(16),576)'WONF',(WON(LID(I)),I=1,15),TWN,' WONF'
      WRITE(KW(16),576)'DWON',(YTP(LID(I)),I=1,15),YTP(16),' DWON'
      WRITE(KW(16),581)'C/N0',(XZP(13,LID(I)),I=1,15),XZP(13,16),' C/N0'
      DO 648 I=1,100
      XTP(I)=0.
  648 CONTINUE
      DO 633 I=1,NBSL
      ISL=LID(I)
      XTP(ISL)=WOC(ISL)/WON(ISL)
  633 CONTINUE
      XTP(16)=TOC/TWN
      WRITE(KW(16),581)'C/NF',(XTP(LID(I)),I=1,15),XTP(16),' C/NF'
  710 CALL APAGE(1)
      WRITE(KW(1),350)
      WRITE(KW(1),295)
      WRITE(KW(1),319)IY
C     PRINTOUT SUMMARY MONTHLY
      WRITE(KW(1),321)HED(1),TXMX,SM(1),HED(1)
      WRITE(KW(1),321)HED(2),TXMN,SM(2),HED(2)
      WRITE(KW(1),243)HED(4),TR,SM(4),HED(4)
      WRITE(KW(1),321)'DAYP',(SMY(I),I=1,13),'DAYP'
      WRITE(KW(1),243)HED(17),TSN,SM(17),HED(17)
      WRITE(KW(1),243)HED(14),TQ,SM(14),HED(14)
      WRITE(KW(1),321)'RZSW',ASW,SUM,'RZSW'
      WRITE(KW(1),311)HED(28),TEI,SM(28),HED(28)
      WRITE(KW(1),224)'ALPH',TAL,'ALPH'
      WRITE(KW(1),321)HED(29),W,SM(29),HED(29)
      WRITE(KW(1),325)HED(37),RCM,SM(37),HED(37)
      WRITE(KW(1),321)HED(NDVSS),TSY,SM(NDVSS),HED(NDVSS)
      WRITE(KW(1),321)HED(36),RSY,SM(36),HED(36)
      WRITE(KW(1),321)HED(7),TET,SM(7),HED(7)
      WRITE(KW(1),224)HED(7),U10MX,HED(7)
      WRITE(KW(1),243)'DAYW',TAMX,ADD,'DAYW'
      WRITE(KW(1),243)HED(39),TRHT,SM(39),HED(39)
      WRITE(KW(1),243)'DAYQ',CX,AD2,'DAYQ'
      WRITE(KW(1),224)HEDC(6),TSTL,HEDC(6)
      WRITE(KW(1),311)HED(42),TYW,SM(42),HED(42)
      WRITE(KW(1),321)HED(20),QIN,TOT,HED(20)
      WRITE(KW(1),311)HED(10),SET,SM(10),HED(10)
      WRITE(KW(1),311)HED(3),TSR,SM(3),HED(3)
      WRITE(KW(1),224)'HRLT',THRL,'HRLT'
      WRITE(KW(1),324)
      WRITE(KW(1),293)IY,(HED(KA(K)),SM(KA(K)),K=5,NKA),'COST',X1,'RTRN'
     1,X2
      WRITE(KW(1),369)(HED(JC(K)),PPX(K),K=1,NJC)
      SMY(3)=0.
      SMY(4)=0.
      SMY(1)=SM(59)+SM(60)+SM(61)
      SMY(2)=SM(62)+SM(63)
      SMY(5)=1000.*AP(LD1)/WT(LD1)
      X1=LC
      X6=X6/X1
      DO 216 K=1,LC
      IF(NCR(K).EQ.0)GO TO 216
	XX=MIN0(NCR(K),IY)
	TETG(K)=1000.*(TYL1(K)+TYL2(K))/(TETG(K)+.01)
	TYL1(K)=TYL1(K)/XX
      TYL2(K)=TYL2(K)/XX
      TYLN(K)=TYLN(K)/XX
      TYLP(K)=TYLP(K)/XX
      TYLK(K)=TYLK(K)/XX
      SMY(3)=SMY(3)+TYLN(K)
      SMY(4)=SMY(4)+TYLP(K)
      TDM(K)=TDM(K)/XX
	THU(K)=THU(K)/XX
	IF(IDC(K).EQ.NDC(3).OR.IDC(K).EQ.NDC(6).OR.IDC(K).EQ.NDC(7).OR.IDC
     1(K).EQ.NDC(8).OR.IDC(K).EQ.NDC(10))XX=IY
	PSTM(K)=PSTM(K)/XX
      TCSO(K)=TCSO(K)/XX
      TCST(K)=TCST(K)/XX+X6
	TVAL(K)=TVAL(K)/XX
	TFTK(K)=TFTK(K)/XX
      TFTN(K)=TFTN(K)/XX
      TFTP(K)=TFTP(K)/XX
      TFTK(K)=TFTK(K)/XX
      TRA(K)=TRA(K)/XX
      TRD(K)=TRD(K)/XX
      TVIR(K)=TVIR(K)/XX
      TIRL(K)=TIRL(K)/XX
      TCAW(K)=TCAW(K)/XX
      TCRF(K)=TCRF(K)/XX
      TCQV(K)=TCQV(K)/XX
      DO 215 L=1,4
      TSFC(L,K)=TSFC(L,K)/XX
  215 STDA(L,K)=STDA(L,K)/XX
      DO 700 L=5,7
  700 TSFC(L,K)=TSFC(L,K)/XX
      X1=TVAL(K)-TCST(K)
      X2=TVAL(K)-TCSO(K)
C     PRINTOUT CROP SUMMARY
      WRITE(KW(1),326)CPNM(K),TYL1(K),TYL2(K),TDM(K),TYLN(K),TYLP(K),
     1TYLK(K),TFTN(K),TFTP(K),TFTK(K),TVIR(K),TIRL(K),TCAW(K),TRA(K),
     2TETG(K),THU(K),PSTM(K),TCST(K),TCSO(K),TVAL(K),X1,X2
      WRITE(KW(1),577)(TSFC(L,K),L=1,7),(STDA(L,K),L=1,3)
  216 CONTINUE
C     PRINTOUT SUMMARY
      XX=RSD(LID(1))+STD+STDO
      IF(IWP5.GT.0)REWIND KR(20)
      IF(KFL(3).EQ.0)GO TO 579
	WRITE(KW(3),578)(TITLE(I),I=21,35),IYER,IMON,IDAY,IY
      WRITE(KW(3),560)HED(4),HED(10),HED(11),HED(14),HED(16),HED(17),HED
     1(29),HED(NDVSS),HED(42),HED(48),HED(47),HED(50),HED(51),HED(52),
     2HED(49),HED(43),HED(44),HED(45),HED(46),HED(56),HED(54),HED(55),
     3HED(57),HED(66),HED(77)
      WRITE(KW(3),498)SM(4),SM(10),SM(11),SM(14),SM(16),SM(17),SM(29),
     1SM(NDVSS),SM(42),SM(48),SM(47),SM(50),SM(51),SM(52),SM(49),SM(43),
     2SM(44),SM(45),SM(46),SM(56),SM(54),SM(55),SM(57),SM(66),SM(77),
     3(PSTN(K),SMAP(1,K),K=1,10),(CPNM(K),TYL1(K),TYL2(K),TDM(K),TYLN(K)
     4,TYLP(K),TFTN(K),TFTP(K),TVIR(K),TIRL(K),TETG(K),TCAW(K),TCRF(K),
     5TCQV(K),THU(K),PHU(K,IHU(K)),TCST(K),TCSO(K),TVAL(K),PSTM(K),
     6(TSFC(L,K),L=1,7),(STDA(L,K),L=1,3),K=1,LC)
C   TENN
      IF(KFL(36).GT.0)WRITE(KWTNS,7560) HED(4),HED(10),HED(11),HED(14),
     1HED(16),HED(17),HED(30),HED(NDVSS),HED(42),HED(48),
     2HED(47),HED(50),HED(51),HED(52),HED(49),HED(43),HED(44),
     3HED(45),HED(46),HED(59),HED(60),HED(61),HED(62),HED(63),
     4HED(56),HED(54),HED(55),HED(57),HED(66),HED(77)
 7560 FORMAT(1X,'  RUN NAME     ',1X,' LOCATION NAME       ',
     1'STATISTICAL WEATHER ',' STATISTICAL WIND   ',
	2' SOIL FILE NAME     ',
	3'OPERATION FILE NAME ',' LATITUDE ',' LONGITUDE',
     430(4X,A4),4X,' TOC',4X,
     1' TAP',4X,'TNO3',1(4X,'CPNM',4X,'YLDG',4X
     5,'YLDF',4X,'BIOM',4X,' YLN',4X,' YLP',4X,' FTN',4X,
     6' FTP',4X,'IRGA',4X,'WUEF',4X,' CAW',4X,
     7' CRF',4X,' CQV',4X,' THU',4X,' PHU',4X,'PSTF',
     84X,'  WS',4X,'  NS',4X,'  PS',4X,'  KS',4X,'  TS',4X,'  AS',
     94X,'  SS'))


      IF(KFL(36).GT.0)WRITE(KWTNS,7498)ASTN,SITEFILE,WPM1FILE,WINDFILE,
     1SOILFILE,OPSCFILE,YLAT,XLOG,SM(4),SM(10),SM(11),SM(14),SM(16),
     2SM(17),SM(30),SM(NDVSS),SM(42),SM(48),SM(47),SM(50),SM(51),SM(52),
     3SM(49),SM(43),SM(44),SM(45),SM(46),SM(59),SM(60),SM(61),SM(62),
     4SM(63),SM(56),SM(54),SM(55),SM(57),SM(66),SM(77),TOCVWB,TAP,
     5TNO3,(CPNM(K),TYL1(K),TYL2(K),TDM(K),TYLN(K)
     6,TYLP(K),TFTN(K),TFTP(K),TVIR(K),TETG(K),TCAW(K),TCRF(K),
     7TCQV(K),THU(K),PHU(K,IHU(K)),PSTM(K),
     8(TSFC(L,K),L=1,7),K=1,LC)
 7498 FORMAT(1X,A16,1X,5A20,2(1X,F8.2,1X),3F8.0,3F8.1,F8.3,26F8.2,
     110(4X,A4,15F8.2,7F8.1))

C   TENN
  579 IF(KFL(29).GT.0)WRITE(KW(30),694)ASTN,CPNM(1),TYL1(1),(SM(KYA(J)),
     1J=1,NKYA)
C     ,(CPNM
C    1(K),TYL1(K),TYL2(K),TDM(K),TYLN(K),TYLP(K),TFTN(K),TFTP(K),TVIR(K)
C    2,TIRL(K),TETG(K),TCAW(K),TCRF(K),TCQV(K),THU(K),PHU(K,IHU(K)),TCST
C    3(K),TCSO(K),TVAL(K),PSTM(K),(TSFC(L,K),L=1,7),(STDA(L,K),L=1,3),K=
C    41,LC)
	IF(KFL(NGF).EQ.0)GO TO 514
	X2=SM(49)+SM(52)
	X3=SM(43)+SM(44)+SM(45)+SM(46)
	DO 515 K=1,8
  515 SMGS(K)=SMGS(K)/XYR
      SMGS(2)=SMGS(2)/365.25
	WRITE(KW(NGF-1),512)XLOG,YLAT,SMGS(1),TETG(1),SMGS(3),SMGS(4),SM
     1(19),SMGS(5),SM(11),SMGS(6),SMGS(7),TRA(1),TYLN(1),SMGS(2),X2,X3,
     2SM(42),SM(NDVSS),SM(3),TDM(1),(TSFC(L,1),L=1,7),SM(46),SM(43),SM
     3(47),SM(49),SM(50),SM(85),SM(51),SM(52),SM(53),SM(54),SM(56),SM
     4(57),SM(58),SM(59),SM(60),SM(61),SM(62),SM(63),TYLP(1),TYLK(1),SM
     5(77),SM(4),SM(17),SM(14),SM(5),SM(6),SM(10),SM(12),SM(13),SM(16),
     6SM(18),SM(15),SM(20),SMGS(8),SM(68)
  514 IF(NBSL.LT.3.OR.ZF.LT.1.E-10)GO TO 507
C  1  N1   = NUMBER OF Y FOR SECOND THRU LAST SIMULATION.
C  2  N2   = 0 FOR NORMAL EROSION OF SOIL PROFILE
C          = 1 FOR STATIC SOIL PROFILE
C  3  N3   = ID NUMBER OF WEATHER VARIABLES INPUT.  RAIN=1,  TEMP=2,
C            RAD=3,  WIND SPEED=4,  REL HUM=5.  IF ANY VARIABLES ARE INP
C            RAIN MUST BE INCLUDED.  THUS, IT IS NOT NECESSARY TO SPECIF
C            ID=1 UNLESS RAIN IS THE ONLY INPUT VARIABLE.
C            LEAVE BLANK IF ALL VARIABLES ARE GENERATED.  EXAMPLES
C            NGN=1 INPUTS RAIN.
C            NGN=23 INPUTS RAIN, TEMP, AND RAD.
C            NGN=2345 INPUTS ALL 5 VARIABLES.
C  4  IWTH = DAILY WEATHER STA # FROM KR(27) WTHCOM.DAT
      READ(KR(6),300)N1,N2,N3,IWTH
C   UNC
      N1VWB=N1
C   UNC
      IF(N1.EQ.0)GO TO 507
	NBYR=N1
      ISTA=N2
      NGN=N3
      IPY=1
      IF(ICOR.EQ.0)GO TO 203
      DO 217 K=1,12
	IF(TR(K).GT.0.)RNCF(K)=RMO(1,K)/TR(K)
	TMNF(K)=(OBMX(1,K)-OBMN(1,K))/(TXMX(K)-TXMN(K))
      TMXF(K)=OBMX(1,K)-TXMX(K)
      IF(NGN.GT.0)GO TO 217
      IF(ICOR.LE.NC(K+1)-NYD)GO TO 218
  217 CONTINUE
  218 ICOR=0
  203 CALL ARESET
      IF(NGN.GT.0)GO TO 222
	WRITE(KW(1),308)
      GO TO 533
  222	IF(IRW.GT.0)GO TO 356
      REWIND KR(7)
      CALL WDOP(WEATDIR)
C     IYR=IYR0
  356 WRITE(KW(1),293)
      CALL WIGV
      GO TO 533
  507 IGN=IGN+100
      REWIND KR(6)
      IF(IGN.LT.IGMX*100)GO TO 538
      IRO0=IRO0+1
      IGN=0
      IF(IRO0.GT.NRO.OR.IGMX.EQ.0)GO TO 532
  538 REWIND KR(1)
      IF(NGN0.GT.0)REWIND KR(7)
      GO TO 531
  532 CLOSE(KR(1))
      IF(IRW.EQ.0)CLOSE(KR(7))
      IF( USEDEP )CLOSE(KR(31))
      CLOSE(KW(2))
      CLOSE(KW(4))
      CLOSE(KW(5))
      CLOSE(KW(6))
      CLOSE(KW(7))
      CLOSE(KW(8))
      CLOSE(KW(9))
      CLOSE(KW(10))
      CLOSE(KW(11))
      CLOSE(KW(12))
      CLOSE(KW(13))
      CLOSE(KW(14))
      CLOSE(KW(15))
      CLOSE(KW(16))
      CLOSE(KW(17))
      CLOSE(KW(19))
      CLOSE(KW(20))
      CLOSE(KW(21))
	CLOSE(KW(22))
	CLOSE(KW(23))
	CLOSE(KW(24))
	CLOSE(KW(25))
	CLOSE(KW(26))
	CLOSE(KW(27))
	CLOSE(KW(28))
      CLOSE(KW(31))
      CLOSE(KW(32))
C   UNC
	CLOSE(KWTNA)
	CLOSE(KWNCM)
	CLOSE(KWTNS)
      CLOSE(KWNCF)
      CLOSE(KWNCS)

      CALL ATIMER(1)
      CLOSE(KW(1))
      GO TO 519
  219 DO I=1,30
      CLOSE(KR(I))
	END DO
	CLOSE(KWTNA)
	CLOSE(KWNCM)
	CLOSE(KWTNS)
      CLOSE(KWNCF)
      CLOSE(KWNCS)
C     CLOSE(KWDNC)
      CLOSE(KWDNCL)
	DO I=1,200
      CLOSE(KW(I))
	END DO
      STOP
   35 FORMAT(T7,A4,11F10.0)
   49 FORMAT(T7,A4,11F10.1)
   53 FORMAT(T7,A4,11F10.2)
   63 FORMAT(T7,A4,11F10.3)
   78 FORMAT(T7,A4,11F10.4)
  221 FORMAT (T10,'VERNALIZATION TIME = ',F5.0,' D'/T10,'ANNUAL HEAT UNI
     1TS = ',F8.0,' C')
  223 FORMAT(1X,A4,12F9.1,11X,A4)
  224 FORMAT(1X,A4,12F9.2,11X,A4)
  225 FORMAT(1X,A4,12F9.3,11X,A4)
  229 FORMAT(3X,'1',4X,'2',4X,'3',4X,'4',4X,'5',4X,'6',4X,'7',4X,'8',
     14X,'9',3X,'10',3X,'11',3X,'12',3X,'13',3X,'14',3X,'15',3X,'16',3X,
     2'17',3X,'18',3X,'19',3X,'20')
  230 FORMAT(5X,3I2,F6.0,2F6.2)
  231 FORMAT(T15,'DAILY CN--STOCHASTIC')
  232 FORMAT(T15,'DAILY CN--DETERMINISTIC')
  233 FORMAT(T10,'PEAK RATE-EI ADJ FACTOR = ',F7.3/T10,'INITIAL WATER CO
     1NTENT OF SNOW = ',F5.1,' MM'/T10,'AVE N CONC IN RAINFALL = ',F6.2,
     2' PPM'/T10,'CONC OF NO3 IN IRRIGATION WATER = ',F6.0,' PPM'/T10,
     3'CONC OF SALT IN IRRIGATION WATER = ',F8.0,' PPM')
  234 FORMAT(/1X,'-----CURVE NUMBER DISTRIBUTION'/T10,'>95=',F6.2,3X,'>
     190=',F6.2,3X,'>85=',F6.2,3X,'>80=',F6.2,3X,'>75=',F6.2,3X,'>70=',
     2F6.2,3X,'>65=',F6.2,3X,'>60=',F6.2,3X,'>55=',F6.2,3X,'<55=',F6.2)
C 235 FORMAT(3I2,3I3,I4,1X,8F8.0)
  235 FORMAT(3I3,4I5,9F8.0)
  236 FORMAT('+',T50,F7.2,T118,A4)
  237 FORMAT(/T10,'WET-DRY PROB COEF = ',F7.3)
  238 FORMAT(/T10,'RAINFALL DIST IS EXPONENTIAL--PARM = ',F5.2)
  239 FORMAT(2F8.3)
  240 FORMAT(T10,'PERIOD OF RECORD FOR P5MX =',F4.0,' Y')
  242 FORMAT(I5,E13.5,2F10.3,2E13.5)
  243 FORMAT(1X,A4,13F9.1,2X,A4)
  244 FORMAT(T10,'FURROW DIKE SYSTEM SAFETY FACTOR = ',F5.2)
 2455 FORMAT(I10,A14,105X,A5)
  245 FORMAT(////1X,'-----MISCELLANEOUS PARAMETERS'//T10,'PARM',9X,'SCRP
     11I',4X,'SCRP2I',4X,'SCRP1C',7X,'SCRP2C')
  247 FORMAT(/T10,'IRRIGATION WATER APPLIED'/T7,'DATE',T14,'VOL',3X,'COS
     1T',3X,'HU'/T7,'Y M D   MM   $/HA   SCD')
  248 FORMAT(10X,11(6X,A4))
  281 FORMAT(T7,'IDC ',11I10,'  IDC')
  284 FORMAT(//1X,'-----WIND EROSION DATA')
  285 FORMAT(T10,'FIELD LENGTH = ',F6.2,' KM'/T10,'FIELD WIDTH = ',
     1F6.2,' KM'/T10,'FIELD ANGLE = ',F4.0,' DEG'/T10,'WIND SPEED MOD EX
     2P POWER PARM = ',F6.2/T10,'SOIL PARTICLE DIAM = ',F5.0,' UM'/T10,
     3'ACCELERATE WIND EROS FACTOR = ',F7.3)
  286 FORMAT(5X,3I4)
  287 FORMAT(20(1X,A4))
  288 FORMAT(T10,'SPRINKLER IRRIGATION')
  289 FORMAT(T10,'FURROW IRRIGATION')
  290 FORMAT(T10,'SOIL ALBEDO = ',F6.2/T10,'MAX NUMBER SOIL LAYERS = ',
     1F3.0/T10,'MIN THICKNESS FOR LAYER SPLITTING = ',F6.2,' M'/T10,'MIN
     2 PROFILE THICKNESS--STOPS SIMULATION = ',F6.2,' M'/T10,'SPLITTING'
     3,' PRIORITY THICKNESS = ',F6.2,' M'/T10,'BIOMASS/ORG C = ',F7.3/
     4T10,'PASSIVE HUMUS/TOTAL HUMUS = ',F7.3/T10,'CULTIVATION HISTORY =
     5 ',F5.0,' Y'/T10,'WEATHERING CODE = ',F3.0/T10,'SOIL GROUP CODE ='
     6,1X,F3.0/T10,'ORG C IN TOP ',F6.2,' M = ',F7.1,' T/HA')
  292 FORMAT(/T10,'RAINFALL DIST IS SKEWED NORMAL')
  293 FORMAT(//I5,9(2X,A4,F8.2)/(5X,9(2X,A4,F8.2)))
  294 FORMAT(/T10,'ERODED SOIL THICKNESS = ',F7.1,' MM')
  295 FORMAT(/1X,'-----AVE MO VALUES')
  297 FORMAT(///1X,'-----GENERATOR SEEDS AFTER',I9,' CYCLES'/(5X,10I12))
  299 FORMAT(20A4)
  300 FORMAT(20I4)
C     EPA - LRAN
 3001 FORMAT(1X,I3)
C     EPA
  301 FORMAT(T10,'SIMULATION DURATION = ',I4,' Y'/T10,'BEGINNING DATE =
     1',3I4)
  303 FORMAT(10F8.2)
  304 FORMAT(T10,'WATER EROSION FACTORS--DRIVING EQ = ',A4)
  305 FORMAT(T15,'RUNOFF RATIO = ',F6.3)
  306 FORMAT(T10,'DRYLAND AGRICULTURE')
  307 FORMAT(//1X,'____________________WEATHER DATA_____________________
     1___'/)
  308 FORMAT(/T10,'**********RAIN, TEMP, RAD, WIND SPEED, & REL HUM ARE 
     1GENERATED**********')
  309 FORMAT(/T10,'**********PENMAN-MONTEITH  EQ USED TO EST POT ET*****
     1*****')
  310 FORMAT(12F6.2,8X)
  311 FORMAT(1X,A4,13F9.0,2X,A4)
  312 FORMAT(/T10,'**********PENMAN EQ USED TO EST POT ET**********')
  313 FORMAT(/T10,'**********PRIESTLEY-TAYLOR EQ USED TO EST POT ET*****
     1*****')
  314 FORMAT(/1X,'-----OPERATION SCHEDULE')
  315 FORMAT(/T10,'YR',I2)
  316 FORMAT(/T10,'TILLAGE OPERATIONS'/6X,'DATE',T21,'OP',4X,'EQ',4X,
     1'TR',3X,'OCST',3X,'TCST',2X,'SCST',5X,'MX',4X,'RR',4X,'DP',4X,'FR'
     2,3X,'RHT',3X,'RIN',3X,'DKH',3X,'DKI',4X,'HV',4X,'HV',8X,'NRCS'3X,
     3'IRR',4X,'Q/'/6X,'Y M D',3X,'NAME',2X,'CD',4X,'NO',4X,'NO',1X,'___
     4_____$/HA________',4X,'EF',4X,'MM',4X,'MM',2X,'COMP',4X,'MM',5X,
     5'M',4X,'MM',5X,'M',4X,'EF',3X,'IDX',2X,'CROP',4X,'CN',2X,'TRGR',2X
     6,'VIRR',2X,'HUSC')
  317 FORMAT(5X,3I2,1X,A8,I2,2I6,2F7.2,7X,F6.2,2F6.0,F6.3,F6.0,F6.2,F6.0
     1,2F6.2,F6.3,5X,F7.1,2F6.2,2F6.3)
  318 FORMAT(/T10,'**********HARGREAVES EQ USED TO EST POT ET**********'
     1)
  319 FORMAT(45X,'YR=',1X,I4,1X,I4/T11,'JAN',6X,'FEB',6X,'MAR',6X,'APR',
     16X,'MAY',6X,'JUN',6X,'JUL',6X,'AUG',6X,'SEP',6X,'OCT',6X,'NOV',6X,
     2'DEC',6X,' YR')
  321 FORMAT(1X,A4,13F9.2,2X,A4)
  322 FORMAT(/T10,'FINAL WATER CONTENT OF SNOW = ',F7.2,' MM'/)
  323 FORMAT(/1X,'-----PEAK FLOW RATE STATS(MM/H)',T70,'UNIT PEAKS(1/H)
     1'/T10,'MAX = ',F7.2,5X,'MEAN = ',F6.2,5X,'ST DV = ',F6.2,5X,
     2'MAX = ',F7.4,5X,'MEAN = ',F8.4,5X,'NO PKS = ',I6)
  324 FORMAT(/1X,'-----AVE ANNUAL VALUES')
  325 FORMAT(1X,A4,13F9.4,2X,A4)
  326 FORMAT(/2X,A4,1X,'YLD=',F5.1,'/',F5.1,2X,'BIOM=',F5.1,'T/HA',2X,
     1'YLN=',F5.0,2X,'YLP=',F5.0,2X,'YLK=',F5.0,2X,'FN=',F5.0,2X,'FP=',
     2F5.0,2X,'FK=',F5.0,'KG/HA'/T7,'IRGA=',F5.0,2X,'IRDL=',F5.0,2X,
     3'CAW=',F6.0,'MM',2X,'RAD=',F7.0,'MJ/M2',2X,'WUEF=',F5.2,'KG/MM',2X
     4,'HU=',F7.0,2X,'PSTF=',F6.2/T7,'COST=',F7.2,2X,'COOP=',F7.2,2X,
     5'RTRN=',F7.0,2X,'NTRN=',F7.0,2X,'NTRO=',F7.0,'$/HA')
  327 FORMAT(T10,'TILE DRAIN IN SOIL LAYER',I3/T15,'DRAIN TIME = ',F5.
     12,' D'/T15,'FLOW RATE = ',F5.1,' MM/H')
  328 FORMAT(/T10,'FERTILIZER APPLIED'/T7,'DATE',T25,'FT',4X,'EQ',4X,
     1'TR',3X,'COST',4X,'WT',2X,'DPTH',1X,'-------------FRACTION OF WT--
     2------------'/T7,'Y M D',3X,'NAME',6X,'NO',4X,'NO',4X,'NO',3X,
     3'$/HA',1X,'KG/HA',5X,'M'4X,'MN',3X,'NH3',4X,'ON',4X,'MP',4X,'OP',
     44X,'MK',2X,'HUSC')
  329 FORMAT(5X,3I2,1X,A8,3I6,F7.2,F6.0,8F6.3)
  330 FORMAT(T10,'COSTS'/T15,'LIME = ',F5.2,' $/T'/T15,'IRR WATER = ',
     1F6.2,' $/MM'/T15,'FUEL PRICE = ',F5.2,' $/L'/T15,'WAGE PRICE =',
     2F5.2,' $/H'/T15,'MISCEL COST 1 = ',F7.2,' $/HA'/T15,'MISCEL COST 2
     3 = ',F7.2,' $/HA')
  331 FORMAT(T10,'AUTOMATIC IRRIGATION')
  332 FORMAT(T10,'USER SPECIFIED IRRIGATION')
  340 FORMAT(T10,'USER SCHEDULED FERT')
  341 FORMAT(T10,'AUTO SCHEDULED FERT'/T15,'MIN APPL INTERVAL = ',I3,
     1' D')
  344 FORMAT(//1X,'____________________MANAGEMENT DATA__________________
     1___'/)
  345 FORMAT(//1X,'____________________GENERAL INFORMATION______________
     1________'/)
  346 FORMAT(/1X,'-----VARIABLE NAMES')
  347 FORMAT(//1X,'____________________SOIL DATA____________________'/)
  348 FORMAT(//1X,'____________________CROP PARAMETERS__________________
     1___'/)
  349 FORMAT(//1X,'____________________FINAL SOIL DATA__________________
     1___'/)
  350 FORMAT(/1X,'____________________SUMMARY TABLE____________________'
     1)
  351 FORMAT(T10,'WATER TABLE DEPTH'/T15,'MIN = ',F6.2,' M'/T15,'MAX = '
     1,F6.2,' M'/T15,'INITIAL = ',F6.2,' M'/T10,'GROUNDWATER STORAGE = '
     2,F5.0,' MM'/T10,'MAX GROUNDWATER STORE = ',F5.0,' MM'/T10,'RETURN'
     3,' FLOW TT = ',F7.2,' D')
  352 FORMAT(T10,'NO LIME APPLICATIONS')
  353 FORMAT(T10,'LIME APPLIED AS NEEDED')
  354 FORMAT(T15,'MAX ANNUAL VOL APPL TO A CROP = ',F5.0,' MM'/T15,'MIN
     1 SINGLE APPL VOL = ',F5.0,' MM'/T15,'MAX SINGLE APPL VOL = ',F5.0,
     2' MM')
  355 FORMAT(T15,'SOIL-WATER TENSION TRIGGER = ',F5.0,' KPA'/T15,'MIN A
     1PPL INTERVAL = ',I3,' D')
  360 FORMAT(T15,'PLANT WATER STRESS TRIGGER = ',F6.2/T15,'MIN APPL INTE
     1RVAL = ',I3,' D')
  361 FORMAT(T15,'FIXED APPL VOLUMES')
  362 FORMAT(T15,'VARIABLE APPL VOLUMES')
  363 FORMAT(T10,'LEAP YEAR CONSIDERED')
  364 FORMAT(T10,'LEAP YEAR IGNORED')
  365 FORMAT(T10,'DRAINAGE AREA = ',F9.2,' HA'/T10,'LATITUDE = ',F7.2,'
     1 DEG'/T10,'LONGITUDE = ',F7.2,' DEG'/T10,'ELEVATION = ',F7.1,' M'/
     2T10,'CHANNEL'/T15,'LENGTH = ',F6.2,' KM',5X,'GRAD = ',F8.4,' M/M',
     35X,'MANNINGS N = ',F7.3,5X,'DEPTH = ',F6.3,' M'/T10,'LAND SLOPE'/
     4T15,'LENGTH = ',F6.1,' M',5X,'GRAD = ',F8.4,' M/M',5X,
     5'MANNINGS N = ',F7.3)
  367 FORMAT(T10,'CO2 CONC IN ATMOSPHERE = ',F6.0,' PPM')
  369 FORMAT(6X,9(1X,A4,F9.4))
C 373 FORMAT(10E13.5)
  377 FORMAT(/T10,'PESTICIDES APPLIED'/T7,'DATE',T33,'PS',4X,'EQ',4X,
     1'TR',3X,'COST'2X,'RATE',2X,'KILL'/T7,'Y M D   NAME',14X,'NO',4X,
     2'NO',4X,'NO',3X'$/HA',1X,'KG/HA',4X,'EF',2X,'HUSC')
  378 FORMAT(5X,3I2,1X,A16,3I6,F7.2,3F6.2)
  380 FORMAT(10X,A16,3F10.0,F10.2,F10.0,F10.2)
  381 FORMAT(//1X,'____________________PESTICIDE DATA__________________
     1__'/)
  382 FORMAT(T43,'HALF LIFE(DAYS)  WASH OFF',T83,'COST'/T13,'NAME',11X,
     1'SOLUBILITY',5X,'SOIL',4X,'FOLIAGE',3X,'FRACTION',3X,'KOC',7X,'($/
     2KG)')
  383 FORMAT(/13X,10(A8,4X))
  384 FORMAT(5X,A4,10F10.0)
  385 FORMAT(//1X,'______________PESTICIDE SUMMARY TABLE_______________
     1_'/)
  386 FORMAT(/1X,'-----AVE ANNUAL VALUES (G/HA)')
  387 FORMAT(5X,A4,10F10.4)
  390 FORMAT(T10,'HYDROLOGIC SOIL GROUP = ',A1/T10,'RUNOFF CN2 = ',F4.1/
     1T10,'SLP ADJ CN2 = ',F4.1/T10,'CN SCRV SCRP(30)= ',2F6.0/T10,'CN S
     2CRP(4)= ',2E13.5)
  396 FORMAT(8F10.6)
  399 FORMAT(T10,'PEAK RATE EST WITH MOD RATIONAL EQ')
  401 FORMAT(T10,'PEAK RATE EST WITH TR55--RF TYPE =',A2)
  404 FORMAT(T15,'MUSI COEFS = ',4E13.5)
  405 FORMAT(T15,'LS= ',F6.3/T10,'RUSLE XM = ',F7.3/T10,'RUSLE SLP LG FA
     1C = ',F7.3/T10,'RUSLE SLP FAC = ',F7.3/T10,'TIME OF FLOW CONC = ',
     2F5.2,' H')
  409 FORMAT(T10,'EPIC DNIT')
  412 FORMAT(T15,'PAW DEFICIT TRIGGER = ',F5.0,' MM'/T15,'MIN APPL INTE
     1RVAL = ',I3,' D')
  414 FORMAT(T10,'KEMANIAN DNIT')
  416 FORMAT(T10,'STATIC SOIL PROFILE')
  417 FORMAT(/1X,'-----TIME OF CONCENTRATION STATS(H)'/T10,'MEAN = ',
     1F6.2,5X,'MIN = ',F6.2,5X,'MAX = ',F6.2)
  434 FORMAT(T15,'MAX N FERT/CROP = ',F7.0,' KG/HA')
  436 FORMAT(T10,'NUMBER OF COWS = ',I8,' au'/T10,'STOCKING RATE = ',
     &F6.2,' ha/au'/T10,'GRAZING LIMIT = ',F6.3,' T/HA'/T10,
     &'FRACTION TIME COWS IN FEED AREA = ',F7.3)
  440 FORMAT(T10,'IRRIGATION WITH FERT ADDED')
  445 FORMAT(T15,'BIG GUN IRRIGATION FROM LAGOON'/T15,'CONFINEMENT AREA
     1= ',F7.2,' HA'/T15,'NORMAL LAGOON VOL = ',F5.0,' MM'/T15,'MAX LAGO
     2ON VOL = ',F5.0,' MM'/T15,'DRAW DOWN TIME = ',F5.0,' D'/T15,'WASH 
     3WATER = ',F6.3,' M**3/COW/D')     
  448 FORMAT(/1X,'-----SEDIMENT OF CONCENTRATION STATS(G/M3)'/T10,'MEAN
     1= ',F10.0,5X,'MAX = ',F10.0,5X,'STDV = ',F10.0)
  452 FORMAT(T15,'VARIABLE CN WITH DEPTH/SOIL-WATER WEIGHTING')
  454 FORMAT(T15,'CONSTANT CN')
  456 FORMAT(T15,'GREEN & AMPT EQ'/T15,'RF EXP DST--PEAK RF RATE SIM')
  457 FORMAT(T10,'DAILY RUNOFF ESTIMATION')
  458 FORMAT(T15,'NRCS CURVE NUMBER EQ')
  460 FORMAT(/1X,'-----FREQUENCY & DURATION OF PESTICIDE LOSS(G/HA)'/T35
     1,'DURATION(D)'/20X,'1',12X,'4',11X,'21',11X,'60',11X,'90')
  462 FORMAT(5X,A16,T35,'MAXIMUM')
  463 FORMAT(8X,'SOL  ',5E13.5)
  464 FORMAT(8X,'Q+SSF',5E13.5)
  465 FORMAT(8X,'ADSRB',5E13.5)
  466 FORMAT(8X,'SED Y',5E13.5)
  470 FORMAT(5X,A4,10E12.4)
  473 FORMAT(T35,'50 % EXCEED')
  474 FORMAT(T35,'10 % EXCEED')
  480 FORMAT(T15,'PLANT STRESS TRIGGER = ',F6.2)
  481 FORMAT(T15,'SOIL NO3 CONC TRIGGER = ',F4.0,' G/T')
  485 FORMAT(T15,'GREEN & AMPT EQ'/T15,'RF EXP DST--PEAK RF RATE INPUT')
  486 FORMAT(T15,'GREEN & AMPT EQ'/T15,'RF UNIF DST--PEAK RF RATE INP')
  488 FORMAT(T15,'VARIABLE RATE')
  490 FORMAT(T15,'FIXED RATE = ',F8.1,' KG/HA')
  494 FORMAT(/T10,'********** BAIER-ROBERTSON EQ USED TO EST POT ET ****
     1******')
  497 FORMAT(T10,'GLEAMS PESTICIDE EQ SOL P RUNOFF')
  498 FORMAT(3F8.0,3F8.1,F8.3,18F8.2,10(1X,A16,F8.0),10(4X,A4,19F8.2,
     110F8.1))
  499 FORMAT(T10,'MODIFIED NONLINEAR EQ SOL P RUNOFF')
  501 FORMAT(1X,3I2,2X,A16,I6,2X,4I4,F7.2,7X,F7.2,F7.2)
  502 FORMAT(T10,'NUTRIENT & PESTICIDE OUTPUT (MASS & CONC)')
  503 FORMAT(1X,3I2,2X,'IRGA',12X,I6,6X,I4,8X,F7.2,7X,F7.2,F7.0)
  504 FORMAT(T10,'NUTRIENT & PESTICIDE OUTPUT (MASS)')
  505 FORMAT(A12)
  508 FORMAT(1X,A5,4X,A12)
  509 FORMAT(10X,A20)
  510 FORMAT(1X,3I2,2X,A8,8X,I6,2X,4I4,F7.2,7X,F7.2,F7.0)
  512 FORMAT(1X,4F10.2,5F10.1,2F10.3,F10.0,50F10.2)
  522 FORMAT(T10,A12,3I4)
  523 FORMAT(T10,A12,2X,3I4)
  530 FORMAT(T10,'USLE P FACTOR = ',F7.3)
C 537 FORMAT(1X,15A4,1X,3I4)
  545 FORMAT(T10,'REAL TIME SIMULATION MODE')
  546 FORMAT(T10,'NORMAL SIMULATION MODE')
  548 FORMAT(T15,'VARIABLE CN NONLINEAR NO DEPTH/SW WEIGHTING')
  551 FORMAT(1X,' YR  RT#',1X,'CPNM',3X,'YLDG',4X,'YLDF',4X,'  HI',4X,
     1'BIOM',4X,' YLN',4X,' YLP',4X,' FTN',4X,' FTP',4X,'IRGA',4X,'IRDL'
     2,4X,'WUEF',4X,'GSET',4X,' CAW',4X,' CRF',4X,' CQV',4X,'COST',4X,
     3'COOP',4X,'RYLG',4X,'RYLF',4X,'PSTF',4X,'  WS',4X,'  NS',4X,'  PS'
     4,4X,'  KS',4X,'  TS',4X,'  AS',4X,'  SS',4X,'PPOP',5X,'IPLD',5X,
     5'IGMD',5X,'IHVD ',10(9X,'PSTN',8X,'APRT'))
  557 FORMAT(1X,' YR  RT#',24(4X,A4),4X,'OCPD',4X,' TOC',4X,'APBC',4X,
     1' TAP',4X,'TNO3')
  558 FORMAT(1X,'RUN   YR',4X,'AP15',40(3X,A4,1X))
  560 FORMAT(25(4X,A4),10(9X,'PSTN',8X,'APRT'),10(4X,'CPNM',4X,'YLDG',4X
     1,'YLDF',4X,'BIOM',4X,' YLN',4X,' YLP',4X,' FTN',4X,' FTP',4X,
     2'IRGA',4X,'IRDL',4X,'WUEF',4X,' CAW',4X,' CRF',4X,' CQV',4X,' THU'
     3,4X,' PHU',4X,'COST',4X,'COOP',4X,'RETN',4X,'PSTF',4X,'  WS',4X,
     4'  NS',4X,'  PS',4X,'  KS',4X,'  TS',4X,'  AS',4X,'  SS',4X,'  BD'
     5,4X,'ALSA',4X,' SRT'))
  562 FORMAT(T15,'VARIABLE CN SOIL MOIST INDEX NO DEPTH/SW WEIGHTING')
  564 FORMAT(T15,'VARIABLE CN LINEAR NO DEPTH/SW WEIGHTING')
  570 FORMAT(T10,'GLEAMS ENRICHMENT RATIO')
  571 FORMAT(/5X,'STAGE =',I2,5X,'WPM5 = ',A80/T11,'JAN',6X,'FEB',6X,
     1'MAR',6X,'APR',6X,'MAY',6X,'JUN',6X,'JUL',6X,'AUG',6X,'SEP',6X,
     2'OCT',6X,'NOV',6X,'DEC',6X,' YR')
  576 FORMAT(1X,A4,16F10.0,A5)
  577 FORMAT(T7,'STRESS (BIOM) WATER=',F5.1,2X,'N=',F5.1,2X,'P=',F5.1,2X
     1,'K=',F5.1,2X,'TEMP=',F5.1,2X,'AIR=',F5.1,2X,'SALT=',F5.1,5X,
     2'(ROOT) BD=',F5.1,2X,'ALSAT=',F5.1,2X,'TEMP=',F5.1,'D')
  578 FORMAT(1X,15A4,1X,I4,2I2,1X,I3)
  581 FORMAT(1X,A4,16F10.3,A5)
  582 FORMAT(1X,3I2,2X,A8,8X,I6,6X,3I4,3F7.2)
  583 FORMAT(T61,'COTL',6X,'COOP',6X,'MTCO',6X,'MASS',6X,'FUEL'/4X,'Y',
     &3X,'M',3X,'D',5X,'OP',14X,'CROP',2X,'MT#  HC',2X,'EQ  TR',2X,
     &'|----------($/HA)-----------|',2X,'(KG/HA)',4X,'(L/HA)')
  587 FORMAT(T10,'RADIATION-BIOMASS CONVERSION')
  588 FORMAT(T10,'EPIC ENRICHMENT RATIO')
  589 FORMAT(T10,'WATER USE-BIOMASS CONVERSION')
  592 FORMAT(T10,A20)
  593 FORMAT(T10,'CLIMATIC FACTOR = ',F7.3)
  594 FORMAT(T10,'SOIL = ',A12)
  595 FORMAT(T10,'OPSC = ',A12)
  597 FORMAT(/19X,'WIND = ',A12)
  600 FORMAT(T10,'INPUT ATMOSPHERIC CO2')
  602 FORMAT(19X,'WPM1 = ',A12/T11,'JAN',6X,'FEB',6X,'MAR',6X,'APR',6X,
     1'MAY',6X,'JUN',6X,'JUL',6X,'AUG',6X,'SEP',6X,'OCT',6X,'NOV',6X,
     2'DEC',6X,' YR')
  607 FORMAT(2X,I4)
  616 FORMAT(T10,'EPIC C FACTOR USED FOR EROS EQS EXCEPT RUSLE')
  618 FORMAT(T10,'RUSLE C FACTOR USED FOR ALL EROS EQS')
  625 FORMAT(15F8.2)
  630 FORMAT(4X,A4,2F8.0)
  635 FORMAT(///T52,'SOIL LAYER NO'/T5,16(6X,A4))
  636 FORMAT(5X,'FINAL CONTENTS:'/5X,'TNO3=',E13.6,2X,'TNH3=',E13.6,2X,
     1'TWN =',E13.6,2X,'STDN=',E13.6,2X,'STON=',E13.6,2X,'UN1 =',E13.6)
  637 FORMAT(5X,'FINAL CONTENTS:'/5X,'LSC =',E13.6,2X,'LMC =',E13.6,2X,
     1'BMC =',E13.6,2X,'HSC =',E13.6,2X,'HPC =',E13.6)
  638 FORMAT(5X,'FINAL CONTENTS:'/5X,'PLAB=',E13.6,2X,'PMS =',E13.6,2X,
     1'PMA =',E13.6,2X,'PHUM=',E13.6,2X,'FOP =',E13.6,2X,'STDP=',E13.6/
     25X,'STOP=',E13.6,2X,'UP1 =',E13.6)
  639 FORMAT(5X,'FINAL CONTENTS:'/5X,'TSK =',E13.6,2X,'TEK =',E13.6,2X,
     1'TFK =',E13.6,2X,'STDK=',E13.6,2X,'STOK=',E13.6,2X,'UK1 =',E13.6)
  643 FORMAT(T10,'FIELD CAP/WILTING PT EST RAWLS METHOD DYNAMIC')
  645 FORMAT(T10,'FIELD CAP/WILTING PT INP RAWLS METHOD DYNAMIC')
  650 FORMAT(T10,'FIELD CAP/WILTING PT EST BAUMER METHOD DYNAMIC')
  661 FORMAT(/1X,'-----SOI STAGE DISTRIBUTION'/T10,'1 = ',F7.3,2X,'2 = '
     1,F7.3,2X,'3 = ',F7.3,2X,'4 = ',F7.3,2X,'5 = ',F7.3,2X,'6 = ',F7.3)
  662 FORMAT(/1X,'-----ANNUAL RAINFALL DISTRIBUTION'/T10,'MAX = ',F6.0,
     1' MM',2X,'MIN = ',F6.0,' MM',2X,'STDV = ',F6.0,'MM')
  668 FORMAT(3X,I4,2I2)
  669 FORMAT(/3X,'Y   M   D',6X,'RFmm',8X,'CN',7X,'SCI',7X,'Qmm',7X,
     &'TCh',4X,'QPmm/h',6X,'DURh',6X,'ALTC',7X,'AL5')
  671 FORMAT(4X,'RUN #=',A16,2X,'NBYR=',I4,2X,'IYRB=',I4,2X,'LAT=',F7.2,
     1' DEG'/5X,'DATE',T17,'CONTROL SECTION',4X,'0.5M SOIL'/2X,'Y#',3X,
     2'Y M D',3X,'SW1(MM)',3X,'SW2(MM)',4X,'TMP(C)')
  679 FORMAT(/5X,'RUN#= ',A16,2X,'SIT#= ',I9,2X,'WP1#= ',I9,2X,'SOL#= ',
     1I9,2X,'OPS#= ',I9)
  693 FORMAT(13X,'CPNM',3X,'YLDG',26(4X,A4),5(4X,'CPNM',4X,'YLDG',4X,
     1'YLDF',4X,'BIOM',4X,' YLN',4X,' YLP',4X,' FTN',4X,' FTP',4X,'IRGA'
     2,4X,'IRDL',4X,'WUEF',4X,' CAW',4X,' CRF',4X,' CQV',4X,' THU',4X,
     3' PHU',4X,'COST',4X,'COOP',4X,'RETN',4X,'PSTF',4X,'  WS',4X,'  NS'
     4,4X,'  PS',4X,'  KS',4X,'  TS',4X,'  AS',4X,'  SS',4X,'  BD',4X,
     5'ALSA',4X,' SRT'))
  694 FORMAT(1X,A16,4X,A4,F8.2,F8.0,F8.1,6F8.2,F8.0,F8.4,2F8.3,10(4X,A4,
     110F8.2,5F8.0,4F8.2,10F8.1))
  695 FORMAT(15F8.0)
  697 FORMAT(T10,'DYNAMIC ATMOSPHERIC CO2')
  699 FORMAT(T10,'STATIC ATMOSPHERIC CO2')
  701 FORMAT(T10,'FIELD CAP/WILTING PT INP NEAREST NEIGHBOR METHOD DYNAM
     &IC')
  702 FORMAT(T10,'FIELD CAP/WILTING PT INP NEAREST NEIGHBOR METHOD STATI
     &C')
  706 FORMAT(T10,'FIELD CAP/WILTING PT INP BAUMER METHOD DYNAMIC')
  707 FORMAT(T10,'FIELD CAP/WILTING PT EST RAWLS METHOD STATIC')
  708 FORMAT(T10,'FIELD CAP/WILTING PT EST BAUMER METHOD STATIC')
  709 FORMAT(T10,'FIELD CAP/WILTING PT INP STATIC')
  714 FORMAT(T10,'AUTO LIME EQUIP = ',A8,2X,'DEPTH = ',F6.3,' M')
  715 FORMAT(/T10,'AUTO IRR EQUIP  = ',A8,2X,'DEPTH = ',F6.3,' M')
  716 FORMAT(T10,'AUTO FERT EQUIP = ',A8,2X,'DEPTH = ',F6.3,' M',2X,
     1'FERT = ',A8/)
  719 FORMAT(T10,'DRIP IRRIGATION')
  722 FORMAT(T55,'RWT SOIL LAYER #'/3X,'Y',3X,'Y#',' M D',1X,'CROP',4X,
     1'BIOM',16(4X,A4))
  723 FORMAT(10X,A15,1X,16F8.2)
  726 FORMAT(3X,'Y',3X,'Y#',1X,'CROP',4X,' YLD',4X,'BIOM',4X,' RWT',4X,
     1' LAI',4X,' STD')
  729 FORMAT(2X,'YR   YR#',5X,'Q',5X,'SSF',5X,'PRK',4X,'QDRN',7X,'Y',5X,
     1'YOC',10(5X,'PSTN',12X,'PAPL',4X,'PSRO',4X,'PLCH',4X,'PSSF',4X,
     2'PSED',4X,'PDGF',4X,'PDGS',4X,'PDRN',5X,'CMX4D',2X)/12X,
     3'|------------(MM)------------|  (T/HA)',1X,'(KG/HA)',10(17X,
     4'|-----------------------------(G/HA)----------------------------|
     5',3X,'(PPB)',3X))
  730 FORMAT(A80)
  732 FORMAT(T10,'STATIC TECHNOLOGY')
  734 FORMAT(T10,'DYNAMIC TECHNOLOGY')
  826 FORMAT(4X,'Y   M   D',6X,'PDSW',50(6X,A4))
  829 FORMAT(T10,'N & P UPTAKE CONC SMITH CURVE')
  831 FORMAT(T10,'N & P UPTAKE CONC S CURVE')
  410 FORMAT(T10,'RICEU REVISED KEMANIAN DNIT')

      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      BLOCK DATA
C     THIS SUBPROGRAM INITIALIZES VARIABLES THAT ARE IN COMMON.
      INCLUDE 'EPCM0509_su.for'
C Modified by RICEU for adding HED VARS for new N VARS
C N VARS unit: kgN/ha
C NINX: nitrification nitric oxides (NOX = nitric oxide (NO) +
C nitrous acid (HONO))
C NINO: nitrification nitric oxide (NO)	
C NIN2: nitrification nitrous oxide (N2O)   
C HONO: nitrous acid (only accounts for HONO from nitrification)
C DENO: denitrification NO
C DEN2: denitrification N2O
C TONO: total NO
C TON2: total N2O
C TONX: total nitric oxides(NOX=NO+HONO)
      DATA HED/' TMX',' TMN',' RAD','PRCP','SNOF','SNOM','WSPD','RHUM',
     1' VPD',' PET','  ET',' PEP','  EP','   Q','  CN',' SSF',' PRK',
     2'QDRN','IRGA',' QIN','TLGE','TLGW','TLGQ','TLGF','LGIR','LGMI',
     3'LGMO','  EI',' CVF','USLE','MUSL',' AOF','MUSS','MUST','RUS2',
     4'RUSL','RUSC',' WK1','RHTT','RRUF','RGRF','  YW',' YON','QNO3',
     5'SSFN','PRKN',' NMN',' GMN','  DN','NFIX','NITR','AVOL','DRNN',
     6'  YP',' QAP',' MNP','PRKP','  ER',' FNO','FNO3','FNH3',' FPO',
     7' FPL',' FSK',' FCO','LIME',' TMP','SW10','SLTI','SLTQ','SLTS',
     8'SLTF','RSDC','RSPC','CLCH',' CQV',' YOC','YEFK',' QSK',' SSK',
     9' VSK','SLTV','MUSI','IRDL',' HMN','RNAD','NIMO','FALF',' DN2',
     1'RLSF',' REK','FULU','DN2O',' FO2','FCO2','CFEM','BURC','BURN',
     2'NPPC',' NEE','FN2O','SNO2','SN2O','VN2O','VNO2','QNO2','QN2O',
     3'UNO3','UNH3','RSSF','DPRK','RSFN','DPKN','DRNP','NINX','NINO',
     4'NIN2','HONO','DENO','DEN2','TONO','TON2','TONX'/

      DATA HEDP/'PAPL','PSRO','PLCH','PSSF','PSED','PDGF','PDGS','PFOL',
     1'PSOL','PDRN'/,HEDC/' HUI',' LAI','  RD','  RW','BIOM',' STL',
     2'CPHT',' UN1',' UP1',' UK1','  WS','  NS','  PS','  KS','  TS',
     3'  AS','SALT',' REG'/
!    UNC-VWB-BARE ESTIMATE OF THE FRACTION OF BARE SOIL FOR WIND EROSION CALCULATIONS  ADDED TNO2 and FBARE
	DATA HEDS/'TNH3','TNO3','PLAB','TSOK','SNOA','RZSW','WTBL','GWST',
     1' STD',' RSD','OCPD',' TOC','  LS','  LM',' LSL',' LSC',' LMC',
     2'LSLC','LSNC',' BMC',' HSC',' HPC',' LSN',' LMN',' BMN',' HSN',
     3' HPN',' TWN','SALT','TNO2','FBAR'/ 
      DATA SID/'   1','   2','   3','   4','   5','   6','  7','   8',
     1'   9','  10','  11','  12','  13','  14','  15',' TOT'/
      DATA PROG/'EPIC','    ','    ','    ','0509',' VER','SION'/
      DATA NC/0,31,60,91,121,152,182,213,244,274,305,335,366/
C Modified by RICEU for adding new N VARS (NSM from 114 to 123, adding 9 new N VARS)
      DATA IDAY,IGN,IMON,IT1,IT2,IT3,IYER/7*0/,NFS,NJC,NKA,NKD,NKS,NKYA/
     140,4,60,40,40,40/,NSM/123/,MDP/30/,NGF/34/

      DATA KR/11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,
     130,31,32,33,34,35,36,37,38,39,40,41,42/
      DATA CLT/57.296/,PI2/6.2832/,PIT/58.13/,WCS/25.4,50.8,76.2/,
     &PSZ/200.,10.,2./ 
	DATA BLANK/'        '/
C Added by RICEU for calculating ratio of NO to N2O to include new N VARS	
      DATA BSLP/4.443,5.345,7.120,9.694/
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE ACOUT(XX,QQ,GKG)
C     EPIC0509
      REAL*8 XX,X1,X2,X3
      IF(XX.LT.1.E-10)GO TO 4
      X1=.1*GKG*XX/(QQ+1.E-10)
      IF(X1.LT.1000.)GO TO 1
      XI=0.
      X1=.001*X1
      GO TO 5
    1 DO 2 I=1,4
      N2=X1
      IF(N2.GT.0)GO TO 3
    2 X1=X1*1.D3
      I=4
    3 XI=I
    5 N2=XX+.5
      X2=N2
      N1=X1+.5
      X1=N1
      X3=1.D-3*X1+1.D-4*XI
      XX=X2+X3
    4 RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE ADAJ(NC,JDT,M,I,NYD)
C     EPIC0509
C     THIS SUBPROGRAM COMPUTES THE DAY OF THE YEAR, GIVEN THE MONTH AND
C     THE DAY OF THE MONTH.
      DIMENSION NC(13)
      IF(M.GT.2)GO TO 2
      JDT=NC(M)+I
      GO TO 3
    2 JDT=NC(M)-NYD+I
    3 RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      FUNCTION ADSTN(RN1,RN2)
C     EPIC0509
C     THIS SUBPROGRAM COMPUTES A STANDARD NORMAL DEVIATE GIVEN TWO RANDOM
C     NUMBERS
      ADSTN=SQRT(-2.*ALOG(RN1))*COS(6.283185*RN2)
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      FUNCTION AERFC(XX)
C     EPIC0509
C     THIS SUBPROGRAM COMPUTES POINTS ON ERROR FUNCTION OF NORMAL
C     DISTRIBUTION.
      DATA C1/.19684/,C2/.115194/,C3/.00034/,C4/.019527/
      X=ABS(1.4142*XX)
      ERF=1.-(1.+C1*X+C2*X*X+C3*X**3+C4*X**4)**(-4)
      IF(XX.LT.0.)ERF=-ERF
      AERFC=1.-ERF
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE AEXINT(WW,SUM)
C     EPIC0509
C     THIS SUBPROGRAM INTEGRATES THE MODIFIED EXPONENTIAL EQ.
      X1=1.
      DX=.1
      SUM=0.
      Y1=0.
C     WRITE(KW(1),3)X1,DX,Y1
    5 X2=X1-DX
      IF(X2.LE.0.)GO TO 2
      Y2=(-ALOG(X2))**WW
      XY=(Y2+Y1)*DX
      SUM=SUM+XY
C     WRITE(KW(1),3)X2,DX,Y2,SUM
      X1=X2
      Y1=Y2
      IF(XY.LT..1)GO TO 5
    2 DX=DX*.5
      IF(DX.GT.1.E-4)GO TO 5
      SUM=SUM*.5
      RETURN
C    3 FORMAT(10E13.5)
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE AICL
C     EPIC0509
C     THIS SUBPROGRAM COMPUTES THE DAY OF THE MONTH, GIVEN THE MONTH AND
C     THE DAY OF THE YEAR.
      INCLUDE 'EPCM0509_su.for'
      IF(MO.GT.2)GO TO 2
      KDA=JDA-NC(MO)
      GO TO 3
    2 KDA=JDA-NC(MO)+NYD
    3 RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE AINIX
C     EPIC0509
C     THIS SUBPROGRAM INITIALIZES RANDOM NUMBER GENERATOR SEEDS.
      INCLUDE 'EPCM0509_su.for'
      IX(1)=748932582
      IX(2)=1985072130
      IX(3)=1631331038
      IX(4)=67377721
      IX(5)=366304404
      IX(6)=1094585182
      IX(7)=1767585417
      IX(8)=1980520317
      IX(9)=392682216
      IX(10)=64298628
	IX(11)=250756106
	IX(12)=1025663860
	IX(13)=186056398
	IX(14)=522237216
	IX(15)=213453332
	IX(16)=1651217741
	IX(17)=909094944
	IX(18)=2095891343
	IX(19)=203905359
	IX(20)=2001697019
	IX(21)=431442774
      DO 1 I=1,10
      U(I)=0.
    1 CONTINUE
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE AINLZ
C     EPIC0509
C     THIS SUBPROGRAM INITIALIZES VARIABLES
      INCLUDE 'EPCM0509_su.for'
      ICV=0
      IDFT(1)=IDF0
!    UNC-VWB-BARE ESTIMATE OF THE FRACTION OF BARE SOIL FOR WIND EROSION CALCULATIONS add FBARE=0
      FBARE=0
      IDRL=0
	IGO=0
	IHT=0
      IHV=0
	IPST=0
      IPY=1
      IPYI=1
	IRL=0
      ISX=0
      IYR=IYR0
      JCN=0
      JCN0=0
      JCN1=0
	KDC1=0
	KG=0
      LC=0
	LY=0
	LYR=1
      LW=1
      MXT=0
	NBC=0
	NBCX=0 
      NDT=0
      NDF=0
      NDP=0
      NDT=0
      NFA=0
      NGN=NGN0
	NMW=0
      NQP=0
      NQP0=0
      NQP1=0
      NWDA=0
      NWD0=0
      ADRF=100.
      AFLG=0.
	AGPM=0.
      AILG=0.
      APB=0.
      BARF=0.
      OCPD=0.
      CAP=0.
      COST=0.
      CSFX=0.
      CSO1=0.
      CST1=0.
      CV=0.
      CVP=0.
      CVRS=0.
      CYAV=0.
      CYMX=0.
      CYSD=0.
      DARF=0.
      DHT=0.
      DKHL=0.
	GSEF=0.
	GSEP=0.
	GSVF=0.
	GSVP=0.
      PAW=0.
      PDSW=0.
      FCSW=0.
      FGC=0.
      FNHL=0.
      PMOEO=100.
      PMORF=100.
	PPLA=0.
      PRAV=0.
      PRB=0.
      PRSD=0.
      PSTS=0.
      QPQB=0.
      QPS=0.
      RCF=1.
      RFSM=0.
      RHTT=0.
      RGIN=0.
      RRUF=.01
	RUSM=0.
      RZSW=0.
      SARF=1.E10
      SF=0.
      SFMO=0.
      SHRL=1.
	SMGS=0.
      SRA=0.
      SSFK=0.
      SSFP=0.
      SSFN=0.
      SST=0.
      SSW=0.
      STD=STD0
      STDO=0.
      STDOK=0.
      STDON=0.
      STDOP=0.
      TAP=0.
      TCAV=0.
      TCMX=0.
      TCMN=1.E20
      TEK=0.
      TFK=0.
      THK=0.
      TLMF=0.
      TMP=0.
      TNOR=0.
      TNO3=0.
      YEW=0.
      ZBMC=0.
      ZBMN=0.
      ZHPC=0.
      ZHPN=0.
      ZHSC=0.
      ZHSN=0.
      ZLM=0.
      ZLMC=0.
      ZLMN=0.
      ZLS=0.
      ZLSC=0.
      ZLSL=0.
      ZLSLC=0.
      ZLSN=0.
      ZLSLNC=0.
      TOC=0.
      TOP=0.
      TP=0.
	TPAC=0.
      TRSD=0.
      TSK=0.
      TSLT=0.
      TSNO=0.
      TWN=0.
      TYK=0.
      TYN=0.
      TYN1=0.
      TYP=0.
      VALF1=0.
      VAP=0.
      VIRT=0.
	WS=1.
      WTN=0.
      YLK=0.
      YLN=0.
      YLP=0.
      DO 10 I=1,6
   10 ISIX(I)=0
      DO 511 J=1,200
  511 NX(J)=J
      DO 516 I=1,11
      ANA(I)=0.
      HUF(I)=0.
      PSTM(I)=0.
      RDF(I)=0.
      TFTN(I)=0.
      TFTP(I)=0.
      TFTK(I)=0.
      DO 15 J=1,15
   15 SMS(I,J)=0.
      DO 8 J=1,10
      NPSF(J,I)=0
      CAW(J,I)=0.
      CRF(J,I)=0.
      CQV(J,I)=0.
	CSTF(J,I)=0.
      DMF(J,I)=0.
      ETG(J,I)=0.
      FRTK(J,I)=0.
      FRTN(J,I)=0.
      FRTP(J,I)=0.
      TPSF(J,I)=0.
      VIR(J,I)=0.
      VIL(J,I)=0.
      YLD1(J,I)=0.
      YLD2(J,I)=0.
      YLNF(J,I)=0.
      YLPF(J,I)=0.
      YLKF(J,I)=0.
    8 CONTINUE
  516 CONTINUE
      DO 517 I=1,10
      NCP(I)=0
      NHV(I)=0
      CNDS(I)=0.
      U(I)=0.
      PSTN(I)=' '
  517 CONTINUE
      DO 2 I=1,12
      IHRL(I)=0
      IHU(I)=0
      JE(I)=12
      JPL(I)=0
      KG(I)=0
      NHU(I)=0
      NYLN(I)=0
      ACET(I)=0.
      AJHI(I)=0.
      BLYN(I)=0.
      ASW(I)=0.
      CHT(I)=.01
      CX(I)=1.E-10
      DM(I)=0.
      DM1(I)=0.
      EP(I)=0.
      HU(I)=0.
      PPL0(I)=0.
      PSTF(I)=1.
      QIN(I)=0.
      RCM(I)=0.
      RD(I)=0.
      REG(I)=0.
      RSY(I)=0.
      RW(I)=0.
	RWX(I)=0.
      SET(I)=0.
      SLAI(I)=0.
      SRD(I)=0.
      STL(I)=0.
      HUI(I)=0.
      TAL(I)=0.
      TAMX(I)=0.
      TCSO(I)=0.
      TCST(I)=0.
      TEI(I)=0.
      TET(I)=0.
      TMXF(I)=0.
      TQ(I)=0.
      TR(I)=0.
      TRHT(I)=0.
      TSN(I)=0.
      TSR(I)=0.
      TSTL(I)=0.
      TSY(I)=0.
      TVAL(I)=0.
      TXMX(I)=0.
      TXMN(I)=0.
      TYW(I)=0.
      UN1(I)=0.
      UP1(I)=0.
      UK1(I)=0.
      U10MX(I)=0.
      W(I)=0.
      WLV(I)=0.
      XMTU(I)=0.
      YLD(I)=0.
      DO 510 J=1,30
      PHU(I,J)=0.
      POP(I,J)=0.
  510 CONTINUE
      DO 514 J=1,10
      RWT(J,I)=0.
  514 CONTINUE
      DO 16 J=1,NKS
      STV(J,I)=0.
   16 CONTINUE
    2 CONTINUE
      DO 3 I=1,NSM
      SM(I)=0.
      SMY(I)=0.
      DO 3 J=1,12
      SMM(I,J)=0.
    3 CONTINUE
      DO 5 I=1,5
      SQB(I)=0.
      SYB(I)=0.
      DO 5 K=1,MDP
      SPQ(I,K)=0.
C	SPQC(I,K)=0.
      SPY(I,K)=0.
      DO 5 J=1,100
      APQ(I,K,J)=0.
C	APQC(I,K,J)=0.
      APY(I,K,J)=0.
      AQB(I,K,J)=0.
    5 AYB(I,K,J)=0.
      DO 4 K=1,MDP
      DO 13 I=1,90
      PVY(K,I)=0.
C	PVQC(K,I)=0.
   13 PVQ(K,I)=0.
      DO 4 L=1,10
      SMAP(L,K)=0.
      SMYP(L,K)=0.
      VARP(L,K)=0.
      DO 4 I=1,12
    4 SMMP(L,K,I)=0.
      DO 7 I=1,12
      NCR(I)=0
      TYL1(I)=0.
      TYL2(I)=0.
      TYLN(I)=0.
      TYLP(I)=0.
      TYLK(I)=0.
      TETG(I)=0.
      TVIR(I)=0.
      TIRL(I)=0.
      TCAW(I)=0.
      TCQV(I)=0.
      TCRF(I)=0.
      TDM(I)=0.
      TRA(I)=0.
      THU(I)=0.
      TRD(I)=0.
      DO 18 J=1,12
      DO 18 K=1,18
   18 SMMC(K,J,I)=0.
    7 CONTINUE
      TSFC=0.
	STDA=0.
      DO 9 I=1,3
      XIM(I)=0.
    9 CONTINUE
      DO 11 I=1,50
      ICUS(I)=0
      KDT2(I)=0
   11 CONTINUE
      DO 14 I=1,90
	VQ(I)=0.
   14 VY(I)=0.
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE AISHFL
C     EPIC0509
C     THIS SUBPROGRAM SHUFFLES DATA RANDOMLY. (BRATLEY,FOX,SCHRAGE,P.34)
      INCLUDE 'EPCM0509_su.for'
      I=20
    2 II=IDG(I)
      RN=AUNIF(11)
      K=I*RN+1
      IDG(I)=IDG(K)
      IDG(K)=II
      I=I-1
      IF(I.GT.1)GO TO 2
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE AISPL(II,JJ)
C     EPIC0509
C     THIS SUBPROGRAM SPLITS DUAL PURPOSE INTEGER INPUT VARIABLES.
      INCLUDE 'EPCM0509_su.for'
      XX=II
      XX=XX*.1
      JJ=XX
      II=II-JJ*10
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE ALPYR(IYR,NYD,LPYR)
C     EPIC0509
      NYD=1
      IF(MOD(IYR,100).NE.0)GO TO 1
      IF(MOD(IYR,400).NE.0)GO TO 2
      GO TO 3
    1 IF(MOD(IYR,4).NE.0)GO TO 2
    3 NYD=LPYR
    2 RETURN 
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE APAGE(IP)
C     EPIC0509
C     THIS SUBPROGRAM CHANGES PAGES, WRITES VERSION, DATE, & TITLE
      INCLUDE 'EPCM0509_su.for'
      WRITE(KW(1),1)IYER,IMON,IDAY,IT1,IT2,IT3
      WRITE(KW(1),2)TITLE
      WRITE(KW(1),3)IRUN,IRO0,IGN
      IF(IP.EQ.0)RETURN
      WRITE(KW(1),4)SITEFILE
      WRITE(KW(1),4)SOILFILE
      WRITE(KW(1),4)OPSCFILE
      RETURN
    1 FORMAT('1'/T5,'EPIC0509',2X,I4,2I2,2X,2(I2,':'),I2)
    2 FORMAT(/(10X,20A4))
    3 FORMAT(5X,'RUN #=',I4,2X,'ROT #=',I4,2X,'GNSD #=',I4)
    4 FORMAT(5X,A20)
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      FUNCTION ARALT(X,DRV)
C     EPIC0509
C     THIS SUBPROGRAM INTERPOLATES MONTHLY VALUES OF DAYLIGHT HOURS AND
C     MAXIMUM SOLAR RADIATION TO PROVIDE DAILY VALUES.
      INCLUDE 'EPCM0509_su.for'
      DIMENSION X(12)
      M1=MO+1
      N2=NC(M1)
      IF(MO.EQ.2)N2=N2-NYD
      N1=NC(MO)
      X1=JDA-N1
      X2=N2-N1
      RTO=X1/X2
      IF(M1.EQ.13)M1=1
      XX=X(M1)-X(MO)
      DRV=XX/X2
      ARALT=XX*RTO+X(MO)
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE ARESET
C     EPIC0509
      INCLUDE 'EPCM0509_su.for'
      IDRL=0
      IRL=0
      CALL ADAJ(NC,IBD,IMO0,IDA0,NYD)
      MO=IMO0
      MO1=MO
      JCN=0
      JCN0=0
      JCN1=0
      LW=1
      NQP=0
      NQP0=0
      NQP1=0
      NWDA=0
      NWD0=0
      CST1=0.
      CYAV=0.
      CYSD=0.
      CYMX=0.
      PRAV=0.
      PRB=0.
      PRSD=0.
      QPQB=0.
      QPS=0.
      RCF=1.
      SFMO=0.
      TCAV=0.
      TCMX=0.
      TCMN=1.E20
      TYK=0.
      TYN=0.
      TUN1=0.
      TYP=0.
      VALF1=0.
      YLN=0.
      YLP=0.
      YLK=0.
      DO 8 J=1,21
      IX(J)=IX0(J)
      IDG(J)=J
    8 CONTINUE
      DO 9 I=1,3
      XIM(I)=0.
    9 CONTINUE
      DO 2 I=1,12
      IHRL(I)=0
      JE(I)=12
      JPL(I)=0
      NYLN(I)=0
      ASW(I)=0.
      CX(I)=1.E-10
      EP(I)=0.
      QIN(I)=0.
      RCM(I)=0.
      REG(I)=0.
      RSY(I)=0.
      SET(I)=0.
      SRD(I)=0.
      TAL(I)=0.
      TAMX(I)=0.
      TEI(I)=0.
      TET(I)=0.
      TQ(I)=0.
      TR(I)=0.
      TRHT(I)=0.
      TSN(I)=0.
      TSR(I)=0.
      TSTL(I)=0.
      TSY(I)=0.
      TXMX(I)=0.
      TXMN(I)=0.
      TYW(I)=0.
      U10MX(I)=0.
      W(I)=0.
    2 CONTINUE  
      DO 3 I=1,NSM
      SM(I)=0.
      SMY(I)=0.
      DO 3 J=1,12
      SMM(I,J)=0.
    3 CONTINUE
      DO 5 I=1,5
      SQB(I)=0.
      SYB(I)=0.
      DO 5 K=1,NDP
      SPQ(I,K)=0.
C	SPQC(I,K)=0.
      SPY(I,K)=0.
      DO 5 J=1,100
      APQ(I,K,J)=0.
C	APQC(I,K,J)=0.
      APY(I,K,J)=0.
      AQB(I,K,J)=0.
    5 AYB(I,K,J)=0.
      DO 4 K=1,NDP
      DO 13 I=1,90
      PVQ(K,I)=0.
C	PVQC(K,I)=0.
   13 PVY(K,I)=0.
      DO 4 L=1,10
      SMAP(L,K)=0.
      SMYP(L,K)=0.
      VARP(L,K)=0.
      DO 4 I=1,12
    4 SMMP(L,K,I)=0.
      TSFC=0.
	STDA=0.
      DO 7 I=1,LC
      NCR(I)=0
      TCAW(I)=0.
      TCQV(I)=0.
      TCRF(I)=0.
      TDM(I)=0.
      TETG(I)=0.
      TVIR(I)=0.
      TFTN(I)=0.
      TFTP(I)=0.
      THU(I)=0.
      TRA(I)=0.
      TRD(I)=0.
      TYLN(I)=0.
      TYLP(I)=0.
      TYLK(I)=0.
      TYL1(I)=0.
      TYL2(I)=0.
    7 CONTINUE
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE ASCRV(X1,X2,X3,X4)
C     EPIC0509
C     THIS SUBPROGRAM COMPUTES S CURVE PARMS GIVEN 2 (X,Y) POINTS.
      INCLUDE 'EPCM0509_su.for'
      XX=ALOG(X3/X1-X3)
      X2=(XX-ALOG(X4/X2-X4))/(X4-X3)
      X1=XX+X3*X2
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE ASORT1(X,NX,M)
C     THIS SUBPROGRAM SORTS HYDROGRAPH FLOW RATES IN DECENDING ORDER
C     FOR CONVENIENCE IN PLOTTING.
      DIMENSION X(200),NX(200)
      NB=M-1
      J=M
      DO 2 I=1,NB
      J=J-1
      MK=0
      DO 1 K=1,J
      KP1=K+1
      IF(X(NX(K)).GE.X(NX(KP1)))GO TO 1
      N1=NX(KP1)
      NX(KP1)=NX(K)
      NX(K)=N1
      MK=1
    1 CONTINUE
      IF(MK.EQ.0)GO TO 3
    2 CONTINUE
    3 RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE ASORTI(NZ,NY,M)
C     EPIC0509
C     THIS SUBPROGRAM SORTS NUMBERS INTO ASCENDING ORDER USING
C     RIPPLE SORT
      DIMENSION NY(M),NZ(M)
      INCLUDE 'EPCM0509_su.for'
      NB=M-1
      J=M
      DO 3 I=1,NB
      J=J-1
      MK=0
      DO 2 K=1,J
      K1=K+1
      IF(NZ(NY(K)).LE.NZ(NY(K1)))GO TO 2
      N1=NY(K1)
      NY(K1)=NY(K)
      NY(K)=N1
      MK=1
    2 CONTINUE
      IF(MK.EQ.0)GO TO 4
    3 CONTINUE
    4 RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE ASORT2(X,NX,M)
!     EPIC0509
!     THIS SUBPROGRAM SORTS ARRAYS IN DECENDING ORDER BY SORTING SUB
!     SETS & MERGING THE SUBSETS.
      DIMENSION X(43000),NX(43000),NY(43000),MX(250)
      XM=M
      M1=SQRT(XM*XM/(XM-2.))
      MM=M1
      DO 1 I=1,M1
      MX(I)=MM
    1 MM=MM+M1
      MX(M1)=M
      L=1
      DO 15 KK=1,M1
      NB=MX(KK)-1
      J=MX(KK)
      DO 4 I=L,NB
      J=J-1
      MK=0
      DO 5 K=L,J
      KP1=K+1
      IF(X(NX(K))<=X(NX(KP1)))GO TO 5
      N1=NX(KP1)
      NX(KP1)=NX(K)
      NX(K)=N1
      MK=1
    5 CONTINUE
      IF(MK.EQ.0)GO TO 15
    4 CONTINUE
   15 L=MX(KK)+1
      MM=M1-1
      I=1
      J=MX(1)+1
      L=0
      DO 21 K=1,MM
      M1=MX(K)
      M2=MX(K+1)
   16 L=L+1
      IF(X(NX(I))<=X(NX(J)))GO TO 9
      NY(L)=NX(J)
      J=J+1
      IF(J.GT.M2)GO TO 17
      GO TO 16
    9 NY(L)=NX(I)
      I=I+1
      IF(I.GT.M1)GO TO 14
      GO TO 16
   17 DO 18 I1=I,M1
      L=L+1
   18 NY(L)=NX(I1)
      GO TO 19
   14 DO 20 J1=J,M2
      L=L+1
   20 NY(L)=NX(J1)
   19 DO 23 I=1,M2
   23 NX(I)=NY(I)
      I=1
      L=0
   21 J=M2+1
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE ASORT3(D,NX,M1)
	!SHELL SORT
	DIMENSION D(43000),NX(43000)
	M=1
	DO
		IF((2**M)>M1)Exit
		M=M+1
	END DO
	M=M-1
	M=2**M
	DO
		K=M1-M
		DO I=1,K
			DO J=I,1,-M
				IF(D(J+M)>=D(J))EXIT
	            X=D(J)
				D(J)=D(J+M)
				D(J+M)=X
				N1=NX(J)
				NX(J)=NX(J+M)
				NX(J+M)=N1
			END DO
		END DO
		M=M/2
		IF(M<=0)EXIT
	END DO
	RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      FUNCTION ASPLT(XX)
C     EPIC0509
C     THIS SUBPROGRAM SPLITS DUAL PURPOSE REAL INPUT VARIABLES.
      INCLUDE 'EPCM0509_su.for'
      ASPLT=AINT(XX)
      XX=XX-ASPLT
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      FUNCTION ASVP(TK)
!     THIS SUBPROGRAM COMPUTES THE SATURATION VAPOR PRESSURE GIVEN 
!     TEMPERATURE.
      ASVP=.1*EXP(54.879-5.029*ALOG(TK)-6790.5/TK)
	RETURN
	END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE ATIMER(ITR)
C     EPIC0509
C     THIS SUBPROGRAM SETS DATE AND TIME FOR OUTPUT AND CALCULATES
C     ELAPSED TIME.
C     CHARACTER*8 DATE@,TIME@,NOW
      INCLUDE 'EPCM0509_su.for'
      IF(ITR.GT.0)GO TO 3
C     NOW=DATE@()
C     READ(NOW,'(2(i2,1x),i2)')IMON,IDAY,IYER
C     NOW=TIME@()
C     READ(NOW,'(2(i2,1x),i2)')IT1,IT2,IT3
      CALL GETDAT(IYER,IMON,IDAY)
      CALL GETTIM(IT1,IT2,IT3,I100)
      IBT=IT1*3600+IT2*60+IT3
      GO TO 2
C   3 NOW=TIME@()
C     READ(NOW,'(2(i2,1x),i2)')IEH,IEM,IES
    3 CALL GETTIM(IEH,IEM,IES,I100)
      IFT=IEH*3600+IEM*60+IES
      WRITE(KW(1),5000)IT1,IT2,IT3
      WRITE(KW(1),5100)IEH,IEM,IES
      WRITE(KW(1),5200)
      II=IFT-IBT
      ITS=MOD(II,60)
      II=(II-ITS)/60
      ITM=MOD(II,60)
      ITH=(II-ITM)/60
      WRITE(KW(1),5320)ITH,ITM,ITS
    2 RETURN
 5000 FORMAT(10X,'BEGINNING TIME: ',I2,2(':',I2),'.',I2)
 5100 FORMAT(10X,'ENDING    TIME: ',I2,2(':',I2),'.',I2)
 5200 FORMAT(10X,'----------------------------')
 5320 FORMAT(10X,'TOTAL RUN TIME: ',I2,2(':',I2),'.',I2)
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      FUNCTION ATRI(BLM,QMN,UPLM,KK)
C     EPIC0509
C     THIS SUBPROGRAM GENERATES NUMBERS FROM A TRIANGULAR DISTRIBUTION
C     GIVEN X AXIS POINTS AT START & END AND PEAK Y VALUE.
      INCLUDE 'EPCM0509_su.for'
      U3=QMN-BLM
      RN=AUNIF(IDG(KK))
	  IF(UPLM>BLM)THEN
		  Y=2./(UPLM-BLM)
		  B2=UPLM-QMN
		  B1=RN/Y
		  X1=Y*U3/2.
		  IF(RN>X1)THEN
		  	  ATRI=UPLM-SQRT(B2*B2-2.*B2*(B1-.5*U3))
		  ELSE 
			  ATRI=SQRT(2.*B1*U3)+BLM
		  END IF
		  IF(KK==7.OR.KK==4)THEN
			  AMN=(UPLM+QMN+BLM)/3.
			  ATRI=ATRI*QMN/AMN
			  IF(ATRI>=1.)ATRI=.99
		  END IF
	  ELSE
		  ATRI=BLM
      END IF
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      FUNCTION AUNIF(J)
C     EPIC0509
      INCLUDE 'EPCM0509_su.for'
      K=IX(J)/127773
      IX(J)=16807*(IX(J)-K*127773)-K*2836
      IF(IX(J).LT.0)IX(J)=IX(J)+2147483647
      AUNIF=IX(J)*4.656612875D-10
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE AXMON(JDX,MOX)
C     EPIC0509
C     THIS SUBPROGRAM DETERMINES THE MONTH, GIVEN THE DAY OF THE YEAR.
      INCLUDE 'EPCM0509_su.for'
      IF(JDX.LE.NC(2))GO TO 3
      M=MOX
      DO 2 MOX=M,12
      M1=MOX+1
      NDA=NC(M1)-NYD
      IF(JDX.LE.NDA)GO TO 4
    2 CONTINUE
    3 MOX=1
    4 RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE BSIM
C     EPIC0509
C     THIS SUBPROGRAM DRIVES THE DAILY SIMULATION FOR ANY
C     NUMBER OF YEARS
      CHARACTER*4 HD28
      REAL*8 PPX
      INCLUDE 'EPCM0509_su.for'
      DIMENSION HD28(15,10)
      DIMENSION KDT(12,12),KTP(7),MNST(7)
      DIMENSION XTP(4,12,12),YTP(16)
      DIMENSION PPX(13)
      DATA HD28/'  Z1','  Z2','  Z3','  Z4','  Z5','  Z6','  Z7','  Z8',
     1'  Z9',' Z10',' Z11',' Z12',' Z13',' Z14',' Z15',' SW1',' SW2',
     2' SW3',' SW4',' SW5',' SW6',' SW7',' SW8',' SW9','SW10','SW11',
     3'SW12','SW13','SW14','SW15',' WU1',' WU2',' WU3',' WU4',' WU5',
     4' WU6',' WU7',' WU8',' WU9','WU10','WU11','WU12','WU13','WU14',
     5'WU15',' EV1',' EV2',' EV3',' EV4',' EV5',' EV6',' EV7',' EV8',
     6' EV9','EV10','EV11','EV12','EV13','EV14','EV15',' PK1',' PK2',
     7' PK3',' PK4',' PK5',' PK6',' PK7',' PK8',' PK9','PK10','PK11',
     8'PK12','PK13','PK14','PK15',' SF1',' SF2',' SF3',' SF4',' SF5',
     9' SF6',' SF7',' SF8',' SF9','SF10','SF11','SF12','SF13','SF14',
     1'SF15',' N31',' N32',' N33',' N34',' N35',' N36',' N37',' N38',
     2' N39','N310','N311','N312','N313','N314','N315',' UN1',' UN2',
     3' UN3',' UN4',' UN5',' UN6',' UN7',' UN8',' UN9','UN10','UN11',
     4'UN12','UN13','UN14','UN15',' LN1',' LN2',' LN3',' LN4',' LN5',
     5' LN6',' LN7',' LN8',' LN9','LN10','LN11','LN12','LN13','LN14',
     6'LN15','  T1','  T2','  T3','  T4','  T5','  T6','  T7','  T8',
     7'  T9',' T10',' T11',' T12',' T13',' T14',' T15'/
      DATA AIR,SAIR,TSMQ,TSMY/4*0./
      DATA MNST/1,2,3,4,5,6,7/,KTF/0/
      PMAV(FMO1,FMO2,X1,X2)=(FMO1*X1+FMO2*X2)/30.
      IF(KFL(5).GT.0)WRITE(KW(5),471)HEDP
      JP(JJK)=0
      IF(KFL(10).GT.0)WRITE(KW(10),517)
      TILG=0.
      IF(KFL(11).GT.0)WRITE(KW(11),526)HEDS(6),HED(4),HED(11),HED(14),
     1HED(17),HED(16)
      IF(KFL(12).GT.0)WRITE(KW(12),527)
C     IF(KFL(6).GT.0)WRITE(KW(6),477)(HED(KA(I)),I=1,NKA)
	IF(KFL(6).GT.0)WRITE(KW(6),477)(HED(IFS(J)),J=1,NFS),(HEDS(I),
     1I=4,6)
	IF(KFL(22).GT.0)WRITE(KW(22),520)HED(4),HED(10),HED(11),HED(13),
     1HED(14),(HED(I),I=16,20),(HEDS(I),I=6,8),'RNO3',(HED(I),I=43,46),
	2HED(49),HED(89),HED(52),HED(85),HED(50),(HED(I),I=59,61),'UNO3',
     3' YLN','CPNM',' YLD','TOTN'
C    UNC

C	WRITE(KWNCM,7520)HED(4),HED(10),HED(11),HED(14),HED(16),
C     1HED(17),HED(30),HED(NDVSS),HED(42),HED(48),
C     2HED(47),HED(50),HED(51),HED(52),HED(49),HED(43),HED(44),
C     3HED(45),HED(46),HED(59),HED(60),HED(61),HED(62),HED(63),
C     4HED(56),HED(54),HED(55),HED(57),HED(66),HED(77)


C Commented out by RICEU for adding new N VARS
C      IF(KFL(37).GT.0)WRITE(KWNCM,7520)HED(4),HED(10),HED(11),HED(13),
C     1HED(14),(HED(I),I=16,20),(HEDS(I),I=6,8),'RNO3',(HED(I),I=43,46),
C     2HED(49),HED(89),HED(52),HED(85),HED(50),(HED(I),I=59,61),'UNO3',
C     3' YLN','CPNM',' YLD','TOTN',HEDC(1),HEDC(2),HEDC(7)

C Modified by RICEU for adding new N VARS
      IF(KFL(37).GT.0)WRITE(KWNCM,7520)HED(4),HED(10),HED(11),HED(13),
     1HED(14),(HED(I),I=16,20),(HEDS(I),I=6,8),'RNO3',(HED(I),I=43,46),
     2HED(49),HED(89),HED(52),HED(85),HED(50),(HED(I),I=59,61),'UNO3',
     3' YLN','CPNM',' YLD','TOTN',HEDC(1),HEDC(2),HEDC(7),
     4(HED(I),I=115,123)

C Commented out by RICEU for adding new N VARS
C 7520 FORMAT(1X,'  RUN NAME     ',1X,' LOCATION NAME       ',
C     1'STATISTICAL WEATHER ',' STATISTICAL WIND   ',
C     2' SOIL FILE NAME     ',
C     3'OPERATION FILE NAME ',' LATITUDE ',' LONGITUDE',
C     44X,'Y   M  ',32(A4,4X),3(A4,4X))

C Modified by RICEU for adding new N VARS
 7520 FORMAT(1X,'  RUN NAME     ',1X,' LOCATION NAME       ',
     1'STATISTICAL WEATHER ',' STATISTICAL WIND   ',
     2' SOIL FILE NAME     ',
     3'OPERATION FILE NAME ',' LATITUDE ',' LONGITUDE',
     44X,'Y   M  ',32(A4,4X),3(A4,4X),9(A4,4X))	 



C     IF(KWHEAD==0)WRITE(KWDNC,7530) HED(4),HED(44),HED(45),HED(46),
C    1HED(49),HED(89),HED(52),HED(85),HED(50),HEDC(8),HEDC(1),HEDC(2),
C    2HEDC(7),HEDC(8),HEDC(1),HEDC(2),HEDC(7)

C     commnet for added SWAT variables by UNC
C      IF(KWHEAD==0)WRITE(KWDNCL,7531) HED(4),HED(44),HED(45),HED(46),
C     1HED(49),HED(89),HED(52),HED(85),HED(50),HEDC(8),HEDC(1),HEDC(2),
C     2HEDC(7),HEDC(8),HEDC(1),HEDC(2),HEDC(7)

C Commented out by RICEU for adding new N VARS
!    UNC-VWB-BARE ESTIMATE OF THE FRACTION OF BARE SOIL FOR WIND EROSION CALCULATIONS added HEDS(31)in write statement
C      IF(KWHEAD==0)WRITE(KWDNCL,7531) HED(4),HED(44),HED(45),HED(46),
C     1HED(49),HED(89),HED(52),HED(85),HED(50),HED(31),HED(54),HED(55),
C     2HED(43),HED(42),HED(14),HED(62),HED(63),HED(56),HED(53),HED(16), 
C     3HED(17),HED(18),HED(57),HED(48),HED(47),HED(10),HED(11),HEDS(11),     
C     4HED(114),HEDC(8),HEDC(1),HEDC(2),HEDC(7),HEDS(31)


C Modified by RICEU for adding new N VARS
      IF(KWHEAD==0)WRITE(KWDNCL,7531) HED(4),HED(44),HED(45),HED(46),
     1HED(49),HED(89),HED(52),HED(85),HED(50),HED(31),HED(54),HED(55),
     2HED(43),HED(42),HED(14),HED(62),HED(63),HED(56),HED(53),HED(16), 
     3HED(17),HED(18),HED(57),HED(48),HED(47),HED(10),HED(11),HEDS(11),
     4HED(114),HEDC(8),HEDC(1),HEDC(2),HEDC(7),HEDS(31),HED(115),HED(116),
     5HED(117),HED(118),HED(119),HED(120),HED(121),HED(122),HED(123),HED(59),
     6HED(60),HED(61)


C     write(*,7532 )  "HED:", HED
 7532   FORMAT(1X,92(A4,','3X))

C    ,(HEDS(I),I=6,8),'RNO3',(HED(I),I=43,46),
C	2HED(49),HED(89),HED(52),HED(85),HED(50),(HED(I),I=59,61),'UNO3',
C     3' YLN','CPNM',' YLD','TOTN',HEDC(1),HEDC(2),HEDC(7)
	KWHEAD =1
 7530 FORMAT(1X,'  RUN NAME     ',1X,' LOCATION NAME       ',
     1'STATISTICAL WEATHER ',' STATISTICAL WIND   ',
	2' SOIL FILE NAME     ',
	3'OPERATION FILE NAME ',' LATITUDE ',' LONGITUDE',
     44X,'Y   M   D   ',9(A4,4X),
     5' FERT NAME','APP. RATE ','APP. DEPTH',4X,'MN',4X,3X,'NH3',5X,
     63X,'ON',4X,4X,'MP',4X,4X,'OP',4X,3X,'HUSC',3X,
     7'HU BASE 0 HU FRAC.  ',
     8'L-1 DEP ','L-1 BD  ','L-1 NO3 ','L-1 NH3 ','L-1 ON  ',
     &'L-1 P   ','L-1 OP  ','L-1 C ','L-1 NITR ',
     &'L-2 DEP ',' L-2 BD  ','L-2 NO3 ','L-2 NH3 ','L-2 ON  ',
     &'L-2 P   ','L-2 OP  ',' L-2 C ','L-2 NITR ',
     &'T-1 DEP ',' T-1 BD  ','T-1 NO3 ','T-1 NH3 ','T-1 ON  ',
     &'T-1 P   ','T-1 OP  ',' T-1 C ','T-1 NITR ',
     &2('CPNM',4(A4,4X)))

C commented out by UNC for SWAT vars
C 7531 FORMAT(1X,'  RUN NAME,    ',1X,' LOCATION NAME,      ',
C     1'STATISTICAL WEATHER,',' STATISTICAL WIND,  ',
C	2' SOIL FILE NAME,     ',
C	3'OPERATION FILE NAME,',' LATITUDE,','LONGITUDE,',
C     44X,'Y  ,M  ,D  ,',9(A4,','3X),
C     5'FERT NAME,','APP. RATE,','APP. DEPTH,',3X,'MN,',3X,3X,'NH3,',4X,
C     63X,'ON,',3X,4X,'MP,',3X,4X,'OP,',3X,3X,'HUSC,',2X,
C     7'HU BASE 0, HU FRAC.,',
C     8'L-1 DEP,','L-1 BD, ','L-1 NO3,','L-1 NH3,','L-1 ON, ',
C     &'L-2 DEP,',' L-2 BD, ','L-2 NO3,','L-2 NH3,','L-2 ON, ',
C     &'L-2 P,  ','L-2 OP, ',' L-2 C,  ','L-2 NITR ,',
C     &'T-1 DEP,','T-1 BD, ','T-1 NO3,','T-1 NH3,','T-1 ON, ',
C     &'T-1 P,  ','T-1 OP, ','T-1 C,  ','T-1 NITR ,',
C     92('CPNM,',4(A4,',',2X)))

C Commented out by RICEU for adding new N VARS
!    UNC-VWB-BARE ESTIMATE OF THE FRACTION OF BARE SOIL FOR WIND EROSION CALCULATIONS
C 7531 FORMAT(1X,'  RUN NAME,    ',1X,' LOCATION NAME,      ',
C     1'STATISTICAL WEATHER,',' STATISTICAL WIND,  ',
C     2' SOIL FILE NAME,     ',
C     3'OPERATION FILE NAME,',' LATITUDE,','LONGITUDE,',
C     44X,'Y  ,M  ,D  ,',29(A8,','3X),
C     53X,'HUSC,',2X,
C     7'HU BASE 0, HU FRAC.,',
C     8'L-1 DEP,','L-1 BD, ','L-1 SW, ','L-1 NO3,','L-1 NH3,','L-1 ON, ',
C     &'L-1 P,  ','L-1 OP, ','L-1 C,  ','L-1 NITR,',
C     &'L-2 DEP,','L-2 BD, ','L-2 SW, ','L-2 NO3,','L-2 NH3,','L-2 ON, ',
C     &'L-2 P,  ','L-2 OP, ','L-2 C,  ','L-2 NITR ,',
C     &'T-1 DEP,','T-1 BD, ','T-1 NO3,','T-1 NH3,','T-1 ON, ',
C     &'T-1 P,  ','T-1 OP, ','T-1 C,  ','T-1 NITR,',
C     &'L1 ANO3, ','L1 ANH3, ','L1 AON, ','L1 AP, ','L1 AOP, ',
C     &'L2 ANO3, ','L2 ANH3, ','L2 AON, ','L2 AP, ','L2 AOP, ',
C     &('CPNM,',4(A4,',',2X)),A4)


C Modified by RICEU for adding new N VARS 
 7531 FORMAT(1X,'  RUN NAME,    ',1X,' LOCATION NAME,      ',
     1'STATISTICAL WEATHER,',' STATISTICAL WIND,  ',
     2' SOIL FILE NAME,     ',
     3'OPERATION FILE NAME,',' LATITUDE,','LONGITUDE,',
     44X,'Y  ,M  ,D  ,',29(A8,','3X),
     53X,'HUSC,',2X,
     7'HU BASE 0, HU FRAC.,',
     8'L-1 DEP,','L-1 BD, ','L-1 SW, ','L-1 NO3,','L-1 NH3,','L-1 ON, ',
     &'L-1 P,  ','L-1 OP, ','L-1 C,  ','L-1 NITR,',
     &'L-2 DEP,','L-2 BD, ','L-2 SW, ','L-2 NO3,','L-2 NH3,','L-2 ON, ',
     &'L-2 P,  ','L-2 OP, ','L-2 C,  ','L-2 NITR ,',
     &'T-1 DEP,','T-1 BD, ','T-1 NO3,','T-1 NH3,','T-1 ON, ',
     &'T-1 P,  ','T-1 OP, ','T-1 C,  ','T-1 NITR,',
     &'L1 ANO3, ','L1 ANH3, ','L1 AON, ','L1 AP, ','L1 AOP, ',
     &'L2 ANO3, ','L2 ANH3, ','L2 AON, ','L2 AP, ','L2 AOP, ',
     &'CPNM,',5(A4,',',2X),12(A8,',',3X),'PFAC1,','PFAC2,','PFAC3,',
     &'PFAC4,','PFAC5,','PFAC6,','PFAC7,','PFAC8,','PFAC9,','PFAC10,',
     &'LAYER3,','LAYER4,','LAYER5,','LAYER6,','LAYER7,','LAYER8,',
     &'LAYER9,','LAYER10')


C 7562 FORMAT(1X,'  RUN NAME     ',' LOCATION NAME       ',
C     1'STATISTICAL WEATHER ',' STATISTICAL WIND   ',
C	2' SOIL FILE NAME     ',
C	3'OPERATION FILE NAME ',' LATITUDE ',' LONGITUDE',
C     430(4X,A4),4X,'OCPD',4X,'APBC',4X,
C     1' TAP',4X,'TNO3')
C    UNC
C     IF(KFL(28).GT.0)WRITE(KW(82),6683)
C6683 FORMAT('A'/'A')
    	IF(KFL(27).GT.0)WRITE(KW(27),516)HED(4),HED(10),HED(11),HED(13),
     1HED(14),(HED(I),I=16,20),(HEDS(I),I=6,8)
      IF(KFL(28).GT.0)WRITE(KW(28),731)HED(4),HED(10),HED(11),(HED(I),
     !I=13,20),(HEDS(I),I=6,8),((HD28(I,J),I=1,NBSL),J=1,10)
      SILG=AILG
      J2=0
      J1=1
	IGIS=NGF
      DO 87 IY=1,NBYR
      JDA=IBD
	KDT=0
	SWGS=0.
C	WRITE(*,156)IY,NBYR
	IF(ICO2.EQ.0)GO TO 571
	IF(ICO2==1)THEN
      IF(IYX.LT.25)GO TO 576
      X1=IYX
      CO2=280.33-X1*(.1879-X1*.0077)
	GO TO 571
  576 CO2=280.33
      END IF
  571 IRO=IRO+1
      IF(IRO.GT.NRO)IRO=1
      IF(IRO.LT.NRO)GO TO 528
      IRL=IRL+1
      IRLX=IRL
      GO TO 529
  528 IRLX=0    
  529 NN=NBC(IRO)
      NN1=NTL(IRO)
	DO I=1,LC
     	WA(I)=100.*CO2/(CO2+EXP(WAC2(1,I)-CO2*WAC2(2,I)))
      END DO
      IF(KFL(7).GT.0)WRITE(KW(7),474)IRUN,IRO0,IGN,IY
      DO 153 I=1,12
      JE(I)=12
      IF(KG(I).EQ.0)GO TO 153
      DO 154 J=1,NN
      IF(I.EQ.LY(IRO,J))GO TO 155
  154 CONTINUE
  155 JE(J)=I
  153 CONTINUE
      SILG=TILG+SILG
      AILG=SILG/IY
      TILG=0.
      TFLG=0.
      KOMP=0
      IGZ=0
      KTT=0
      KTMX=1
      JJ=IBD-1
      JT1=LT(IRO,KT)
      CALL APAGE(1)
      WRITE(KW(1),94)
      ND=366-NYD
      JP(1)=0
      JP(2)=0
      IPC=1
      HSM=0.
	IF(IPAT>0)THEN
		IF(APBC<20.)THEN
			X1=APB/(APBC+.1)
			APMU=X1*(30.-APBC)
			JJK=LY(IRO,1)
			IF(APMU>45.)CALL NFERT(5,JT1)
		END IF
	END IF
      X1=.2+.3*EXP(-.0256*SAN(LD1)*(1.-.01*SIL(LD1)))
      X2=(SIL(LD1)/(CLA(LD1)+SIL(LD1)))**.3
      X5=.1*WOC(LD1)/WT(LD1)
      IF(X5.GT.5.)GO TO 671
      X3=1.-.25*X5/(X5+EXP(3.718-2.947*X5))
      GO TO 673
  671 X3=.75
  673 XX=1.-.01*SAN(LD1)
      X4=1.-.7*XX/(XX+EXP(-5.509+22.899*XX))
      EK=X1*X2*X3*X4
      USL=EK*SL*PEC
      SUM=(SAN(LD1)*.0247-SIL(LD1)*3.65-CLA(LD1)*6.908)/100.
      DG=EXP(SUM)
      REK=9.811*(.0034+.0405*EXP(-.5*((ALOG10(DG)+1.659)/.7101)**2))
	RSK=REK*PEC*RSF
      RSLK=RSK*RLF
      IF(ISTA.EQ.0.OR.IY.EQ.1)CALL EWIK
      NT1=0
      IF(IWP5.EQ.0)GO TO 572
      READ(KR(20),533,END=572)(IWIX(I),I=1,12)      
      DO 574 I=1,12
      IF(IWIX(I).EQ.0)GO TO 575
      IWIX(I)=IWIX(I)+1
      GO TO 574
  575 IWIX(I)=1
  574 CONTINUE
      GO TO 514
  572 DO 573 I=1,12
      IWIX(I)=1
  573 CONTINUE
C     BEGIN DAILY SIMULATION.
  514 DO 84 IDA=IBD,ND
      CALL AICL
      XDA=KDA
	NMW=NMW+1
      NWI=IWIX(MO)
C   UNC
      FNHL = 0
      ISIX(NWI)=ISIX(NWI)+1
      IP15=IDA+15
      CALL AXMON(IP15,MOP)
      IF(IP15.GT.ND)IP15=IP15-ND
      FMO2=MIN0(30,IP15-NC(MOP))
      FMO1=30.-FMO2
      I1=MOP-1
      IF(I1.LT.1)I1=12
      I2=IWIX(I1)
      I3=IWIX(MOP)
      RFVM=PMAV(FMO1,FMO2,RST(1,I2,I1),RST(1,I3,MOP))
      RFSD=PMAV(FMO1,FMO2,RST(2,I2,I1),RST(2,I3,MOP))
      RFSK=PMAV(FMO1,FMO2,RST(3,I2,I1),RST(3,I3,MOP))
      PRWM=PMAV(FMO1,FMO2,PRW(LW,I2,I1),PRW(LW,I3,MOP))
      TMXM=PMAV(FMO1,FMO2,OBMX(I2,I1),OBMX(I3,MOP))
      TMNM=PMAV(FMO1,FMO2,OBMN(I2,I1),OBMN(I3,MOP))
      TXSD=PMAV(FMO1,FMO2,SDTMX(I2,I1),SDTMX(I3,MOP))
      TNSD=PMAV(FMO1,FMO2,SDTMN(I2,I1),SDTMN(I3,MOP))
      SRAM=PMAV(FMO1,FMO2,OBSL(I2,I1),OBSL(I3,MOP))
      IPC=MAX0(IPC,IDA)
      XDA1=31.-XDA
      LNS=LID(NBSL)
	YW=0.
      REP=0.
      ER=1.
	VAR=0.
      DO 524 K=1,7
      DO 525 J=1,12
      CGSF(K,J)=0.
  525 CONTINUE
  524 CONTINUE
      CV=CV+RSD(LD1)+STD+STDO
      CVRS=CVRS+RSD(LD1)+STD+STDO
      BCV=1.
      RCF=.9997*RCF
      IF(CV.LT.10.)BCV=CV/(CV+EXP(SCRP(5,1)-SCRP(5,2)*CV))
      SNOF=0.
      IF(SNO.LT.1.E-10)GO TO 6
      SNOF=SNO/(SNO+EXP(SCRP(17,1)-SCRP(17,2)*SNO))
      BCV=AMAX1(SNOF,BCV)
    6 BCV=BCV*.85

C     Changed format by UNC_ie

      IF ( USEDEP ) THEN 
C         REWIND KR(31)
C         WRITE(*,*)  IYR,MO,KDA
          READ(KR(31),999,END=508) I3,I2,I1,I0,DOX,DRD,WOX,WRD,WOG
C         WRITE(*,*) "KR(31): ", I3,I2,I1,I0,DOX,DRD,WOX,WRD,WOG

          WNO3(LD1)=WNO3(LD1)+.001*(DOX+WOX)
          WNH3(LD1)=WNH3(LD1)+.001*(DRD+WRD)
          WHSN(LD1)=WHSN(LD1)+.001*(WOG)
C         WRITE(*,*) "LD1:", LD1,WNO3(LD1),WNH3(LD1),WHSN(LD1)
C         REWIND KR(31)
      ENDIF

  999 FORMAT(I6,3I4,5F7.2)
      IF(NGN.EQ.0)GO TO 11
      IF(IGSD.EQ.0)GO TO 504
      IF(IY.NE.IGSD)GO TO 504
      IF(IDA.GT.NSTP)GO TO 508
C     READ DAILY WEATHER IF NOT GENERATED
C  1  RA   = SOLAR RADIAION(MJ/M2 OR LY)(BLANK TO GENERATE
C  2  TMX  = MAX TEMP(C)
C  3  TMN  = MIN TEMP(C)
C  4  RFV  = RAINFALL(MM)(999. TO GENERATE OCCURRENCE & AMOUNT;
C            -1. TO GENERATE AMOUNT GIVEN OCCURRENCE)
C  5  RHD  = RELATIVE HUMIDITY (FRACTION)(BLANK TO GENERATE
C  6  U10  = WIND VELOCITY (M/S)(BLANK TO GENERATE
!  7  X1   = ATMOSPHERIC CO2 CONC (PPM)
  504 READ(KR(7),103,END=508)RA,TMX,TMN,RFV,RHD,U10,X1,REP
      IF(X1>0..AND.ICO2==2)CO2=X1
      RA=RA*RUNT
        IF(RHD.GT.1.)RHD=.01*RHD
      III=0
      GO TO 507
  508 NGN=0
      WRITE(KW(1),308)IYR,MO,KDA
      GO TO 11
  507 IF(RFV.GE.0.)GO TO 7
      CALL WRWD(1)
      RFV=RFV*RNCF(MO)
    7 IF(KGN(2).EQ.0)GO TO 16
      IF(ABS(TMX-TMN).LT.1.E-5)GO TO 16
      IF(TMX.GT.100..OR.TMN.GT.100.)GO TO 17
      IF(TMX.GT.TMN)GO TO 8
      GO TO 16
   17 CALL WGN
      CALL WTAIX
      GO TO 18
   16 CALL WGN
      CALL WTAIR
   18 X1=TMX-TMN
      TMX=TMX+TMXF(MO)
      TMN=TMX-TMNF(MO)*X1
    8 IF(RFV.LT.900.)GO TO 19
      CALL WRWD(0)
   19 IF(RA.GT.0..AND.KGN(3).GT.0)GO TO 9
      IF(III.EQ.0)CALL WGN
      CALL WSOLRA
    9 IF(RHD.GT.0..AND.KGN(5).GT.0)GO TO 10
      IF(III.EQ.0)CALL WGN
      CALL WRLHUM
   10 IF(U10.GT.0..AND.KGN(4).GT.0)GO TO 13
      GO TO 12
   11 U10=0.
      RHD=0.
      CALL WRWD(0)
      RFV=RFV*RNCF(MO)
      CALL WGN
      CALL WTAIR
      X1=TMX-TMN
      TMX=TMX+TMXF(MO)
      TMN=TMX-TMNF(MO)*X1
      CALL WSOLRA
      CALL WRLHUM
   12 CALL WNSPD
   13 IF(ACW.LT.1.E-10.OR.SNO.GT.10.)GO TO 14
      CALL WNDIR
C      CALL EWEMHKS(JRT)
       CALL EWER(JRT)
      IF(JRT.GT.0)GO TO 14
      YW=YW*ACW
      SMM(41,MO)=SMM(41,MO)+RGRF
      VAR(41)=RGRF
   14 QNO3=0.
      SMM(7,MO)=SMM(7,MO)+U10
      VAR(7)=U10
      SMM(8,MO)=SMM(8,MO)+RHD
      VAR(8)=RHD
      TX=(TMN+TMX)/2.
	IF(TX.GT.0.)HSM=HSM+TX
      CALL SOLT
      LD2=LID(2)
      SMM(67,MO)=SMM(67,MO)+STMP(LD2)
      VAR(67)=STMP(LD2)
      YP=0.
      YN=0.
      QAP=0.
      IF(RFV.LT.1.E-10)GO TO 15
      SRD(MO)=SRD(MO)+1.
      SMM(4,MO)=SMM(4,MO)+RFV
      VAR(4)=RFV
      ARF=ARF+RFV
      TSNO=0.
   15 SMM(1,MO)=SMM(1,MO)+TMX
      VMN=RFNC*RFV
 	RNO3=VMN
      VAR(1)=TMX
      SMM(2,MO)=SMM(2,MO)+TMN
      VAR(2)=TMN
      SMM(3,MO)=SMM(3,MO)+RA
      VAR(3)=RA
      SML=0.
      YSD=0.
      YERO=0.
      CVF=0.
      QP=0.
      QD=0.
      EI=0.
      RWO=0.
	SNMN=0.
      VSLT=0.
	YLN=0.
      AL5=.02083
      RFRR=0.
      CRKF=0.
      TSNO=TSNO+1.
      IF(TX.GT.0.)GO TO 577
      DSNO=RFV
      SNO=SNO+DSNO
      SMM(5,MO)=SMM(5,MO)+RFV
      VAR(5)=RFV
      RFV=0.
      GO TO 580
  577 IF(SNO.GT.0..AND.RA.GT.10.)CALL HSNOM
      RWO=RFV+SML
      SMM(6,MO)=SMM(6,MO)+SML
      VAR(6)=SML
      IF(RWO.LT.1.E-10)GO TO 580
      IF(RFV.GT.1.E-10)CALL HRFEI
      RFV=RWO
      VAR(28)=EI
      X1=CLA(LD1)
      X5=.1*WOC(LD1)/WT(LD1)
      X2=AMAX1(50.,63.+62.7*ALOG(X5)+15.7*X1-.25*X1*X1)
      RFRR=(RFV/X2)**.6
      CALL HVOLQ
      RFSM=RFSM+RFV
      JCN=JCN+1
      SMM(15,MO)=SMM(15,MO)+CN
      VAR(15)=CN
      IF(QD.LT.1.)GO TO 578
      NQP=NQP+1
      VAR(95)=QP
      PRAV=PRAV+QP
      PRSD=PRSD+QP*QP
      IF(QP.GT.PRB)PRB=QP
      QPQ=QP/QD
      IF(QPQ.GT.QPQB)QPQB=QPQ
      QPS=QPS+QPQ
      TCAV=TCAV+TC
      IF(TC.GT.TCMX)GO TO 126
      IF(TC.LT.TCMN)TCMN=TC
      GO TO 578
  126 TCMX=TC
C     COMPUTE SEDIMENT YLD
  578 IF(ISTA.EQ.0.AND.LUN.NE.35)CALL EYSED
  580 XX=EXP(-RFRR)
      RRUF=AMAX1(1.,RRUF*XX)
      SMM(40,MO)=SMM(40,MO)+RRUF
      VAR(40)=RRUF
      XX=EXP(-.1*YSD(3))
      RHTT=AMAX1(.001,RHTT*XX)
      DHT=AMAX1(.001,DHT*XX)
C     IF(XX.LT.1.)WRITE(KW(1),543)IY,MO,KDA,YSD(3),XX,RHTT,DHT
C 543 FORMAT(1X,'!!!!!',3I4,4F10.3)
      IF(DHT/(DKHL+1.E-5).LT..7)DHT=DKHL
      SMM(39,MO)=SMM(39,MO)+RHTT
      VAR(39)=RHTT
	YERO=YSD(NDRV)+YW
      X1=.9*WT(LD1)
      IF(YERO.LT.X1)GO TO 45
      RTO=X1/YERO
      YSD(NDRV)=YSD(NDRV)*RTO
      YW=YW*RTO
      YERO=X1
   45 SMM(32,MO)=SMM(32,MO)+YSD(2)
      VAR(32)=YSD(2)
      SMM(33,MO)=SMM(33,MO)+YSD(4)
      VAR(33)=YSD(4)
      SMM(31,MO)=SMM(31,MO)+YSD(5)
      VAR(31)=YSD(5)
      VAR(58)=ER
      SMM(83,MO)=SMM(83,MO)+YSD(6)
      VAR(83)=YSD(6)
      CY=1.E5*YSD(NDRV)/(QD+1.E-5)
      CYAV=CYAV+CY
      CYSD=CYSD+CY*CY
      IF(CY.GT.CYMX)CYMX=CY
      SMM(30,MO)=SMM(30,MO)+YSD(3)
      VAR(30)=YSD(3)
      VAR(29)=CVF
	SMM(35,MO)=SMM(35,MO)+YSD(8)
      VAR(35)=YSD(8)
      SMM(36,MO)=SMM(36,MO)+YSD(7)
      VAR(36)=YSD(7)
	SMM(42,MO)=SMM(42,MO)+YW
      VAR(42)=YW
      RFV=RFV+SAIR
      GWST=AMAX1(0.,GWST+RFV-PARM(15))
      IF(GWST.GT.GWMX)GWST=GWMX
      RZSW=RZSW+SAIR
      AIR=0.
	SAIR=0.
      CALL HPURK
      PKRZ(LNS)=PKRZ(LNS)+CRKF
      SMM(17,MO)=SMM(17,MO)+PKRZ(LNS)
      VAR(17)=PKRZ(LNS)
      SMM(16,MO)=SMM(16,MO)+SST
      VAR(16)=SST
      CALL HEVP
      SMM(10,MO)=SMM(10,MO)+EO
      VAR(10)=EO
      AET=ES
      ADRF=(XDA*(SMM(4,MO)-SMM(14,MO))+XDA1*PMORF)/31.
      IF(WTMN.LT.Z(LNS))CALL HWTBL
      IF(IRR.NE.4)GO TO 131
      WTMU=WTMU+FNPI
      SMM(26,MO)=SMM(26,MO)+FNPI
      VAR(26)=FNPI
      CALL HLGOON(JRT)
      IF(RZSW-PAW.GT.BIR.OR.JRT.GT.0)GO TO 131
      FNP=MIN(WTMU,CFNP*VLGI)
      SMM(27,MO)=SMM(27,MO)+FNP
      VAR(27)=FNP
      WTMU=WTMU-FNP
      FNP=FNP/WSA
      TFLG=TFLG+FNP
      TILG=TILG+VLGI
      CFNP=10.*WTMU*WSA/VLG
      CALL NFERT(2,JT1)
      AIR=VLGI
      CALL HIRG(AIR,1.,0.,JRT,JT1,1)
	SAIR=SAIR+AIR
  131 NFA=NFA+1
      NII=NII+1
      CALL WHLRMX
      IHRL(MO)=IHRL(MO)+1
      THRL(MO)=THRL(MO)+HRLT
      SRMX(MO)=SRMX(MO)+RAMX
      IF(MNU.GT.0.AND.NFA.GE.IFA)CALL NFERT(2,JT1)
      IRGX=0
C Added by RICEU for calling PULSE & NOTON2O subprograms
      CALL PULSERICE
      CALL NITNON2O	      

      IF(NYD.EQ.1)GO TO 116
      IF(IDA.NE.60)GO TO 116
      NT1=1
      GO TO 30
  116 NB1=KT
      KHV=0
      DO 21 KT=NB1,NN1
      IF(KOMP(KT).GT.0)GO TO 21
      XHSM=HSM/AHSM
      IF(KTF.EQ.0)KTF=KT
      DO 98 K=1,LC
C	IF(KG(K).EQ.0)GO TO 98
      IF(JH(IRO,KT).EQ.KDC(K))GO TO 147
   98 CONTINUE
      K=1
  147 JJK=K
C    	IF(IY.GT.1)GO TO 591
C     IF(NRO.EQ.1)GO TO 591
C     IF(JJK.EQ.LY(NRO,NBC(NRO)))GO TO 21
C 591 IF(IHUS.GT.0)GO TO 443
      IF(IHUS.GT.0.AND.IY.GT.1)GO TO 443
      IF(IDA.LT.ITL(IRO,KT)+NT1)GO TO 25
  443 IF(KG(JJK).EQ.0.AND.JPL(JJK).EQ.0)GO TO 569
      XHSM=HU(JJK)/PHU(JJK,IHU(JJK))
	GO TO 570
  569 IF(IY.EQ.1)GO TO 590
  570 IF(XHSM>=HUSC(IRO,KT))GO TO 590
      IF(MO.LT.MOFX.OR.IDC(JJK).EQ.NDC(7).OR.IDC(JJK).EQ.NDC(8).OR.IDC
     1(JJK).EQ.NDC(10))GO TO 25
	GO TO 121
  590 IF(PDSW/FCSW.LT.PARM(59))GO TO 121
C	WRITE(KW(1),589)IY,MO,KDA,PDSW,FCSW
      IF(MO.LT.MOFX)GO TO 25
  121 JT1=LT(IRO,KT)
      KOMP(KT)=1
	IF(JT2.EQ.JT1.AND.KHV.GT.0)GO TO 25
      IF(KT.GT.KTMX)KTMX=KT
      CSTX=COTL(JT1)
      COX=COOP(JT1)
      IF(IHC(JT1).NE.NHC(8))GO TO 23
      IF(IRGX.GT.0)GO TO 26
      AIR=VIRR(IRO,KT)
      IRY=0
      IF(AIR.GT.0.)IRY=1
      CALL HIRG(AIR,EFM(JT1),TLD(JT1),JRT,JT1,IRY)
      IF(JRT.EQ.0)GO TO 581
	KOMP(KT)=0
	GO TO 21
  581 IRGX=1
      SAIR=SAIR+AIR
      GO TO 469
   23 IF(IHC(JT1).NE.NHC(9))GO TO 24
      CALL NFERT(1,JT1)
      IF(IDA.NE.J1)GO TO 518
      IF(NBT(JT1).GT.0)GO TO 518
      IF(NBE(JT1).NE.J2)GO TO 518
      CSTX=0.
      COX=0.
  518 J1=IDA
      J2=NBE(JT1)
      GO TO 469
   26 KOMP(KT)=0
      GO TO 21
   24 IF(IHC(JT1).NE.NHC(7))GO TO 519
      IF(QD.GT.PARM(58))GO TO 587
	CALL PSTAPP
      IF(IDA.NE.J1)GO TO 519
      IF(NBT(JT1).GT.0)GO TO 519
      IF(NBE(JT1).NE.J2)GO TO 519
      CSTX=0.
      COX=0.
  519 IF(IHC(JT1).NE.NHC(20))GO TO 584
      KOMP(NB1)=1
	KTF=KTF+1
	GO TO 21
  587 WRITE(KW(1),588)IY,MO,KDA,QD
      GO TO 26 
  584 J1=IDA
      J2=NBE(JT1)
  469 IF(LUN.NE.35)CALL TLOP(CSTX,COX,JRT)
      IF(JRT.GT.0)GO TO 25
      IF(IFD.EQ.0.OR.DKHL.LT..001)GO TO 117
      DHT=DKHL
      IF(NOP.GT.0)WRITE(KW(1),92)IYR,MO,KDA,DHT,DKIN,XHSM
  117 COST=COST+CSTX
      CSFX=CSFX+COX
      JT2=JT1
   21 CONTINUE
      KTF=NB1
   25 IF(KTT.GT.0)IGZ=IGZ+1
      KT=KTF
      BIR=TIR(IRO,KTMX)
      EFI=QIR(IRO,KTMX)
	CFMN=CFRT(IRO,KTMX)
      JT1=LT(IRO,KT)
      KTF=0
      IF(ABS(BIR).LT.1.E-5)GO TO 30
      IF(BIR.GT.0.)GO TO 122
      IF(RZSW-PAW.GT.BIR)GO TO 30
      GO TO 29
  122 IF(BIR.LT.1.)GO TO 28
      CALL SWTN
      IF(WTN.LT.BIR)GO TO 30
      GO TO 29
   28 IF(WS.GT.BIR)GO TO 30
   29 IF(IRR.LT.3.OR.IRR.EQ.5)GO TO 437
      IF(IRR.EQ.4)GO TO 30
      IF(NFA.LT.IFA)GO TO 30
      CALL NFERT(2,JT1)
      IF(JRT.GT.0)GO TO 30
  437 CALL HIRG(AIR,EFM(IAUI),TLD(IAUI),JRT,IAUI,0)
      SAIR=SAIR+AIR
   30 IF(LUN.NE.35)CALL NPCY
      IF(IRR.EQ.1)RWO=RWO+SAIR
      YEW=MIN(ER*(YSD(NDRV)+YW)/WT(LD1),.9)	
      CALL NYON
      SMM(43,MO)=SMM(43,MO)+YN
      VAR(43)=YN
      CALL NCQYL
      IF(NDP.GT.0)CALL PSTCY
      AGPM=0.
      CV=0.
      VAC=0.
      CVP=0.
      CVRS=0.
      IN1=0
      IN2=0
      WS=1.
	N1=1
  127 IN1=IN1+1
      IN2=IN2+1
      DO 90 J=IN1,12
      IF(KG(J).GT.0)GO TO 110
   90 CONTINUE
      GO TO 148
  110 JJK=J
      N1=MAX0(1,NCP(J))
      IF(JPL(JJK).EQ.0)GO TO 27
C     X1=MIN(TOPC(JJK),DST0)
      HU(JJK)=HU(JJK)+AMAX1(0.,DST0-TBSC(JJK))
	IF(PDSW/FCSW.LT.PARM(11).OR.HU(JJK).LT.GMHU(JJK).AND.MO.LT.MOFX)GO 
     1TO 33
      JPL(JJK)=0
      IF(NOP.GT.0)WRITE(KW(1),89)IYR,MO,KDA,PDSW,HU(JJK),XHSM
      HU(JJK)=0.
      IGMD(N1,JJK)=IYR*10000+MO*100+KDA
   27 IN1=J
      CV=CV+DM(JJK)-RW(JJK)
      XX=PPL0(JJK)
      CVP=AMAX1(CVP,XX/(XX+EXP(SCRP(15,1)-SCRP(15,2)*XX)))
      VAC=VAC+BWD(1,JJK)*STL(JJK)
      AWC=AWC+RFV-QD
      AQV=AQV+QD
      DO 31 L1=1,NBSL
      L=LID(L1)
      U(L)=0.
      UN(L)=0.
      UK(L)=0.
   31 UP(L)=0.
      UNO3=0.
      UPP=0.
      SU=0.
      DDM(JJK)=0. 
      CALL CGROW(JRT)
C     IF(JRT.EQ.1)GO TO 534
      IF(JRT.GT.0)GO TO 123
      SUN=0.
      SUP=0.
      SUK=0.
      SAT=0.
      CALL HUSE
      CALL CROP
      CALL NUP
      CALL NPUP
      CALL NUK
      CALL NUSE
      CALL CSTRS
      VAR(50)=WFX
      SMM(13,MO)=SMM(13,MO)+SU
      AET=SU+AET
      IF(HUI(JJK).LT.PARM(3))GO TO 32
      SWH(JJK)=SWH(JJK)+SU
      SWP(JJK)=SWP(JJK)+EP(JJK)
   32 VAR(13)=SU
      GSEP=GSEP+SU
	ACET(JJK)=ACET(JJK)+SU+ES
  123 CALL CAGRO
      VARC(1,JJK)=HUI(JJK)
      VARC(2,JJK)=SLAI(JJK)
      VARC(3,JJK)=RD(JJK)
      VARC(4,JJK)=RW(JJK)
      VARC(5,JJK)=DM(JJK)
      VARC(6,JJK)=STL(JJK)
      VARC(7,JJK)=CHT(JJK)
      VARC(8,JJK)=UN1(JJK)
      VARC(9,JJK)=UP1(JJK)
      VARC(10,JJK)=UK1(JJK)
      IF(IDC(JJK).NE.NDC(7).AND.IDC(JJK).NE.NDC(8).AND.IDC(JJK).NE.NDC
     1(10))AGPM=AGPM+STL(JJK)
      IF(NSTP.NE.IDA)GO TO 33
      IF(IY.NE.IGSD)GO TO 33
      CALL REALC(WORKDIR)
   33 IF(IN2.LT.IGO)GO TO 127
      IF(KFL(12).EQ.0)GO TO 148
      II=IY
      IF(NSTP.EQ.0)GO TO 563
      II=IRLX
      IF(IY.NE.IGSD)GO TO 148
  563 WRITE(KW(12),513)IYR,MO,KDA,II,CPNM(JJK),(CGSF(J,JJK),J=1,7)
  148 AGPM=AGPM+STD
	CV=CV+STD
	CVRS=CVRS+STD
	VAC=VAC+BWD(2,K)*STD
	CALL SCONT
	SWGS=SWGS+SW
!     SCI=SCI+PARM(42)*SQRT(EO*AET)-RFV+QD+PKRZ(LNS)+SST
      X1=AMAX1(AET,EO*EXP(-PARM(42)*SCI/SMX))
 	SCI=SCI+X1-RFV+QD
!	+PKRZ(LNS)+SST
C	WRITE(KW(1),549)IY,MO,KDA,RFV,QD,EO,PKRZ(LNS),SST,SCI,CN,SMX
C	SCI=SCI+EO*EXP(-PARM(42)*SCI/SMX)-RFV+QD+VAR(16)+VAR(17)
      SCI=MIN(SCI,PARM(73)*SMX) 
      X1=(ADRF-PARM(9))/100.
      X2=CV-PARM(10)
      IF(IGO.EQ.0)GO TO 515
      IF(NFA.LT.IFA)GO TO 515
      IF(BFT.GE.1..AND.TNOR.LT.BFT)CALL NFERT(4,JT1)
  515 IPST=IPST+1
      IF(TMN.LE.0.)GO TO 39
      IF(X1.GT.0..AND.X2.GT.0.)PSTS=PSTS+RHD*TX
      GO TO 40
   39 PSTS=PSTS+TMN
   40 IF(NSTP.NE.IDA)GO TO 200
      IF(IY.NE.IGSD)GO TO 200
      IF(ICCD.GT.0)GO TO 559
      IGSD=IGSD+1
      IYR=IYR-1
      ICCD=1
      GO TO 200
  559 CALL REALS
      IF(ISTP.EQ.1)GO TO 88
  200 CALL NEVN
      CALL NEVP
      CALL SLTEV
C  UNC BIOLOGICAL MIXING SET TO DECEMBER 15
      IF(JDA==350)GO TO 7056
	GO TO 7057     
 7056 DMX=MIN(PARM(24),Z(LID(NBSL)))
      IF(DMX.GT.Z(LD1).AND.LUN.NE.35)CALL TMIX(PARM(25),DMX,1)
 7057 CONTINUE


C Added by RICEU for new N VARS
      VAR(115)=SNITNOX
      VAR(116)=SNITNO
      VAR(117)=SNITN2O
      VAR(118)=SHONO
      VAR(119)=SDENITNO
      VAR(120)=SDENITN2O
      VAR(121)=SNITNO+SDENITNO
      VAR(122)=SNITN2O+SDENITN2O
      VAR(123)=SNITNO+SDENITNO+SHONO  

C  UNC
      VAR(47)=SNMN
      VAR(48)=SGMN
      VAR(49)=SDN
	VAR(89)=SN2
      VAR(56)=SMP
      VAR(52)=SVOL
      VAR(51)=SNIT
      VAR(11)=AET
      VAR(14)=QD
      VAR(34)=YSD(1)
      VAR(44)=QNO3
      VAR(46)=SSO3(LNS)
      VAR(55)=QAP
      VAR(45)=TSFN
      VAR(71)=TSFS
      VAR(80)=TSFK      
      VARS(1)=TNH3
      VARS(2)=TNO3
      VARS(3)=TAP
      VARS(4)=TSK
      VARS(5)=SNO
      VARS(6)=RZSW
      VARS(7)=WTBL
      VARS(8)=GWST
      VARS(9)=STD+STDO
      VARS(10)=RSD(LD1)
      VARS(11)=OCPD
      VARS(12)=TOC
      VARS(13)=ZLS
      VARS(14)=ZLM
      VARS(15)=ZLSL
      VARS(16)=ZLSC
      VARS(17)=ZLMC
      VARS(18)=ZLSLC
      VARS(19)=ZLSLNC
      VARS(20)=ZBMC
      VARS(21)=ZHSC
      VARS(22)=ZHPC
      VARS(23)=ZLSN
      VARS(24)=ZLMN
      VARS(25)=ZBMN
      VARS(26)=ZHSN
      VARS(27)=ZHPN
      VARS(28)=TWN
      VARS(29)=TSLT
C	IF(KFL(22).EQ.0)GO TO 585
C     RNO3=VAR(4)*RFNC
C     SUM=TNO3+TNH3+TWN+STDN+STDON+UN1(JJK)
C     WRITE(KW(22),565)IYR,MO,KDA,VAR(4),VAR(10),VAR(11),VAR(13),VAR(14)
C    1,(VAR(K),K=16,20),(VARS(K),K=6,8),RNO3,(VAR(K),K=43,46),VAR(49),
C    2VAR(52),VAR(50),(VAR(K),K=59,61),UN1(JJK),YLN,CPNM(JJK),YLD(JJK),
C    3SUM
C 565 FORMAT(1X,I4,2I2,26F8.2,4X,A4,F8.2,F8.0)
C     DF=SLT0+VAR(69)+VAR(72)-VAR(82)-VAR(71)-VAR(70)-TSLT      
C     IF(ABS(DF).GT.1.E-5)WRITE(KW(1),581)IY,MO,KDA,VAR(69),VAR(72),VAR
C    1(82),VAR(71),VAR(70),TSLT,DF
C     SLT0=TSLT
C 581 FORMAT(5X,'#####',I4,2I2,6F10.2,F10.6)
C     CALL NCONT(VMN,VAR(43),VAR(44),VAR(45),VAR(59),TYN,VAR(46),VAR(49)
C    1,VAR(52),VAR(60),VAR(61),VAR(50))
C     CALL NCONT(VAR(78),VAR(79),VAR(80),TYK,VAR(81),VAR(64))
CCC   CALL NCONT
      CALL SPRNT(YTP)
      DO 540 I=1,NBSL
      J=LID(I)
      SMS(2,J)=SMS(2,J)+STMP(J)
  540 CONTINUE
      IF(KFL(15).GT.0)CALL SOCIOD(KDA)
      IF(KFL(5).EQ.0)GO TO 510
      IF(NDP.EQ.0)GO TO 510
      II=IY
      IF(NSTP.EQ.0)GO TO 560
      II=IRLX
      IF(IY.NE.IGSD)GO TO 561
  560 DO 511 L=1,NDP
      X1=100.*(VARP(2,L)+VARP(4,L))/(QD+SST+1.E-5)
      WRITE(KW(5),468)IYR,MO,KDA,II,PSTN(L),(VARP(K,L),K=1,10),QD,SST,
     1PKRZ(LNS),X1
  511 CONTINUE
  561 DO 470 L=1,NDP
      DO 470 K=1,10
      VARP(K,L)=0.
  470 CONTINUE
  510 IF(KFL(10).GT.0)WRITE(KW(10),107)IYR,MO,KDA,DD,DST0,(STMP(LID(K)),
     1K=1,NBSL)
      X1=PDSW/FCSW
	X2=1000.*YLD(JJK)
      IF(KFL(17).GT.0)WRITE(KW(17),107)IYR,MO,KDA,X1,(VAR(KD(K)),K=1,NKD
     &),TNO3,WNO3(LD1),PKRZ(LD1),SSO3(LD1),HUI(JJK),SLAI(JJK),DM(JJK),X2
     &,UN1(JJK),(VARS(K),K=23,28)
      IF(KFL(27).GT.0)WRITE(KW(27),682)IYR,MO,KDA,VAR(4),VAR(10),VAR(11)
     1,VAR(13),VAR(14),(VAR(K),K=16,20),(VARS(K),K=6,8)
	CALL SWN1530 
      IF(KFL(28).GT.0)WRITE(KW(28),682)IYR,MO,KDA,SW15,SW30,SNN15,SNN30,
     1SNA15,SNA30,VAR(4),VAR(10),VAR(11),(VAR(K),K=13,20),(VARS(K),K=6,8
     2),(Z(LID(K)),K=1,NBSL),(ST(LID(K)),K=1,NBSL),(U(LID(K)),K=1,NBSL),
     3(SEV(LID(K)),K=1,NBSL),(PKRZ(LID(K)),K=1,NBSL),(SSF(LID(K)),K=1,
     4NBSL),(WNO3(LID(K)),K=1,NBSL),(UN(LID(K)),K=1,NBSL),(SSO3(LID(K)),
     5K=1,NBSL),(STMP(LID(K)),K=1,NBSL)
C   UNC
      HUFRAC=HSM/AHSM
	T1WNO3=VARS(2)-WNO3(LID(1))
	T1WNH3=VARS(1)-WNH3(LID(1))
	T1WON=TWN-WON(LID(1))
	T1AP=VARS(3)-AP(LID(1))
	T1OP=TOP-OP(LID(1))
	T1WOC=VARS(12)-WOC(LID(1))
	T1RNITVWB=VAR(51)-RNITVWB1

C   Not used EPA SOIL MOISTURE - compute first layer to 100mm layer soil water (JimmyW)
      XX=0.
      SW100=0.
      DO K=1,NBSL
          L=LID(K)
          IF(Z(L)<.1)THEN
              SW100=SW100+ST(L)
          ELSE
              RTO=(.1-XX)/(Z(L)-XX)
              SW100=SW100+RTO*ST(L)
              EXIT
          END IF
          XX=Z(L)
      END DO
      SW100=SW100-ST(LID(1))
C   EPA END


C	IF(IYR==2001.AND.MO==12.AND.KDA>21.OR.IYR==2002)WRITE(KWDNC,7576)
C     1ASTN,SITEFILE,WPM1FILE,WINDFILE,SOILFILE,OPSCFILE,YLAT,XLOG,
C     2IYR,MO,KDA,VAR(4),VAR(44),VAR(45),VAR(46),VAR(49),VAR(89),
C     3VAR(52),VAR(85),VAR(50),FTNMVWB,X1VWB,ZFTVWB,X3VWB,X4VWB,
C     4X5VWB,X2VWB,X6VWB,XHSMVWB,
C     5HSM,HUFRAC,Z(LID(1)),BD(LID(1)),WNO3(LID(1)),
C     6WNH3(LID(1)),WON(LID(1)),AP(LID(1)),OP(LID(1)),WOC(LID(1)),
C	7RNITVWB1,Z(LID(2)),BD(LID(2)),WNO3(LID(2)),
C     8WNH3(LID(2)),WON(LID(2)),AP(LID(2)),OP(LID(2)),WOC(LID(2)),
C	9RNITVWB2,Z(LID(NBSL)),ABD,T1WNO3,T1WNH3,T1WON,T1AP,T1OP,T1WOC,
C     &T1RNITVWB,(CPNM(JKK),VARC(8,JKK),VARC(1,JKK),
C     &VARC(2,JKK),VARC(7,JKK),JKK=1,1)

C Comment out by UNC VB for adding SWAT variables
C	IF(IYR==2001.AND.MO==12.AND.KDA>21.OR.IYR==2002)WRITE(KWDNCL,7577)
C     1ASTN,SITEFILE,WPM1FILE,WINDFILE,SOILFILE,OPSCFILE,YLAT,XLOG,
C     2IYR,MO,KDA,VAR(4),VAR(44),VAR(45),VAR(46),VAR(49),VAR(89),
C     3VAR(52),VAR(85),VAR(50),FTNMVWB,X1VWB,ZFTVWB,X3VWB,X4VWB,
C     4X5VWB,X2VWB,X6VWB,XHSMVWB,
C     5HSM,HUFRAC,Z(LID(1)),BD(LID(1)),WNO3(LID(1)),
C     6WNH3(LID(1)),WON(LID(1)),AP(LID(1)),OP(LID(1)),WOC(LID(1)),
C	7RNITVWB1,Z(LID(2)),BD(LID(2)),WNO3(LID(2)),
C     8WNH3(LID(2)),WON(LID(2)),AP(LID(2)),OP(LID(2)),WOC(LID(2)),
C	9RNITVWB2,Z(LID(NBSL)),ABD,T1WNO3,T1WNH3,T1WON,T1AP,T1OP,T1WOC,
C	9T1RNITVWB,(CPNM(JKK),VARC(8,JKK),VARC(1,JKK),
C     &VARC(2,JKK),VARC(7,JKK),JKK=1,1)

C Commented out by RICEU for adding new N VARS
!    UNC-VWB-BARE ESTIMATE OF THE FRACTION OF BARE SOIL FOR WIND EROSION CALCULATIONS
!    WRITE DAILY OUTPUT FOR EACH SIMULATION IN THE RUNFILE
!    UNC-VWB-BARE ESTIMATE OF THE FRACTION OF BARE SOIL FOR WIND EROSION CALCULATIONS
C        IF(IYR==2001.AND.MO==12.AND.KDA>21.OR.IYR==2002)WRITE(KWDNCL,7577)
C     1ASTN,SITEFILE,WPM1FILE,WINDFILE,SOILFILE,OPSCFILE,YLAT,XLOG,
C     2IYR,MO,KDA,VAR(4),VAR(44),VAR(45),VAR(46),VAR(49),VAR(89),
C     3VAR(52),VAR(85),VAR(50),VAR(31),VAR(54),VAR(55),VAR(43),
C     4VAR(42),VAR(14),VAR(62),VAR(63),VAR(56),VAR(53),VAR(16),   
C     5VAR(17),VAR(18),VAR(57),VAR(48),VAR(47),VAR(10),VAR(11),  
C     6VARS(11),VAR(114),XHSMVWB,
C     5HSM,HUFRAC,Z(LID(1)),BD(LID(1)),ST(LID(1)),WNO3(LID(1)),
C     6WNH3(LID(1)),WON(LID(1)),AP(LID(1)),OP(LID(1)),WOC(LID(1)),
C     7RNITVWB1,Z(LID(2)),BD(LID(2)),ST(LID(2)),WNO3(LID(2)),
C     8WNH3(LID(2)),WON(LID(2)),AP(LID(2)),OP(LID(2)),WOC(LID(2)),
C     9RNITVWB2,Z(LID(NBSL)),ABD,T1WNO3,T1WNH3,T1WON,T1AP,T1OP,T1WOC,
C     9T1RNITVWB,
C     &FNHL(2,LID(1)),FNHL(3,LID(1)),FNHL(5,LID(1)),FNHL(4,LID(1)),
C     &FNHL(6,LID(1)),
C     &FNHL(2,LID(2)),FNHL(3,LID(2)),FNHL(5,LID(2)),FNHL(4,LID(2)),
C     &FNHL(6,LID(2)),         
C     &(CPNM(JKK),VARC(8,JKK),VARC(1,JKK), VARC(2,JKK),VARC(7,JKK),JKK=1,1),FBARE


C Modified by RICEU for adding new N VARS
      IF(IYR==2001.AND.MO==12.AND.KDA>21.OR.IYR==2002)WRITE(KWDNCL,7577)
     1ASTN,SITEFILE,WPM1FILE,WINDFILE,SOILFILE,OPSCFILE,YLAT,XLOG,
     2IYR,MO,KDA,VAR(4),VAR(44),VAR(45),VAR(46),VAR(49),VAR(89),
     3VAR(52),VAR(85),VAR(50),VAR(31),VAR(54),VAR(55),VAR(43),
     4VAR(42),VAR(14),VAR(62),VAR(63),VAR(56),VAR(53),VAR(16), 
     5VAR(17),VAR(18),VAR(57),VAR(48),VAR(47),VAR(10),VAR(11), 
     6VARS(11),VAR(114),XHSMVWB,
     5HSM,HUFRAC,Z(LID(1)),BD(LID(1)),ST(LID(1)),WNO3(LID(1)),
     6WNH3(LID(1)),WON(LID(1)),AP(LID(1)),OP(LID(1)),WOC(LID(1)),
     7RNITVWB1,Z(LID(2)),BD(LID(2)),ST(LID(2)),WNO3(LID(2)),
     8WNH3(LID(2)),WON(LID(2)),AP(LID(2)),OP(LID(2)),WOC(LID(2)),
     9RNITVWB2,Z(LID(NBSL)),ABD,T1WNO3,T1WNH3,T1WON,T1AP,T1OP,T1WOC,
     9T1RNITVWB,
     &FNHL(2,LID(1)),FNHL(3,LID(1)),FNHL(5,LID(1)),FNHL(4,LID(1)),
     &FNHL(6,LID(1)),
     &FNHL(2,LID(2)),FNHL(3,LID(2)),FNHL(5,LID(2)),FNHL(4,LID(2)),
     &FNHL(6,LID(2)),
     &(CPNM(JKK),VARC(8,JKK),VARC(1,JKK), VARC(2,JKK),VARC(7,JKK),JKK=1,1),FBARE,
     &VAR(115),VAR(116),VAR(117),VAR(118),VAR(119),VAR(120),VAR(121),
     &VAR(122),VAR(123),X5VWB,VAR(60),X4VWB,
     &PFACTOR(LID(1)),PFACTOR(LID(2)),
     &PFACTOR(LID(3)),PFACTOR(LID(4)),PFACTOR(LID(5)),
     &PFACTOR(LID(6)),PFACTOR(LID(7)),PFACTOR(LID(8)),
     &PFACTOR(LID(9)),PFACTOR(LID(10)),Z(LID(3)),Z(LID(4)),Z(LID(5)),
     &Z(LID(6)),Z(LID(7)),Z(LID(8)),Z(LID(9)),Z(LID(10))


C   ZERO OUT VALUES AFTER PRINTING
	FTNMVWB=BLANK
	X1VWB=0
	ZFTVWB=0
	X3VWB=0
	X4VWB=0
	X5VWB=0
      X2VWB=0
	X6VWB=0
	XHSMVWB=0
	RNITVWB1=0
	RNITVWB2=0
C     ,SMM(4,MO1),SMM(10,MO1),SMM(11,MO1),SMM(13
C     2,MO1),SMM(14,MO1),(SMM(J,MO1),J=16,20),(STV(J,MO1),J=6,8),RNO3,
C     3(SMM(J,MO1),J=43,46),SMM(49,MO1),SMM(89,MO1),SMM(52,MO1),SMM(85,
C     4MO1),SMM(50,MO1),(SMM(J,MO1),J=59,61),UN1(K1),YLNF(1,K1),CPNM(K1),
C     5YLD1(1,K1),SUM,SMMC(1,K1,MO1),SMMC(2,K1,MO1),SMMC(7,K1,MO1)
     
 7576 FORMAT(1X,A16,1X,5A20,2(1X,F8.2,1X),1X,3I4,9(F8.2),1X,
     1A8,F10.1,F10.3,5F10.1,F10.3,
     2F10.0,F10.3,2X,16F8.2,F9.0,F8.2,7F8.2,F9.0,F8.2,2(1X,A4,4F8.2))

C commneted  out by UNC for adding SWAT variables
C 7577 FORMAT(1X,A16,',',5(A20,','),2(1X,F8.2,','),3(I4,','),
C     19(F7.2,','),1X,
C     2A8,',',F9.1,',',F9.3,',',5(F9.1,','),F9.3,',',
C     3F9.0,',',F9.3,',',2X,16(F7.2,','),F8.0,',',F7.2,',',
C     47(F7.2,','),F8.0,',',F7.2,',',
C     &2(A4,',',4(F7.2,',')))

C Commented out by RICEU for adding new N VARS
!    UNC-VWB-BARE ESTIMATE OF THE FRACTION OF BARE SOIL FOR WIND EROSION CALCULATIONS
C 7577 FORMAT(1X,A16,',',5(A20,','),2(1X,F8.2,','),3(I4,','),
C     129(F11.2,','),F11.3,',',F11.0,',',F11.3,',',29(F11.2,','),
C     &10(F11.1,','),
C     &(A4,',',4(F11.2,',')),F11.2)

C Modified by RICEU for adding new N VARS
 7577 FORMAT(1X,A16,',',5(A20,','),2(1X,F8.2,','),3(I4,','),
     129(F11.2,','),F11.3,',',F11.0,',',F11.3,',',29(F11.2,','),
     &10(F11.1,','),
     &(A4,',',5(F11.2,','),12(F11.5,',')),10(F8.5,','),7(F8.2,','),F8.2)


C   UNC
C     IF(IYR.EQ.2002.OR.IYR.EQ.2004)THEN
C     IF((MO.EQ.7.AND.KDA.EQ.29).OR.(MO.EQ.8.AND.KDA.EQ.26).OR.
C	1(MO.EQ.9.AND.KDA.EQ.23).OR.(MO.EQ.10.AND.KDA.EQ.22))
C	2WRITE(KW(82),682)IYR,MO,KDA,SW15,SW30,SNN15,SNN30
C	ENDIF
C     IF(IYR.EQ.2002.AND.((MO.EQ.7.AND.KDA.EQ.11).OR.(MO.EQ.8.AND.
C	1KDA.EQ.12).OR.(MO.EQ.9.AND.KDA.EQ.9).OR.(MO.EQ.10.AND.KDA.EQ.7)
C    2.OR.(MO.EQ.11.AND.KDA.EQ.4)))THEN
C     WRITE(KW(82),682)IYR,MO,KDA,SW15,SW30,SNN15,SNN30
C	ENDIF
C     IF(IYR.EQ.2004.AND.((MO.EQ.6.AND.KDA.EQ.30).OR.
C	1(MO.EQ.7.AND.KDA.EQ.14).OR.(MO.EQ.8.AND.
C	1KDA.EQ.11).OR.(MO.EQ.9.AND.KDA.EQ.7).OR.(MO.EQ.10.AND.KDA.EQ.6)
C     2.OR.(MO.EQ.11.AND.KDA.EQ.3)))THEN
C     WRITE(KW(82),682)IYR,MO,KDA,SW15,SW30,SNN15,SNN30
C	ENDIF
C     YLD(JJK)=0. 
      TNGS=TNO3+TWN+TNH3
	SMGS(2)=SMGS(2)+TNGS
      IF(KFL(21).EQ.0)GO TO 583
      WRITE(KW(21),107)IYR,MO,KDA   
	CALL SPRNT(YTP)
      CALL SOLIO(YTP,21)
  583 IF(IPD.LT.6)GO TO 44
      IF(IPD.LT.9)GO TO 41
      IF(IGO.EQ.0)GO TO 44
   41 IF(IDA.NE.IPC)GO TO 44
      IF(IPD.NE.8)GO TO 512
      IF(RFV.LT.1.)GO TO 44
  512 IF(IPD.EQ.7)GO TO 42
C     PRINTOUT DAILY
      WRITE(KW(1),532)IYR,MO,KDA,(HED(KD(K)),VAR(KD(K)),K=1,NKD)
      DO 530 I=1,NN
      K1=LY(IRO,I)
      IF(KG(K1).EQ.0)GO TO 530
      WRITE(KW(1),105)IYR,MO,KDA,CPNM(K1),(HEDC(K),VARC(K,K1),K=1,18)
  530 CONTINUE
      WRITE(KW(1),532)IYR,MO,KDA,(HEDS(K),VARS(K),K=1,13)
C     WRITE(KW(1),119)(LID(K),K=1,NBSL)
C     WRITE(KW(1),100)(Z(LID(K)),K=1,NBSL)
C     WRITE(KW(1),100)(ST(LID(K)),K=1,NBSL)
C     WRITE(KW(1),100)(S15(LID(K)),K=1,NBSL)
C     WRITE(KW(1),100)(FC(LID(K)),K=1,NBSL)
C     WRITE(KW(1),100)(PO(LID(K)),K=1,NBSL)
C     WRITE(KW(1),100)(BD(LID(K)),K=1,NBSL)
C     WRITE(KW(1),100)(WT(LID(K)),K=1,NBSL)
C     WRITE(KW(1),100)(SAN(LID(K)),K=1,NBSL)
C     WRITE(KW(1),100)(SIL(LID(K)),K=1,NBSL)
C     WRITE(KW(1),100)(ROK(LID(K)),K=1,NBSL)
C     WRITE(KW(1),219)(HK(LID(K)),K=1,NBSL)
C     WRITE(KW(1),100)(WNO3(LID(K)),K=1,NBSL)
C     WRITE(KW(1),100)(WNH3(LID(K)),K=1,NBSL)
C     WRITE(KW(1),100)(AP(LID(K)),K=1,NBSL)
C     WRITE(KW(1),100)(PMN(LID(K)),K=1,NBSL)
C     WRITE(KW(1),100)(OP(LID(K)),K=1,NBSL)
C     WRITE(KW(1),100)(RWT(LID(K),JJK),K=1,NBSL)
C     WRITE(KW(1),100)(SSO3(LID(K)),K=1,NBSL)
C     WRITE(KW(1),100)(WON(LID(K)),K=1,NBSL)
C     WRITE(KW(1),100)(U(LID(K)),K=1,NBSL)
C     WRITE(KW(1),100)(SEV(LID(K)),K=1,NBSL)
C     WRITE(KW(1),100)(PKRZ(LID(K)),K=1,NBSL)
C     WRITE(KW(1),100)(SSF(LID(K)),K=1,NBSL)
C     WRITE(KW(1),100)(UN(LID(K)),K=1,NBSL)
C     WRITE(KW(1),100)(UP(LID(K)),K=1,NBSL)
C     WRITE(KW(1),100)(WP(LID(K)),K=1,NBSL)
C     WRITE(KW(1),100)(FOP(LID(K)),K=1,NBSL)
C     WRITE(KW(1),100)(WSLT(LID(K)),K=1,NBSL)
C     WRITE(KW(1),100)(RSD(LID(K)),K=1,NBSL)
C     WRITE(KW(1),107)IYR,MO,KDA,DD,DST0,(STMP(LID(K)),K=1,NBSL)
      GO TO 43
   42 CALL SPRNT(YTP)
      WRITE(KW(1),107)IYR,MO,KDA
      WRITE(KW(1),101)
      CALL SOLIO(YTP,1)
   43 IPC=IPC+INP
   44 SMM(11,MO)=SMM(11,MO)+AET
      SMM(47,MO)=SMM(47,MO)+SNMN
      SMM(48,MO)=SMM(48,MO)+SGMN
      SMM(49,MO)=SMM(49,MO)+SDN
	SMM(89,MO)=SMM(89,MO)+SN2
      SMM(56,MO)=SMM(56,MO)+SMP
      SMM(52,MO)=SMM(52,MO)+SVOL
      SMM(51,MO)=SMM(51,MO)+SNIT
      SMM(14,MO)=SMM(14,MO)+QD
      SMM(34,MO)=SMM(34,MO)+YSD(1)
      SMM(44,MO)=SMM(44,MO)+QNO3
      SMM(46,MO)=SMM(46,MO)+SSO3(LNS)
      SMM(55,MO)=SMM(55,MO)+QAP
      SMM(45,MO)=SMM(45,MO)+TSFN
      SMM(80,MO)=SMM(80,MO)+TSFK
      SMM(71,MO)=SMM(71,MO)+TSFS
C    RICEU
      SMM(115,MO)=SMM(115,MO)+SNITNOX
      SMM(116,MO)=SMM(116,MO)+SNITNO
      SMM(117,MO)=SMM(117,MO)+SNITN2O
      SMM(118,MO)=SMM(118,MO)+SHONO
      SMM(119,MO)=SMM(119,MO)+SDENITNO
      SMM(120,MO)=SMM(120,MO)+SDENITN2O
      SMM(121,MO)=SMM(121,MO)+SNITNO+SDENITNO
      SMM(122,MO)=SMM(122,MO)+SNITN2O+SDENITN2O
      SMM(123,MO)=SMM(123,MO)+SNITNO+SDENITNO+SHONO
C    RICEU END     

      IF(IDA.NE.NSTP+NT1)GO TO 47
      IF(NGN.GT.0)GO TO 47
      IGN=IGN+100
      DO 46 KK=1,IGN
      DO 46 J=1,20
      XX=AUNIF(21)
   46 IX(J)=IX(21)
   47 JRT=0
      IF(YERO.GT.1.E-5.AND.ISTA.EQ.0)CALL ESLOS(JRT)
      IF(JRT.GT.0)GO TO 88
      JDA=IDA+1
C     RICEU TIMER
      NSTEP=NSTEP+1  
      CALL AXMON(JDA,MO)
      IF(MO.EQ.MO1)GO TO 84
      PMOEO=SMM(10,MO1)
      PMORF=SMM(4,MO1)-SMM(14,MO1)
      XX=IDA-JJ
C     X2=.1/(ABD*Z(LNS))
      STV(1,MO1)=TNH3
      STV(2,MO1)=TNO3
      STV(4,MO1)=TSK
      STV(5,MO1)=SNO
      STV(6,MO1)=RZSW
      STV(7,MO1)=WTBL
      STV(8,MO1)=GWST
      STV(11,MO1)=OCPD
      STV(12,MO1)=.001*TOC
      STV(13,MO1)=.001*ZLS
      STV(14,MO1)=.001*ZLM
      STV(15,MO1)=.001*ZLSL
      STV(16,MO1)=.001*ZLSC
      STV(17,MO1)=.001*ZLMC
      STV(18,MO1)=.001*ZLSLC
      STV(19,MO1)=.001*ZLSLNC
      STV(20,MO1)=.001*ZBMC
      STV(21,MO1)=.001*ZHSC
      STV(22,MO1)=.001*ZHPC
      STV(23,MO1)=.001*ZLSN
      STV(24,MO1)=.001*ZLMN
      STV(25,MO1)=.001*ZBMN
      STV(26,MO1)=.001*ZHSN
      STV(27,MO1)=.001*ZHPN
      STV(28,MO1)=.001*TWN
      STV(29,MO1)=TSLT
	IF(KFL(6).EQ.0)GO TO 472
      I1=IY
      IF(NSTP.EQ.0)GO TO 473
      I1=IRLX
      IF(IY.NE.IGSD)GO TO 472
  473 WRITE(KW(6),475)IYR,MO1,I1,(SMM(IFS(J),MO1),J=1,NFS),(STV(K,MO1),
     1K=4,6)
  472 DO 118 K=1,NN
      K1=LY(IRO,K)
      IF(KG(K1).EQ.0)GO TO 50
      SMMC(1,K1,MO1)=HUI(K1)
      SMMC(2,K1,MO1)=SLAI(K1)
      SMMC(3,K1,MO1)=RD(K1)
      SMMC(4,K1,MO1)=RW(K1)
      SMMC(5,K1,MO1)=DM(K1)
      SMMC(6,K1,MO1)=STL(K1)
      SMMC(7,K1,MO1)=CHT(K1)
      SMMC(8,K1,MO1)=UN1(K1)
      SMMC(9,K1,MO1)=UP1(K1)
      SMMC(10,K1,MO1)=UK1(K1)
      TSTL(MO1)=TSTL(MO1)+STL(K1)
      IF(KFL(11).EQ.0)GO TO 50
      II=IY
      IF(NSTP.EQ.0)GO TO 543
      II=IRLX
      IF(IY.NE.IGSD)GO TO 50
  543 WRITE(KW(11),523)IYR,MO1,II,CPNM(K1),(SFMO(J,K1),J=1,7),RZSW,SMM(4
     1,MO1),SMM(11,MO1),SMM(14,MO1),SMM(17,MO1),SMM(16,MO1)
   50	IF(KFL(22).EQ.0)GO TO 585
      RNO3=SMM(4,MO1)*RFNC
      SUM=TNO3+TNH3+TWN+STDN+STDON+UN1(K1)
	WRITE(KW(22),565)IYR,MO1,SMM(4,MO1),SMM(10,MO1),SMM(11,MO1),SMM(13
     1,MO1),SMM(14,MO1),(SMM(J,MO1),J=16,20),(STV(J,MO1),J=6,8),RNO3,
     2(SMM(J,MO1),J=43,46),SMM(49,MO1),SMM(89,MO1),SMM(52,MO1),SMM(85,
     3MO1),SMM(50,MO1),(SMM(J,MO1),J=59,61),UN1(K1),YLNF(1,K1),CPNM(K1),
     4YLD1(1,K1),SUM

C Commented out by RICEU for adding new N VARS	 
C    TENN
C	IF(KFL(37).GT.0)WRITE(KWNCM,7566)ASTN,SITEFILE,WPM1FILE,WINDFILE,
C     1SOILFILE,OPSCFILE,YLAT,XLOG,
C     2IYR,MO1,SMM(4,MO1),SMM(10,MO1),SMM(11,MO1),SMM(13
C     2,MO1),SMM(14,MO1),(SMM(J,MO1),J=16,20),(STV(J,MO1),J=6,8),RNO3,
C     3(SMM(J,MO1),J=43,46),SMM(49,MO1),SMM(89,MO1),SMM(52,MO1),SMM(85,
C     4MO1),SMM(50,MO1),(SMM(J,MO1),J=59,61),UN1(K1),YLNF(1,K1),CPNM(K1),
C     5YLD1(1,K1),SUM,SMMC(1,K1,MO1),SMMC(2,K1,MO1),SMMC(7,K1,MO1)

C Modified by RICEU for adding new N VARS	 
	IF(KFL(37).GT.0)WRITE(KWNCM,7566)ASTN,SITEFILE,WPM1FILE,WINDFILE,
     1SOILFILE,OPSCFILE,YLAT,XLOG,
     2IYR,MO1,SMM(4,MO1),SMM(10,MO1),SMM(11,MO1),SMM(13
     2,MO1),SMM(14,MO1),(SMM(J,MO1),J=16,20),(STV(J,MO1),J=6,8),RNO3,
     3(SMM(J,MO1),J=43,46),SMM(49,MO1),SMM(89,MO1),SMM(52,MO1),SMM(85,
     4MO1),SMM(50,MO1),(SMM(J,MO1),J=59,61),UN1(K1),YLNF(1,K1),CPNM(K1),
     5YLD1(1,K1),SUM,SMMC(1,K1,MO1),SMMC(2,K1,MO1),SMMC(7,K1,MO1),
     6(SMM(J,MO1),J=115,123)


C	WRITE(KWDNC,7566)ASTN,SITEFILE,WPM1FILE,WINDFILE,SOILFILE,
C     1OPSCFILE,YLAT,XLOG,
C     2IYR,MO1,SMM(4,MO1),SMM(10,MO1),SMM(11,MO1),SMM(13
C     2,MO1),SMM(14,MO1),(SMM(J,MO1),J=16,20),(STV(J,MO1),J=6,8),RNO3,
C     3(SMM(J,MO1),J=43,46),SMM(49,MO1),SMM(89,MO1),SMM(52,MO1),SMM(85,
C     4MO1),SMM(50,MO1),(SMM(J,MO1),J=59,61),UN1(K1),YLNF(1,K1),CPNM(K1),
C     5YLD1(1,K1),SUM,SMMC(1,K1,MO1),SMMC(2,K1,MO1),SMMC(7,K1,MO1)
     
C     CPNM(K1),(SFMO(J,K1),J=1,7),RZSW,SMM(4
C     3,MO1),SMM(11,MO1),SMM(14,MO1),SMM(17,MO1),SMM(16,MO1)
 7565 FORMAT(1X,A16,1X,5A20,2(1X,F8.2,1X),1X,2I4,28F8.2,4X,A4,F8.2,F8.0)

C Commented out by RICEU for adding new N VARS 
C 7566 FORMAT(1X,A16,1X,5A20,2(1X,F8.2,1X),1X,2I4,28F8.2,4X,A4,F8.2,F8.0,
C     13F8.3)

C Modified by RICEU for adding new N VARS	 
 7566 FORMAT(1X,A16,1X,5A20,2(1X,F8.2,1X),1X,2I4,28F8.2,4X,A4,F8.2,F8.0,
     13F8.3,9F11.5)


C 7523 FORMAT(1X,A16,5A20,2(1X,F8.2,1X),1X,I4,I2,I4,2X,A4,13F8.1)
C    UNC

  585 ISM=0
      DO 48 J=1,7
	KTP(J)=MIN(31.,SFMO(J,K1)+.5)
      ISM=ISM+KTP(J)
   48 SFMO(J,K1)=0.
      IF(ISM.EQ.0)GO TO 118
      CALL ASORTI(KTP,MNST,7)
      KDT(MO1,K1)=KTP(MNST(5))+100*MNST(5)+1000*KTP(MNST(6))+100000*
     1MNST(6)+1000000*KTP(MNST(7))+100000000*MNST(7)
  118 CONTINUE
      IF(KFL(25).EQ.0)GO TO 676
      IF(ISWT.GT.0)GO TO 678
      WRITE(KW(25),680)WSA
      ISWT=1
  678 YTP(1)=SMM(14,MO1)+SMM(16,MO1)+SMM(18,MO1)
      YTP(2)=SMM(NDVSS,MO1)
      YTP(3)=SMM(43,MO1)
      YTP(4)=SMM(54,MO1)
      YTP(5)=SMM(44,MO1)+SMM(45,MO1)+SMM(53,MO1)
      YTP(6)=SMM(55,MO1)
C     YTP(1)=Q+SSF+QDRN(MM)
C     YTP(2)=Y(T/HA)
C     YTP(3)=YON(KG/HA)
C     YTP(4)=YP(KG/HA)
C     YTP(5)=QNO3+SSFN+DRNN(KG/HA)
C     YTP(6)=QAP(KG/HA)
      WRITE(KW(25),679)IY,MO1,YTP
  676 STV(10,MO1)=RSD(LD1)
      STV(9,MO1)=STD+STDO
C     STV(3,MO1)=TAP*X2
      STV(3,MO1)=1000.*AP(LD1)/WT(LD1)
      TXMX(MO1)=TXMX(MO1)+SMM(1,MO1)
      TXMN(MO1)=TXMN(MO1)+SMM(2,MO1)
      TSR(MO1)=TSR(MO1)+SMM(3,MO1)
      SMM(2,MO1)=SMM(2,MO1)/XX
      SMM(1,MO1)=SMM(1,MO1)/XX
      SMM(3,MO1)=SMM(3,MO1)/XX
      SMM(67,MO1)=SMM(67,MO1)/XX
	SMM(68,MO1)=SMM(68,MO1)/XX
      SMM(7,MO1)=SMM(7,MO1)/XX
	TET(MO1)=TET(MO1)+SMM(7,MO1)
      SMM(8,MO1)=SMM(8,MO1)/XX
      SMM(9,MO1)=SMM(9,MO1)/XX
      SMM(39,MO1)=SMM(39,MO1)/XX
      SMM(40,MO1)=SMM(40,MO1)/XX
      X1=NWDA-NWD0+1.E-5
      TAMX(MO1)=TAMX(MO1)+X1
      SMM(38,MO1)=SMM(38,MO1)/X1
      SMM(41,MO1)=SMM(41,MO1)/X1
      NWD0=NWDA
      SSW=SSW/XX
      ASW(MO1)=ASW(MO1)+SSW
      SSW=0.
      TR(MO1)=TR(MO1)+SMM(4,MO1)
      TSN(MO1)=TSN(MO1)+SMM(17,MO1)
      TSY(MO1)=TSY(MO1)+SMM(NDVSS,MO1)
      RSY(MO1)=RSY(MO1)+SMM(36,MO1)
      TYW(MO1)=TYW(MO1)+SMM(42,MO1)
      TQ(MO1)=TQ(MO1)+SMM(14,MO1)
      SET(MO1)=SET(MO1)+SMM(10,MO1)
      TRHT(MO1)=TRHT(MO1)+SMM(39,MO1)
      JJ=IDA
      DO 51 K=1,NSM
      SMY(K)=SMY(K)+SMM(K,MO1)
   51 CONTINUE
      IF(NDP.EQ.0)GO TO 53
      DO 52 K=1,NDP
      SMMP(8,K,MO1)=PFOL(K)
      DO 136 K1=1,7
  136 SMYP(K1,K)=SMYP(K1,K)+SMMP(K1,K,MO1)
   52 SMYP(10,K)=SMYP(10,K)+SMMP(10,K,MO1)
   53 W(MO1)=W(MO1)+SMM(29,MO1)
      RCM(MO1)=RCM(MO1)+SMM(37,MO1)
      TEI(MO1)=TEI(MO1)+SMM(28,MO1)
	X1=SMM(28,MO1)+1.E-10
      SMM(29,MO1)=SMM(29,MO1)/X1
      SMM(37,MO1)=SMM(37,MO1)/X1
      SMM(83,MO1)=SMM(83,MO1)/X1
	SMM(90,MO1)=SMM(90,MO1)/X1
	SMM(91,MO1)=SMM(91,MO1)/X1
      X1=JCN-JCN0
	IF(X1.GT.0.)SMM(15,MO1)=SMM(15,MO1)/X1
      X1=NQP-NQP0
	IF(X1.GT.0.)SMM(58,MO1)=SMM(58,MO1)/X1
      NQP0=NQP
      JCN0=JCN
C	IF(KFL(6).GT.0)WRITE(KW(6),562)IYR,MO1,(SMM(KA(I),MO1),I=1,NKA)
      IF(MASP.LE.0)GO TO 152
      PPX(MO1)=SMM(44,MO1)
      CALL ACOUT(PPX(MO1),SMM(14,MO1),1000.)
      SMM(44,MO1)=PPX(MO1)
      PPX(MO1)=SMM(45,MO1)
      CALL ACOUT(PPX(MO1),SMM(16,MO1),1000.)
      SMM(45,MO1)=PPX(MO1)
      PPX(MO1)=SMM(46,MO1)
      CALL ACOUT(PPX(MO1),SMM(17,MO1),1000.)
      SMM(46,MO1)=PPX(MO1)
      PPX(MO1)=SMM(55,MO1)
      CALL ACOUT(PPX(MO1),SMM(14,MO1),1000.)
      SMM(55,MO1)=PPX(MO1)
C     WRITE MO VALUES AND SUM YEARLY VALUES
  152 IF(MO.GT.MO1)GO TO 83
      IF(LMS.GT.0)GO TO 566
      CALL NLIME
      IF(TLA.LT.1.E-5)GO TO 566
      X3=TLA*COL
      COST=COST+X3
      X1=COTL(IAUL)
      X2=X1-COOP(IAUL)
      COST=COST+X1
      CSFX=CSFX+X2
	SMM(92,MO1)=SMM(92,MO1)+FULU(IAUL)
	SMY(92)=SMY(92)+FULU(IAUL)
      IF(KFL(20).EQ.0)GO TO 566
      WRITE(KW(20),567)IYR,MO1,KDA,KDC(JJK),X3,X3,TLA
      WRITE(KW(20),666)IYR,MO1,KDA,TIL(IAUL),KDC(JJK),IHC(IAUL),NBE
     1(IAUL),NBT(IAUL),X1,X2,FULU(IAUL)
  566 SMM(66,MO1)=SMM(66,MO1)+TLA
      SMY(66)=TLA
      VAR(66)=TLA
C     CALL NCONT(0.,SMY(54),SMY(49),0.,SMY(62),TYP,SMY(57),0.,0.,SMY(63)
C    1,0.,0.)
C     RNO3=SMY(4)*RFNC
C     FTN=TNO3+TWN+STDN+STDON+UN1(JJK)
C     TYN1=TYN-TYN1
C     WRITE(KW(1),125)TNO3,TWN,STDN,STDON,UN1(JJK),TYN1,TYN
C     CALL NBL(BTN,RNO3,SMY(43),SMY(44),SMY(45),SMY(46),SMY(49),SMY(59),
C    1TYN1,SMY(52),SMY(60),SMY(61),SMY(50),FTN)
C     TYN1=TYN
C     TYK1=TYK-TYK1
C     CALL NCONT(SMY(78),SMY(79),SMY(80),TYK1,SMY(81),SMY(64))
C     TYK1=TYK
      SMY(1)=SMY(1)/12.
      SMY(2)=SMY(2)/12.
      SMY(3)=SMY(3)/12.
      SMY(7)=SMY(7)/12.
      SMY(8)=SMY(8)/12.
      SMY(9)=SMY(9)/12.
      SMY(67)=SMY(67)/12.
	SMY(68)=SMY(68)/12.
      SMY(39)=SMY(39)/12.
      SMY(40)=SMY(40)/12.
      SMY(41)=SMY(41)/12.
      DO 54 K=1,NSM
      SM(K)=SM(K)+SMY(K)
   54 CONTINUE
      IF(NDP.EQ.0)GO TO 56
      DO 55 K=1,NDP
	DO 137 L=1,7
  137 SMAP(L,K)=SMAP(L,K)+SMYP(L,K)
   55 SMAP(10,K)=SMAP(10,K)+SMYP(10,K)
   56 DMX=MIN(PARM(24),Z(LID(NBSL)))
C  UNC CHANGE TMIX DAY FROM DECEMBER 31
C      IF(DMX.GT.Z(LD1).AND.LUN.NE.35)CALL TMIX(PARM(25),DMX,1)
C  UNC
	X1=SMY(28)+1.E-10
      SMY(29)=SMY(29)/X1
      SMY(37)=SMY(37)/X1
	SMY(90)=SMY(90)/X1
	SMY(91)=SMY(91)/X1
      IF(MASP.LE.0)GO TO 151
      PPX(1)=SMY(44)
      PPX(2)=SMY(45)
      PPX(3)=SMY(46)
      PPX(4)=SMY(49)
      CALL ACOUT(PPX(1),SMY(14),1000.)
      CALL ACOUT(PPX(2),SMY(16),1000.)
      CALL ACOUT(PPX(3),SMY(17),1000.)
      CALL ACOUT(PPX(4),SMY(14),1000.)
      SMY(44)=PPX(1)
      SMY(45)=PPX(2)
      SMY(46)=PPX(3)
      SMY(49)=PPX(4)
  151 X1=JCN-JCN1
      SMY(15)=SMY(15)/(X1+1.E-20)
      JCN1=JCN
      X1=NQP-NQP1
      SMY(58)=SMY(58)/(X1+1.E-20)
      NQP1=NQP
      IF(KFL(7).EQ.0)GO TO 537
      DO 538 K=1,NDP
      WRITE(KW(7),462)PSTN(K)
      DO 476 L=1,5
      WRITE(KW(7),143)HEDP(L),(SMMP(L,K,J),J=1,12),SMYP(L,K),HEDP(L)
  476 CONTINUE
  538 CONTINUE
  537 IF(KFL(26).EQ.0)GO TO 684
      WRITE(KW(26),681)IY,IYR,SMY(14),SMY(16),SMY(17),
     1SMY(18),SMY(NDVSS),SMY(77),(PSTN(K),(SMYP(J,K),J=1,7),SMYP(10,K),
     2APQC(2,K,IY),K=1,NDP)
  684 II=0
     	WRITE(KW(1),582)CO2
      IF(IY.NE.IPY)GO TO 71
      II=IPYI
      IF(IPD.LE.2)GO TO 69
	IF(NDP.EQ.0.OR.MASP.LT.0)GO TO 63
      DO 62 K=1,NDP
      IF(K.NE.6.AND.K.NE.1)GO TO 57
      CALL APAGE(1)
      WRITE(KW(1),112)
      WRITE(KW(1),99)IYR,IY
   57 WRITE(KW(1),111)PSTN(K)
      IF(MASP.EQ.0)GO TO 142
      WRITE(KW(1),113)HEDP(1),(SMMP(1,K,J),J=1,12),SMYP(1,K),HEDP(1)
      DO 58 L=1,12
      PPX(L)=SMMP(2,K,L)
   58 CALL ACOUT(PPX(L),SMM(14,L),1.)
      PPX(13)=SMYP(2,K)
      CALL ACOUT(PPX(13),SMY(14),1.)
      WRITE(KW(1),109)HEDP(2),(PPX(J),J=1,13),HEDP(2)
      DO 59 L=1,12
      PPX(L)=SMMP(3,K,L)
   59 CALL ACOUT(PPX(L),SMM(17,L),1.)
      PPX(13)=SMYP(3,K)
      CALL ACOUT(PPX(13),SMY(17),1.)
      WRITE(KW(1),109)HEDP(3),(PPX(J),J=1,13),HEDP(3)
      DO 60 L=1,12
      PPX(L)=SMMP(4,K,L)
   60 CALL ACOUT(PPX(L),SMM(16,L),1.)
      PPX(13)=SMYP(4,K)
      CALL ACOUT(PPX(13),SMY(16),1.)
      WRITE(KW(1),109)HEDP(4),(PPX(J),J=1,13),HEDP(4)
      DO 61 L=5,7
   61 WRITE(KW(1),113)HEDP(L),(SMMP(L,K,J),J=1,12),SMYP(L,K),HEDP(L)
      DO 134 L=8,9
  134 WRITE(KW(1),114)HEDP(L),(SMMP(L,K,J),J=1,12),HEDP(L)
      DO 135 L=1,12
      PPX(L)=SMMP(10,K,L)
  135 CALL ACOUT(PPX(L),SMM(18,L),1.)
      PPX(13)=SMYP(10,K)
      CALL ACOUT(PPX(13),SMY(18),1.)
      WRITE(KW(1),109)HEDP(10),(PPX(J),J=1,13),HEDP(10)
      GO TO 62
  142 DO 144 L=1,7
C     PRINTOUT PESTICIDE MONTHLY
  144 WRITE(KW(1),143)HEDP(L),(SMMP(L,K,J),J=1,12),SMYP(L,K),HEDP(L)
      DO 145 L=8,9
  145 WRITE(KW(1),146)HEDP(L),(SMMP(L,K,J),J=1,12),HEDP(L)
      WRITE(KW(1),143)HEDP(10),(SMMP(10,K,J),J=1,12),SMYP(10,K),HEDP(10)
   62 CONTINUE
      DO 461 K=1,NDP
      WRITE(KW(1),462)PSTN(K)
      WRITE(KW(1),463)(APQ(I,K,IY),I=1,5)
      WRITE(KW(1),464)(AQB(I,K,IY),I=1,5)
      WRITE(KW(1),465)(APY(I,K,IY),I=1,5)
  461 WRITE(KW(1),466)(AYB(I,K,IY),I=1,5)
   63 CALL APAGE(1)
      WRITE(KW(1),102)IYR,IY
      IF(NKA.EQ.0)GO TO 65
      DO 64 J=1,NKA
      K=KA(J)
C     PRINTOUT MONTHLY
      WRITE(KW(1),104)HED(K),(SMM(K,L),L=1,12),SMY(K),HED(K)
   64 CONTINUE
      WRITE(KW(1),108)'WIDX',(IWIX(L),L=1,12),'WIDX'
   65 IF(NJC.EQ.0)GO TO 67
      DO 66 J=1,NJC
      K=JC(J)
      WRITE(KW(1),109)HED(K),(SMM(K,L),L=1,12),SMY(K),HED(K)
   66 CONTINUE
   67 IF(NKS.EQ.0)GO TO 71
      DO 68 J=1,NKS
      K=KS(J)
      WRITE(KW(1),95)HEDS(K),(STV(K,L),L=1,12),HEDS(K)
   68 CONTINUE
      GO TO 71
C     PRINTOUT ANNUAL
   69 WRITE(KW(1),96)IYR,(HED(KYA(K)),SMY(KYA(K)),K=1,NKYA)
   71 K=1
      N2=NN
	FGIS=0.
	YGIS=0.
	BGIS=0.
	WGIS=0.
	YLNG=0.
	YLPG=0.
	YLKG=0.
	HGIS=0.
	WSGS=0.
	SNGS=0.
	SPGS=0.
	STGS=0.
	SAGS=0.
	SSGS=0.
   80 IF(K.NE.1.AND.K.NE.6)GO TO 20
      CALL APAGE(1)
      WRITE(KW(1),102)IYR,IY
   20 J=LY(IRO,K)
      IYH(J)=IYH(J)+1
      N1=MAX0(1,NCP(J))
      DO 72 L=1,18
C     PRINTOUT CROP MONTHLY
      WRITE(KW(1),95)HEDC(L),(SMMC(L,J,K1),K1=1,12),HEDC(L)
      DO 22 K1=1,12
   22 SMMC(L,J,K1)=0.
   72 CONTINUE
      DO 531 K1=1,N1
      DO 531 L=1,7
      TSFC(L,J)=TSFC(L,J)+SF(L,K1,J)
  531 CONTINUE
      WRITE(KW(1),108)'STRS',(KDT(L,J),L=1,12),'STRS'
	J1=N1
   76 IF(CAW(J1,J).GT.0.)GO TO 75
      CAW(J1,J)=AWC
      AWC=0.
      CRF(J1,J)=ARF
      ARF=0.
      CQV(J1,J)=AQV
      AQV=0.
C     IF(IDC(J).EQ.NDC(1).OR.IDC(J).EQ.NDC(2).OR.IDC(J).EQ.NDC(4).OR.IDC
C    1(J).EQ.NDC(5).OR.IDC(J).EQ.NDC(9))GO TO 568
      JP(J)=0
   75 TCAW(J)=TCAW(J)+CAW(J1,J)
      TCQV(J)=TCQV(J)+CQV(J1,J)
      TCRF(J)=TCRF(J)+CRF(J1,J)
      J1=J1-1
      IF(J1.GE.1)GO TO 76
      DO 521 J1=1,N1
      IF(ETG(J1,J).GT.0.)GO TO 73
      ETG(J1,J)=ACET(J)
	GO TO 74
   73	ETGS=ETG(J1,J)
      SMGS(3)=SMGS(3)+ETGS
   74 XTP(1,J1,J)=YLD1(J1,J)*PRYG(J)
      XTP(2,J1,J)=YLD2(J1,J)*PRYF(J)
      VALF1=XTP(1,J1,J)+VALF1+XTP(2,J1,J)
	IF(ETG(J1,J).GT..1)GO TO 688
	XTP(3,J1,J)=0.
	GO TO 689
  688 XTP(3,J1,J)=1000.*(YLD1(J1,J)+YLD2(J1,J))/ETG(J1,J)
  689 XX=NPSF(J1,J)
      TPSF(J1,J)=TPSF(J1,J)/(XX+1.E-10)
	YGIS=AMAX1(YGIS,YLD1(J1,J))
	SMGS(1)=SMGS(1)+YGIS
	BGIS=AMAX1(BGIS,DMF(J1,J))
	WGIS=AMAX1(WGIS,XTP(3,J1,J))
	FGIS=AMAX1(FGIS,FRTN(J1,J))
	SMGS(5)=SMGS(5)+FGIS
	YLNG=AMAX1(YLNG,YLNF(J1,J))
	YLPG=AMAX1(YLPG,YLPF(J1,J))
	YLKG=AMAX1(YLKG,YLKF(J1,J))
	HGIS=AMAX1(HGIS,HIF(J1,J))
	SMGS(7)=SMGS(7)+HGIS
	WSGS=AMAX1(WSGS,SF(1,J1,J))
	SNGS=AMAX1(SNGS,SF(2,J1,J))
	SPGS=AMAX1(SPGS,SF(3,J1,J))
	STGS=AMAX1(STGS,SF(5,J1,J))
	SAGS=AMAX1(SAGS,SF(6,J1,J))
	SSGS=AMAX1(SSGS,SF(7,J1,J))
      IF(IY==IPY)THEN
                IF(CSTF(J1,J)<1.E-10)THEN
                        CSTF(J1,J)=COST
                        CSOF(J1,J)=COST-CSFX
                        COST=0.
                        CSFX=0.
                END IF
          IF(IDC(J)==NDC(7).OR.IDC(J)==NDC(8).OR.IDC(J)==NDC(10))THEN
                        X1=.0001*PPL0(J)
                ELSE
                        X1=PPL0(J)
                END IF
C     PRINTOUT CROP ANNUAL
      WRITE(KW(1),106)CPNM(J),YLD1(J1,J),YLD2(J1,J),DMF(J1,J),YLNF(J1,J)
     1,YLPF(J1,J),YLKF(J1,J),FRTN(J1,J),FRTP(J1,J),FRTK(J1,J),VIR(J1,J),
     2VIL(J1,J),CAW(J1,J),XTP(3,J1,J),PPL0(J),TPSF(J1,J),CSTF(J1,J),CSOF
     3(J1,J),XTP(1,J1,J),XTP(2,J1,J),EK,REK,WK
      WRITE(KW(1),97)(SF(L,J1,J),L=1,7)
      TSMQ=0.
      TSMY=0.
        END IF
   78 TDM(J)=TDM(J)+DMF(J1,J)
      TYL1(J)=TYL1(J)+YLD1(J1,J)
      TYL2(J)=TYL2(J)+YLD2(J1,J)
      TYLN(J)=TYLN(J)+YLNF(J1,J)
      TYLP(J)=TYLP(J)+YLPF(J1,J)
      TYLK(J)=TYLK(J)+YLKF(J1,J)
      IF(YLNF(J1,J).LT.1.E-5)GO TO 467
      NYLN(J)=NYLN(J)+1
      XX=NYLN(J)
      X1=XX+1.
      X2=AMAX1(1.,BLYN(J),1.1*SF(2,J1,J))
      UNA(J)=MIN(1000.,UNA(J)*(PARM(28)/(1.-SF(2,J1,J)/X2))**2)
	X3=UNA(J)
	ULYN(J)=(ULYN(J)*XX+YLNF(J1,J))/X1
	UNA(J)=PARM(46)*UNA(J)+(1.-PARM(46))*ULYN(J)
C     WRITE(KW(1),677)J,J1,SF(2,J1,J),BLYN(J),X2,X3,ULYN(J),UNA(J)
C 677 FORMAT(1X,'!!!!!',2I4,7F10.3)
  467 TRD(J)=TRD(J)+RDF(J)
      THU(J)=THU(J)+HUF(J)
      TETG(J)=TETG(J)+ETG(J1,J)
      TVIR(J)=TVIR(J)+VIR(J1,J)
      TIRL(J)=TIRL(J)+VIL(J1,J)
      CST1=CST1+CSTF(J1,J)
      CSO1=CSO1+CSOF(J1,J)
      TFTN(J)=TFTN(J)+FRTN(J1,J)
      TFTP(J)=TFTP(J)+FRTP(J1,J)
      TFTK(J)=TFTK(J)+FRTK(J1,J)
      TCST(J)=TCST(J)+CSTF(J1,J)
      TCSO(J)=TCSO(J)+CSOF(J1,J)
      TVAL(J)=TVAL(J)+XTP(1,J1,J)+XTP(2,J1,J)
      PSTM(J)=PSTM(J)+TPSF(J1,J)
  521 CONTINUE
      IF(N1.GT.1)N2=N2-1
      K=K+1
      IF(K.LE.N2)GO TO 80
      VIRT=0.
      DARF=DARF+SMY(4)*SMY(4)
      IF(SMY(4)>BARF)BARF=SMY(4)
      IF(SMY(4)<SARF)SARF=SMY(4)
C     PRINTOUT ANNUAL FILE
      X1=.001*TOC
C    TENN CAPTURE TOTAL CARBON VALUE
      TOCVWB=X1
C    TENN
      IF(NSTP.EQ.0)GO TO 556
	IF(IY.NE.IGSD)GO TO 555
      K=IRTC
      L1=LY(IRO,K)
      J=MAX0(1,NHV(L1))


	WRITE(KW(2),498)IYR,IRLX,SMY(4),SMY(10),SMY(11),SMY(14),SMY(16),
     1SMY(17),SMY(29),SMY(33),SMY(42),SMY(48),SMY(47),SMY(50),SMY(51),
     2SMY(52),SMY(49),SMY(43),SMY(44),SMY(45),SMY(46),SMY(56),SMY(54),
     3SMY(55),SMY(57),TLA,OCPD,X1,APBC,TAP,TNO3
      IF(KFL(19).EQ.0)GO TO 555
      WRITE(KW(19),558)IYR,IRLX,CPNM(L1),YLD1(J,L1),YLD2(J,L1),HIF(J,L1)
     1,DMF(J,L1),YLNF(J,L1),YLPF(J,L1),FRTN(J,L1),FRTP(J,L1),VIR(J,L1),
     2VIL(J,L1),XTP(3,J,L1),ETG(J,L1),CAW(J,L1),CRF(J,L1),CQV(J,L1),CSTF
     3(J,L1),CSOF(J,L1),XTP(1,J,L1),XTP(2,J,L1),TPSF(J,L1),(SF(L,J,L1),
     4L=1,7),PPL0(L1),IPLD(J,L1),IGMD(J,L1),IHVD(J,L1),(PSTN(I),TPAC(L1,
     5I),I=1,10)
      IF(J.EQ.1)GO TO 555
      J1=J-1
      IPLD(J1,L1)=IPLD(J,L1)
      IGMD(J1,L1)=IGMD(J,L1)
      GO TO 555
  556 IF(KFL(2).GT.0)WRITE(KW(2),498)IYR,IY,SMY(4),SMY(10),SMY(11),SMY
     1(14),SMY(16),SMY(17),SMY(29),SMY(33),SMY(42),SMY(48),SMY(47),SMY
     2(50),SMY(51),SMY(52),SMY(49),SMY(43),SMY(44),SMY(45),SMY(46),SMY
     3(56),SMY(54),SMY(55),SMY(57),TLA,OCPD,X1,APBC,TAP,TNO3

C    TENN
	K=1
	N2=NN
      J=LY(IRO,K)
      N1=MAX0(1,NCP(J))
	J1=1
C     CALCULATE AVERAGES FOR LAST 5 YEARS
      IF(IYR.LT.1998) GO TO 1999 
      OUT(1)=OUT(1)+SMY(4)/5
	OUT(2)=OUT(2)+SMY(10)/5
	OUT(3)=OUT(3)+SMY(11)/5
	OUT(4)=OUT(4)+SMY(14)/5
	OUT(5)=OUT(5)+SMY(16)/5
	OUT(6)=OUT(6)+SMY(17)/5
	OUT(7)=OUT(7)+SMY(35)/5
	OUT(8)=OUT(8)+SMY(33)/5
	OUT(9)=OUT(9)+SMY(42)/5
	OUT(10)=OUT(10)+SMY(48)/5
	OUT(11)=OUT(11)+SMY(47)/5
	OUT(12)=OUT(12)+SMY(50)/5
	OUT(13)=OUT(13)+SMY(51)/5
	OUT(14)=OUT(14)+SMY(52)/5
	OUT(15)=OUT(15)+SMY(49)/5
	OUT(16)=OUT(16)+SMY(43)/5
	OUT(17)=OUT(17)+SMY(44)/5
	OUT(18)=OUT(18)+SMY(45)/5
	OUT(19)=OUT(19)+SMY(46)/5
	OUT(20)=OUT(20)+SMY(59)/5
	OUT(21)=OUT(21)+SMY(60)/5
	OUT(22)=OUT(22)+SMY(61)/5
	OUT(23)=OUT(23)+SMY(62)/5
	OUT(24)=OUT(24)+SMY(63)/5
	OUT(25)=OUT(25)+SMY(56)/5
	OUT(26)=OUT(26)+SMY(54)/5
	OUT(27)=OUT(27)+SMY(55)/5
	OUT(28)=OUT(28)+SMY(57)/5
	OUT(29)=OUT(29)+SMY(66)/5
	OUT(30)=OUT(30)+SMY(77)/5
	OUT(31)=OUT(31)+OCPD/5
	OUT(32)=OUT(32)+APBC/5
	OUT(33)=OUT(33)+TOCVWB/5
	OUT(34)=OUT(34)+TAP/5
	OUT(35)=OUT(35)+TNO3/5
	OUT(36)=OUT(36)+SMY(89)/5
        OUT(37)=OUT(37)+SMY(18)/5                                 
        OUT(38)=OUT(38)+SMY(31)/5                              
        OUT(39)=OUT(39)+SMY(53)/5                            
        OUT(40)=OUT(40)+SMY(114)/5 
C Added by RICEU for including new N VARS
        OUT(41)=OUT(41)+SMY(115)/5
        OUT(42)=OUT(42)+SMY(116)/5
        OUT(43)=OUT(43)+SMY(117)/5
        OUT(44)=OUT(44)+SMY(118)/5
        OUT(45)=OUT(45)+SMY(119)/5
        OUT(46)=OUT(46)+SMY(120)/5
        OUT(47)=OUT(47)+SMY(121)/5
        OUT(48)=OUT(48)+SMY(122)/5
        OUT(49)=OUT(49)+SMY(123)/5        
C  END RICEU                                   

C     AVE CROP INFO
      CROPOUT(1)=CROPOUT(1)+YLD1(J1,J)/5
	CROPOUT(2)=CROPOUT(2)+YLD2(J1,J)/5
	CROPOUT(3)=CROPOUT(3)+HIF(J1,J)/5
	CROPOUT(4)=CROPOUT(4)+DMF(J1,J)/5
	CROPOUT(5)=CROPOUT(5)+YLNF(J1,J)/5
	CROPOUT(6)=CROPOUT(6)+YLPF(J1,J)/5
	CROPOUT(7)=CROPOUT(7)+FRTN(J1,J)/5
	CROPOUT(8)=CROPOUT(8)+FRTP(J1,J)/5
	CROPOUT(9)=CROPOUT(9)+VIR(J1,J)/5
	CROPOUT(10)=CROPOUT(10)+XTP(3,J1,J)/5
	CROPOUT(11)=CROPOUT(11)+ETG(J1,J)/5
	CROPOUT(12)=CROPOUT(12)+CAW(J1,J)/5
	CROPOUT(13)=CROPOUT(13)+CRF(J1,J)/5
	CROPOUT(14)=CROPOUT(14)+CQV(J1,J)/5
	CROPOUT(15)=CROPOUT(15)+TPSF(J1,J)/5
	CROPOUT(16)=CROPOUT(16)+SF(1,J1,J)/5
	CROPOUT(17)=CROPOUT(17)+SF(2,J1,J)/5
      CROPOUT(18)=CROPOUT(18)+SF(3,J1,J)/5
	CROPOUT(19)=CROPOUT(19)+SF(4,J1,J)/5
	CROPOUT(20)=CROPOUT(20)+SF(5,J1,J)/5
	CROPOUT(21)=CROPOUT(21)+SF(6,J1,J)/5
	CROPOUT(22)=CROPOUT(22)+SF(7,J1,J)/5
	CROPOUT(23)=CROPOUT(23)+PPL0(J)/5
	IPLTYR=IPLD(J1,J)/10000
	IPLTMN=(IPLD(J1,J)-IPLTYR*10000)/100
	IPLTDAY=IPLD(J1,J)-IPLTYR*10000-IPLTMN*100
	PLANTDATE = NC(IPLTMN) + IPLTDAY
	PLANTDATEAVE =PLANTDATEAVE+PLANTDATE/5
	IPLANTDATEJULIAN=PLANTDATEAVE

	IGERMYR=IGMD(J1,J)/10000
	IGERMMN=(IGMD(J1,J)-IGERMYR*10000)/100
	IGERMDAY=IGMD(J1,J)-IGERMYR*10000-IGERMMN*100
	GERMDATE = NC(IGERMMN) + IGERMDAY
	GERMDATEAVE =GERMDATEAVE+GERMDATE/5
	IGERMDATEJULIAN=GERMDATEAVE

	IHVDYR=IHVD(J1,J)/10000
	IHVDMN=(IHVD(J1,J)-IHVDYR*10000)/100
	IHVDDAY=IHVD(J1,J)-IHVDYR*10000-IHVDMN*100
	HARVDATE = NC(IHVDMN) + IHVDDAY
	HARVDATEAVE =HARVDATEAVE+HARVDATE/5
	IHARVDATEJULIAN=HARVDATEAVE

C	 IPLD(J1,J),IGMD(J1,J),IHVD(J

	IF(IYR.LT.2002)GO TO 2005


C Commented out by RICEU for adding new N VARS
C	IF(IYR==2002)WRITE(KWANC,7499)ASTN,SITEFILE,WPM1FILE,WINDFILE,
C     1SOILFILE,OPSCFILE,IYR,IRLX,YLAT,XLOG,(OUT(K),K=1,40),CPNM(J),
C     2(CROPOUT(KJ),KJ=1,23),IPLANTDATEJULIAN,IGERMDATEJULIAN,
C     3IHARVDATEJULIAN
C Modified by RICEU for adding new N VARS
      IF(IYR==2002)WRITE(KWANC,7499)ASTN,SITEFILE,WPM1FILE,WINDFILE,
     1SOILFILE,OPSCFILE,IYR,IRLX,YLAT,XLOG,(OUT(K),K=1,49),CPNM(J),
     2(CROPOUT(KJ),KJ=1,23),IPLANTDATEJULIAN,IGERMDATEJULIAN,
     3IHARVDATEJULIAN	 



C     IPLD(J1,J),IGMD(J1,J),IHVD(J1,J)
C     6CPNM(J),YLD1(J1,J),YLD2(J1,J),HIF(J1,J),
C     1DMF(J1,J),YLNF(J1,J),YLPF(J1,J),FRTN(J1,J),FRTP(J1,J),VIR(J1,J),
C     2XTP(3,J1,J),ETG(J1,J),CAW(J1,J),CRF(J1,J),CQV(J1,J),TPSF(J1,J),
C     3(SF(L,J1,J),L=1,7),PPL0(J),IPLD(J1,J),IGMD(J1,J),IHVD(J1,J)

C Commented out by RICEU for adding new N VARS
C      DO 2002 K=1,40
C	OUT(K)=0

C Modified by RICEU for adding new N VARS
	DO 2002 K=1,49
	OUT(K)=0	

 2002 CONTINUE
      DO 2011 KJ=1,23
	CROPOUT(KJ)= 0
 2011 CONTINUE
      PLANTDATEAVE =0
      GERMDATEAVE = 0
	HARVDATEAVE = 0
 2005 CONTINUE

C Commented out by RICEU for adding new N VARS  
C 7499 FORMAT(1X,A16,',',5(A20,','),2(I5,','),2(F11.2,',',1X),3(F11.0,','),
C     1,3(F11.1,','),34(F11.3,','),
C     110(4X,A4,',',4(F11.3,','),5(F11.1,','),F11.3,',',4(F11.1,','),
C     29(F11.3,','),3(I9,',')))

C Modified by RICEU for adding new N VARS
 7499 FORMAT(1X,A16,',',5(A20,','),2(I5,','),2(F11.2,',',1X),3(F11.0,','),
     1,3(F11.1,','),34(F11.3,','),9(F11.3,','),
     110(2X,A4,',',4(F11.3,','),5(F11.1,','),F11.3,',',4(F11.1,','),
     29(F11.3,','),3(I9,',')))  

 1999 CONTINUE
      IF(KFL(35).GT.0)WRITE(KWTNA,7498)ASTN,SITEFILE,WPM1FILE,WINDFILE,
     1SOILFILE,OPSCFILE,IYR,IRLX,YLAT,XLOG,SMY(4),SMY(10),SMY(11),
     2SMY(14),SMY(16),SMY(17),SMY(35),SMY(33),SMY(42),SMY(48),SMY(47),
     3SMY(50),SMY(51),SMY(52),SMY(49),SMY(43),SMY(44),SMY(45),SMY(46),
     4SMY(59),SMY(60),SMY(61),SMY(62),SMY(63),SMY(56),SMY(54),
     5SMY(55),SMY(57),SMY(66),SMY(77),OCPD,APBC,TOCVWB,TAP,TNO3,
     6CPNM(J),YLD1(J1,J),YLD2(J1,J),HIF(J1,J),
     1DMF(J1,J),YLNF(J1,J),YLPF(J1,J),FRTN(J1,J),FRTP(J1,J),VIR(J1,J),
     2XTP(3,J1,J),ETG(J1,J),CAW(J1,J),CRF(J1,J),CQV(J1,J),TPSF(J1,J),
     3(SF(L,J1,J),L=1,7),PPL0(J),IPLD(J1,J),IGMD(J1,J),IHVD(J1,J)
 7498 FORMAT(1X,A16,1X,5A20,2I5,2(1X,F8.2,1X),3F8.0,3F8.1,F8.3,28F8.2,
     110(4X,A4,4F8.3,5F8.1,F8.3,4F8.1,9F8.3,3I9))
C    TENN

      IF(KFL(19).EQ.0)GO TO 555
	K=1
	N2=NN
  686 J=LY(IRO,K)
      N1=MAX0(1,NCP(J))
      DO 557 J1=1,N1
      WRITE(KW(19),558)IYR,IY,CPNM(J),YLD1(J1,J),YLD2(J1,J),HIF(J1,J),
     1DMF(J1,J),YLNF(J1,J),YLPF(J1,J),FRTN(J1,J),FRTP(J1,J),VIR(J1,J),
     2VIL(J1,J),XTP(3,J1,J),ETG(J1,J),CAW(J1,J),CRF(J1,J),CQV(J1,J),CSTF
     3(J1,J),CSOF(J1,J),XTP(1,J1,J),XTP(2,J1,J),TPSF(J1,J),(SF(L,J1,J),
     4L=1,7),PPL0(J),IPLD(J1,J),IGMD(J1,J),IHVD(J1,J),(PSTN(I),TPAC(J,I)
     5,I=1,10)
C    	if(IYR.gt.1.and.YLD1(J1,J).GT.0.0)THEN
C     WRITE(KW(83),558)IYR,IY,CPNM(J),YLD1(J1,J)
C     ENDIF
      IF(J1.EQ.1)GO TO 557
      L1=J1-1
      IPLD(L1,J)=IPLD(J1,J)
      IGMD(L1,J)=IGMD(J1,J)
  557 CONTINUE
      IF(N1.GT.1)N2=N2-1
	K=K+1
	IF(K.LE.N2)GO TO 686
  555 IF(KFL(23).EQ.0)GO TO 683
      DO 667 K=1,NN
      L1=LY(IRO,K)
      DO 667 J=1,NCP(L1)
      WRITE(KW(23),668)IYR,IY,M21,K21,CPNM(L1),DM1(L1),(RWTX(LID(I),L1),
     1I=1,NBSL),RWX(L1)
  667 CONTINUE
  683 APBC=.5*(SMY(1)+SMY(2))
      IF(KFL(8).GT.0)WRITE(KW(8),293)IRO0,IYR,APBC,(SMY(KYA(K)),K=1,
     1NKYA)
C	GSVF=GSVF/BLYN(LY(IRO,1)) 
      RWTX=0.
	DO 497 K=1,NN
      J=LY(IRO,K)
  687	IF(KFL(24).EQ.0)GO TO 675
	IF(IDC(J).EQ.NDC(7).OR.IDC(J).EQ.NDC(8))WRITE(KW(24),669)IYR,IY,
     1CPNM(J),YLD2(K,J),DM(J),RW(J),SLAI(J),STD
  675 NCP(J)=1
      IF(KG(J).EQ.0)NCP(J)=0
      NHV(J)=0
	RWX(J)=0.
	I=N1
  522 NPSF(I,J)=0
      FRTN(I,J)=0.
      FRTP(I,J)=0.
      FRTK(I,J)=0.
      YLD1(I,J)=0.
      YLD2(I,J)=0.
      YLNF(I,J)=0.
      YLPF(I,J)=0.
      YLKF(I,J)=0.
	DMF(I,J)=0.
      VIL(I,J)=0.
      VIR(I,J)=0.
      CAW(I,J)=0.
      CQV(I,J)=0.
      CRF(I,J)=0.
	TPSF(I,J)=0.
      CSOF(I,J)=0.
      CSTF(I,J)=0.
      ETG(I,J)=0.
	I=I-1
      IF(I.GT.0)GO TO 522
      HUF(J)=0.
      RDF(J)=0.
      BLYN(J)=0.
      IF(IDC(J).EQ.NDC(3).OR.IDC(J).EQ.NDC(6).OR.IDC(J).EQ.NDC(7).OR.IDC
     1(J).EQ.NDC(8).OR.IDC(J).EQ.NDC(10))THEN
      ANA(J)=0.
	SWH(J)=0.
	SWP(J)=0.
	END IF
      IF(IDC(J).NE.NDC(2).AND.IDC(J).NE.NDC(5))DM1(J)=0.
  497 CONTINUE
      IF(KFL(NGF).EQ.0)GO TO 499
	X2=SMY(49)+SMY(52)
	X3=SMY(43)+SMY(44)+SMY(45)+SMY(46)
	SWGS=SWGS/REAL(ND)
C     XLOG      = SITE LONGITUDE
C     YLAT      = SITE LATITUDE
C     YGIS      = CROP YLD (T/HA)
C     WGIS      = CROP YLD/GROWING SEASON ET (KG/MM)
C     ETGS      = GROWING SEASON ET (MM)
C     GSEF      = GROWING SEASON PLANT TRANSPIRATION (MM)
C     SMY(19)   = IRRIGATION VOLUME (MM)
C     FGIS      = N FERTILIZER APPLIED (KG/HA)
C     SMY(11)   = ACTUAL ET (MM)
C     GSVF      = GROWING SEASON VPD (KPA)
C     HGIS      = CROP HARVEST INDEX
C     SRAF      = GROWING SEASON SOLAR RADIATION (MJ/M^2)
C     YLNG      = N CONTENT OF CROP YLD (KG/HA)
C     TNGS      = N CONTENT OF SOIL (KG/HA)
C     X2        = N LOST TO ATMOSPHERE (KG/HA) 
C     X3        = N LOST WITH RUNOFF, SUBSURFACE FLOW, AND EROSION
C     SMY(42)   = WIND EROSION (T/HA)
C     SMY(NDVSS)= WATER EROSION FOR DRIVING EQ (T/HA)
C     SMY(3)    = SOLAR RADIATION (MJ/M^2)
C     BGIS      = BIOMASS PRODUCTION (T/HA)
C     SF(1,     = WATER STRESS (D)
C     SF(2,     = N STRESS (D)
C     SF(3,     = P STRESS (D)
C     SF(4,     = K STRESS (D)
C     SF(5,     = TEMPERATURE STRESS (D)
C     SF(6,     = AERATION STRESS (D)
C     SF(7,     = SALT STRESS (D)
C     SMY(46)   = N LEACHED (KG/HA)
C     SMY(43)   = ORGANIC N LOSS WITH SEDIMENT (KG/HA)
C     SMY(47)   = NET MINERALIZATION (KG/HA)
C     SMY(49)   = DENITRIFICATION (KG/HA)
C     SMY(50)   = N FIXATION (KG/HA)
C     SMY(85)   = N MINERALIZATION FROM HUMUS (KG/HA)
C     SMY(51)   = NITRIFICATION (KG/HA)
C     SMY(52)   = VOLATILIZATION (KG/HA)
C     SMY(53)   = N LOSS IN DRAINAGE SYSTEM (KG/HA)
C     SMY(54)   = P LOSS WITH SEDIMENT (KG/HA)
C     SMY(56)   = P MINERALIZATION (KG/HA)
C     SMY(57)   = P LEACHED (KG/HA)
C     SMY(58)   = ENRICHMENT RATIO
C     SMY(59)   = N FERT ORGANIC FORM (KG/HA)
C     SMY(60)   = N FERT NO3 FORM (KG/HA)
C     SMY(61)   = N FERT NH3 FORM(KG/HA)
C     SMY(62)   = P FERT ORGANIC FORM (KG/HA)
C     SMY(63)   = P FERT MINERAL FORM (KG/HA)
C     YLPG      = P CONTENT OF CROP YIELD (KG/HA)
C     YLKG      = K CONTENT OF CROP YIELD (KG/HA)
C     SMY(77)   = ORGANIC C LOSS WITH SEDIMENT(KG/HA)
C     SMY(4)    = PRECIPITATION (MM)
C     SMY(17)   = PERCOLATION (MM)
C     SMY(14)   = RUNOFF (MM)
C     SMY(5)    = SNOWFALL (WATER EQUIVALENT MM)
C     SMY(6)    = SNOWMELT (WATER EQUIVALENT MM)
C     SMY(10)   = POTENTIAL ET (MM)
C     SMY(12)   = POTENTIAL PLANT TRANSPIRATION (MM)
C     SMY(13)   = ACTUAL PLANT TRANSPIRATION (MM)
C     SMY(16)   = LATERAL SUBSURFACE FLOW (MM)
C     SMY(18)   = DRAINAGE SYSTEM FLOW (MM)
C     SMY(15)   = SCS CURVE NUMBER
C     SMY(20)   = EXTERNAL INFLOW TO MAINTAIN WATER TABLE (MM)
C     SWGS      = ROOT ZONE SOIL WATER (MM)
C     SMY(68)   = SOIL WATER IN TOP 10 MM OF SOIL (MM)    
	WRITE(KW(IGIS),685)XLOG,YLAT,YGIS,WGIS,ETGS,GSEF,SMY(19),FGIS,SMY
     1(11),GSVF,HGIS,SRAF,YLNG,TNGS,X2,X3,SMY(42),SMY(NDVSS),SMY(3),BGIS
     2,(SF(L,1,1),L=1,7),SMY(46),SMY(43),SMY(47),SMY(49),SMY(50),SMY(85)
     3,SMY(51),SMY(52),SMY(53),SMY(54),SMY(56),SMY(57),SMY(58),SMY(59),
     4SMY(60),SMY(61),SMY(62),SMY(63),YLPG,YLKG,SMY(77),SMY(4),SMY(17),
     5SMY(14),SMY(5),SMY(6),SMY(10),SMY(12),SMY(13),SMY(16),SMY(18),SMY
     6(15),SMY(20),SWGS,SMY(68)
      SMGS(8)=SMGS(8)+SWGS
  499 WB1=SMY(34)
	WB2=SMY(42)
	SF=0.
      DO 81 K=1,NSM
      SMY(K)=0.
      DO 81 L=1,12
      SMM(K,L)=0.
   81 CONTINUE
      IF(NDP.EQ.0)GO TO 83
      DO 82 K=1,NDP
      DO 82 K1=1,7
      SMYP(K1,K)=0.
      DO 138 L=1,12
  138 SMMP(K1,K,L)=0.
      SMYP(10,K)=0.
      DO 82 L=1,12
   82 SMMP(10,K,L)=0.
      DO 564 L=1,12
      DO 564 K=1,10
  564 TPAC(L,K)=0.
   83 MO1=MO
   84 CONTINUE
      IBD=1
      MO=1
      KT=1
      KC=0
	IYR1=IYR
      IYR=IYR+1
      IYX=IYX+1
      NYD=1
      IPY=IPY+II
	CALL SCONT
	IF(ICOR0.EQ.0)GO TO 690
	DO 691 J=1,21
      IX(J)=IX0(J)
  691 IDG(J)=J
  690 IF(ISW>3.AND.ISW/=7)GO TO 542
      XX=0.
      K=1
      TPAW=0.
	SUM=0.
      DO 535 I=1,NBSL
      J=LID(I)
	Y1=.1*WOC(J)/WT(J)
	XZ=.0172*Y1
	ZZ=1.-XZ
!     BD(J)=1./(XZ/.224+ZZ/BDM(J))
!	DZ=1.E-4*WT(J)/BD(J)
!	Z(J)=XX+DZ
      X1=1000.*(Z(J)-XX)
      IF(ISW/=0.AND.ISW/=2)GO TO 536
      CALL SWRTNR(CLA(J),SAN(J),Y1,X2,X3)
      GO TO 539
  536	IF(ISW==7)GO TO 541
      ZZ=.5*(XX+Z(J))
      CALL SWRTNB(CEM(J),CLA(J),Y1,SAN(J),X2,X3,ZZ)
	GO TO 539
  541 CALL SWNN(CLA(J),SAN(J),Y1,X2,X3)
  539 XY=1.-ROK(J)*.01
      S15(J)=X2*X1*XY
      FC(J)=X3*X1*XY
      CALL SPOFC(J)
      IF(K.GT.3)GO TO 670
      TPAW=TPAW+FC(J)-S15(J)
  672 IF(TPAW.LT.WCS(K))GO TO 670
      ZCS(K)=XX+(Z(J)-XX)*((WCS(K)-PZW)/(TPAW-PZW))
      K=K+1
      IF(K.LT.4)GO TO 672
  670 PZW=TPAW
      XX=Z(J)
C	SUM=SUM+WT(J)
C     WRITE(KW(1),674)Z(J),Y1,BD(J),WT(J)
  535 CONTINUE
C 674 FORMAT(1X,'^^^^^',4E16.6)
C     WBAL=WBGN-WB1-WB2-SUM
C     WBGN=SUM
C	WRITE(KW(1),674)SUM,WBAL
  542 IF(ISTA.EQ.0)GO TO 586
      DO 86 J=1,NBSL
      L=LID(J)
	WHSC(L)=SOL(1,L)
      WHPC(L)=SOL(2,L)
      WLSC(L)=SOL(3,L)
      WLMC(L)=SOL(4,L)
      WBMC(L)=SOL(5,L)
      WOC(L)=SOL(6,L)
      WHSN(L)=SOL(7,L)
      WHPN(L)=SOL(8,L)
      WLSN(L)=SOL(9,L)
      WLMN(L)=SOL(10,L)
      WBMN(L)=SOL(11,L)
	WON(L)=SOL(12,L)
	PMN(L)=SOL(13,L)
      WP(L)=SOL(14,L)
      OP(L)=SOL(15,L)
      EXCK(L)=SOL(16,L)
      FIXK(L)=SOL(17,L)
      ST(L)=SOL(18,L)
	WLS(L)=SOL(19,L)
	WLM(L)=SOL(20,L)
	WLSL(L)=SOL(21,L)
      WLSLC(L)=SOL(22,L)
      WLSLNC(L)=SOL(23,L)
   86 CONTINUE
      CALL SCONT
  586 CALL SPRNT(YTP)
	IF(KFL(14).GT.0)CALL SOCIOA(IYR1,12,KDA)
	IF(IPD.NE.2.AND.IPD.NE.4)GO TO 140
      WRITE(KW(1),101)
      CALL SOLIO(YTP,1)
  140 IF(IGSD.EQ.0)GO TO 85
      IF(IY.LT.IGSD)GO TO 85

      IF( USEDEP ) REWIND KR(31)
      REWIND KR(7)
      CALL WREAD
      NGN=NGN0
      IYR=IYR0
      IGSD=IGSD+NRO
   85 CALL ALPYR(IYR,NYD,LPYR)
	IGIS=IGIS+1
C     UNC
	REWIND KR(7)
        IF( USEDEP ) REWIND KR(31)
C     UNC
   87 CONTINUE
      IY=NBYR+1
   88 RETURN
   89 FORMAT(1X,I4,2I2,2X,'0.2 M SW = ',F5.1,'MM',2X,'HU = ',F4.0,'C',2X
     1,'HUSC = ',F6.2)
   92 FORMAT(1X,I4,2I2,2X,'RB FR DK',20X,'DKH=',F5.0,'MM',2X,'DKI=',F6.2
     1,'M',2X,'HUSC=',F6.2)
   94 FORMAT(//T5,'Y M D  OPERATION')
   95 FORMAT(1X,A4,12F9.2,11X,A4)
   96 FORMAT(//I5,9(2X,A4,F8.2)/(5X,9(2X,A4,F8.2)))
   97 FORMAT(T10,'STRESS DAYS (BIOM)     WATER=',F5.1,2X,'N=',F5.1,2X,
     1'P=',F5.1,2X,'K=',F5.1,2X,'TEMP=',F5.1,2X,'AIR=',F5.1,2X,'SALT=',
     2F5.1)
C  98 FORMAT(1X,I4,1X,A4,6X,8F8.2/(16X,8F8.2))
   99 FORMAT(45X,'YR=',I4,2X,'YR#=',I4/T11,'JAN',9X,'FEB',9X,'MAR',9X,
     1'APR',9X,'MAY',9X,'JUN',9X,'JUL',9X,'AUG',9X,'SEP',9X,'OCT',9X,
     2'NOV',9X,'DEC',9X,' YR')
  100 FORMAT(10F8.2)
  101 FORMAT(T5,'SOIL DATA')
  102 FORMAT(45X,'YR=',I4,2X,'YR#=',I4/T11,'JAN',6X,'FEB',6X,'MAR',6X
     1,'APR',6X,'MAY',6X,'JUN',6X,'JUL',6X,'AUG',6X,'SEP',6X,'OCT',6X,
     2'NOV',6X,'DEC',6X,' YR')
  103 FORMAT(14X,8F6.0)
  104 FORMAT(1X,A4,13F9.2,2X,A4)
  105 FORMAT(1X,I4,2I2,1X,A4,5(2X,A4,F8.3)/(10X,5(2X,A4,F8.3)))
  106 FORMAT(2X,A4,1X,'YLD=',F5.1,'/',F5.1,2X,'BIOM=',F5.1,'T/HA',2X,
     1'YLN=',F5.0,2X,'YLP=',F5.0,2X,'YLK=',F5.0,2X,'FN=',F5.0,2X,'FP=',
     2F5.0,2X,'FK=',F5.0,'KG/HA'/T7,'IRGA=',F5.0,2X,'IRDL=',F5.0,2X,
     3'CAW=',F5.0,'MM',2X,'WUEF=',F6.2,'KG/MM',2X,'POP=',F9.4,'P/M2',2X,
     4'PSTF=',F6.2/T7,'COST=',F7.0,2X,'COOP=',F7.0,2X,'RTRN=',F5.0,'/',
     5F5.0,'$/HA',2X,'EK=',F7.3,2X,'REK=',F7.3,2X,'WK=',F7.3)
  107 FORMAT(1X,I4,2X,I2,2X,I2,50F10.3)
  108 FORMAT(1X,A4,12I9,11X,A4)
  109 FORMAT(1X,A4,13F9.4,2X,A4)
  111 FORMAT(34X,'-------------------------',A8,'-----------------------
     1--')
  112 FORMAT(47X,'PESTICIDE SIMULATION (G/HA)')
  113 FORMAT(1X,A4,13F9.0,2X,A4)
  114 FORMAT(1X,A4,12F9.0,11X,A4)
C 118 FORMAT(1X,20I4)
  119 FORMAT(10I8)
C 120 FORMAT(10F8.4)
C 125 FORMAT(10E13.5)
  143 FORMAT(1X,A4,13F12.5,2X,A4)
  146 FORMAT(1X,A4,12F12.5,14X,A4)
  156 FORMAT(/T5,'YEAR ',I4,' OF ',I4,/)
C 286 FORMAT(1X,15A4,1X,3I4)
  293 FORMAT(1X,2I4,41F8.2)
  308 FORMAT(/T10,'**********RAIN, TEMP, RAD, WIND SPEED, & REL HUM ARE 
     1GENERATED**********',3I4)
  465 FORMAT(8X,'ADSRB',5E13.5)
  462 FORMAT(5X,A16)
  464 FORMAT(8X,'Q+SSF',5E13.5)
  463 FORMAT(8X,'SOL  ',5E13.5)
  466 FORMAT(8X,'SED Y',5E13.5)
  468 FORMAT(1X,I4,2I2,1X,I4,1X,A16,14F10.4)
  471 FORMAT(4X,'Y M D  RT#  PSTN',12X,10(4X,A4,2X),5X,'Q',8X,'SSF',6X,
     1'PRK',4X,'ROCONC')
  474 FORMAT(4X,4I4)
  475 FORMAT(1X,I4,I2,I4,2X,40F8.1)
  477 FORMAT(4X,'Y M RT#',43(4X,A4))
C 477 FORMAT(4X,'Y M ',60(4X,A4))
  498 FORMAT(1X,2I4,6F8.1,F8.3,17F8.1,F8.2,F8.1,F8.2,2F8.1,10(A16,F8.0))
  505 FORMAT(A80)
  513 FORMAT(1X,I4,2I2,1X,I4,4(4X,A4,7F8.3))
  516 FORMAT(4X,'Y   M   D',2X,13(A4,4X))
  517 FORMAT(T27,'|----------------------------------------------TEMP(C)
     &--------------------------------------------------|'/6X,'DATE',8X,
     &'DAMP',15X,'|_______________________________@ CENTER OF SOIL LAYER
     &S______________________________________|'/T5,'Y   M   D',3X,'DEPTH
     &(M)',5X,'SURF',7X,'1',9X,'2',9X,'3',9X,'4',9X,'5',9X,'6',9X,'7',9X
     &,'8',9X,'9',8X,'10')
  520 FORMAT(4X,'Y   M  ',32(A4,4X))
  523 FORMAT(1X,I4,I2,I4,2X,A4,13F8.1)
  526 FORMAT(4X,'Y M RT#  CPNM',6X,'WS',6X,'NS',6X,'PS',6X,'KS',6X,'TS',
     16X,'AS',6X,'SS',6(4X,A4))
  527 FORMAT(4X,'Y M D  RT#',4(4X,'CPNM',3X,'WS',6X,'NS',6X,'PS',6X,'KS'
     1,6X,'TS',6X,'AS',6X,'SS'))    
  532 FORMAT(1X,I4,2I2,1X,5(2X,A4,F8.3)/(10X,5(2X,A4,F8.3)))
  533 FORMAT(5X,12I4)
C 549 FORMAT(1X,'!!!!!',3I4,20F10.2)
  558 FORMAT(1X,2I4,1X,A4,4F8.3,5F8.1,2F8.3,4F8.1,4F8.2,9F8.3,3I9,
     110(1X,A16,F8.0))
  562 FORMAT(1X,I4,I2,2X,60F8.1)
  565 FORMAT(1X,2I4,28F8.2,4X,A4,F8.2,F8.0)
  567 FORMAT(1X,3I4,2X,'LIME',14X,I4,6X,'   9',8X,F10.2,10X,2F10.2)
  582 FORMAT(T10,'ATMOS CO2 = ',F5.0)
  588 FORMAT(5X,'!!!!!',I4,2I2,' Q= ',F6.1)
  !589 FORMAT(5X,'^^^^^',I4,2I2,' PDSW = ',F6.1,1X,'FCSW = ',F6.1)
  666 FORMAT(1X,3I4,2X,A8,8X,I6,6X,3I4,2F10.2,20X,F10.2)
  668 FORMAT(1X,2I4,2I2,1X,A4,20F8.2)
  669 FORMAT(1X,2I4,1X,A4,5F8.2)
  679 FORMAT(1X,I4,1X,I4,1X,13(1X,F10.3))
  680 FORMAT(10X,'WATERSHED AREA = ',F10.2,' HA'/18X,'Q',10X,'Y',9X,'YN'
     1,9X,'YP',9X,'QN',9X,'QP'/2X,'YR    MO',7X,'(MM)',6X,'(T/HA)',3X,
     2'|-----------------(KG/HA)---------------|')
  681 FORMAT(1X,I4,1X,I4,6F8.2,10(1X,A16,8F8.2,E12.5))
  682 FORMAT(1X,I4,2X,I2,2X,I2,200F8.3)
  685 FORMAT(1X,4F10.2,5F10.1,2F10.3,F10.0,50F10.2)
  731 FORMAT(4X,'Y',3X,'M',3X,'D',4X,'SW15',4X,'SW30',3X,'NO315',3X,
     1'NO330',3X,'NH315',3X,'NH330',3X,200(A4,4X))
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE CAGRO
C     EPIC0509
C     THIS SUBPROGRAM CALCULATES THE DAILY INCREASE IN PLANT BIOMASS,
C     ROOT WEIGHT, AND YIELD BY ADJUSTING THE POTENTIAL VALUES WITH THE
C     ACTIVE STRESS CONSTRAINT.
      INCLUDE 'EPCM0509_su.for'
      DIMENSION XTP(15)
      XX=REG(JJK)*SHRL
      RWL=RW(JJK)
      RGD=DDM(JJK)*XX
      X1=100.*HUI(JJK)
      AJHI(JJK)=HI(JJK)*X1/(X1+EXP(SCRP(3,1)-SCRP(3,2)*X1))
      YX=DM(JJK)-DDM(JJK)
!     modified by Jimmy 2017-01-04
      XX=MAX(1.E-5,YX+RGD)
      RF=RWPC(1,JJK)*(1.-HUI(JJK))+RWPC(2,JJK)*HUI(JJK)
      RF=MIN(.99,MAX(RF,.2))
      RW(JJK)=PARM(81)*RWL+(1.-PARM(81))*RF*XX
      DRW=RW(JJK)-RWL
      DM(JJK)=XX
      DM1(JJK)=MAX(DM1(JJK),XX)
      STL(JJK)=MAX(0.,DM(JJK)-RW(JJK))      
      XX=0.
      SUM=0.
      X2=2.*RZ
      DO 7 I=1,IR
      ISL=LID(I)
      XTP(ISL)=(Z(ISL)-XX)*EXP(-PARM(56)*Z(ISL)/RZ)
      SUM=SUM+XTP(ISL)
      XX=Z(ISL)
    7 CONTINUE
      IF(IDC(JJK).NE.NDC(7).AND.IDC(JJK).NE.NDC(8).AND.IDC(JJK).NE.NDC
     1(10))GO TO 1
      X1=MO*MO
      FALF=STL(JJK)*X1*XMTU(JJK)
	SMM(88,MO)=SMM(88,MO)+FALF
      DM(JJK)=DM(JJK)-FALF
      STL(JJK)=STL(JJK)-FALF
      X1=FALF*1000.
      XZ=CNY(JJK)*X1
      XY=CPY(JJK)*X1
      W1=CKY(JJK)*X1
      CALL NCNSTD(.1,FALF,XZ,LD1)
      FOP(LD1)=FOP(LD1)+XY
      UN1(JJK)=AMAX1(1.E-5,UN1(JJK)-XZ)
      UP1(JJK)=UP1(JJK)-XY
      UK1(JJK)=UK1(JJK)-W1
    1 IF(IDC(JJK).NE.NDC(3).AND.IDC(JJK).NE.NDC(6))GO TO 2
      ZZ=.01*(HUI(JJK)+.01)**10*STL(JJK)
      STL(JJK)=STL(JJK)-ZZ
      DM(JJK)=DM(JJK)-ZZ
      STD=STD+ZZ
      STDL=STDL+CLG*ZZ
      XY=ZZ*BN(3,JJK)
      XZ=ZZ*BP(3,JJK)
      XW=ZZ*BK(3,JJK)
      STDK=STDK+XW
      STDN=STDN+XY
      STDP=STDP+XZ
      UK1(JJK)=UK1(JJK)-XW
      UN1(JJK)=AMAX1(1.E-5,UN1(JJK)-XY)
      UP1(JJK)=UP1(JJK)-XZ
      IF(HUI(JJK).GT..6.AND.STL(JJK).LT..1)HU(JJK)=0.
    2 DO 5 J=1,IR
      ISL=LID(J)
      WNO3(ISL)=AMAX1(1.E-5,WNO3(ISL)-UN(ISL))
      IF(DRW.LT.0.)GO TO 3
      UTO=PARM(55)*U(ISL)/(SU+1.E-20)+(1.-PARM(55))*XTP(ISL)/SUM
      GO TO 4
    3 UTO=RWT(ISL,JJK)/(RWL+1.E-10)
      X1=1.E-10-DRW*UTO
      X2=1000.*BN(3,JJK)*X1
      CALL NCNSTD(.1,X1,X2,ISL)
      UN1(JJK)=AMAX1(1.E-5,UN1(JJK)-X2)
    4 ST(ISL)=ST(ISL)-U(ISL)
      AP(ISL)=AP(ISL)-UP(ISL)
      SOLK(ISL)=SOLK(ISL)-UK(ISL)
      RWT(ISL,JJK)=RWT(ISL,JJK)+DRW*(UTO+1.E-10)
    5 CONTINUE
      IF(RW(JJK).LE.RWX(JJK))GO TO 6
      RWX(JJK)=RW(JJK)
      M21=MO
      K21=KDA
      DO 9 I=1,IR
      ISL=LID(I)
    9 RWTX(ISL,JJK)=RWT(ISL,JJK)
    6 RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      FUNCTION CAHU(J,K,BASE,NHS)
C     EPIC0160
C     THIS SUBPROGRAM ACCUMULATES HEAT UNITS FOR USE IN CPTHU.
      INCLUDE 'EPCM0509_su.for'
      CAHU=0.
      MO=1
      DO 3 JDA=J,K
      CALL AXMON(JDA,MO)
      IF(JDHU.GT.366)GO TO 2
      CALL WHLRMX
      IF(HRLT.LT.WDRM.AND.NHS.EQ.0)GO TO 3
    2 TA=ARALT(TAV,XX)
C     X1=MIN(TA,TOPT)
      TGX=TA-BASE
      IF(TGX.GT.0.)CAHU=CAHU+TGX
    3 CONTINUE
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE CFRG(I,J,F,RGS,X,JRT)
C     EPIC0160
C     DETERMINES MINIMUM STRESS FACTORS FOR ROOT AND TOTAL BIOMASS
C     GROWTH.
      INCLUDE 'EPCM0509_su.for'
      JRT=0
      IF(F.GE.RGS)GO TO 2
      RGS=AMAX1(0.,F)
      J=I
      IF(RGS.LE.X)JRT=1
    2 RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE CGROW(JRT)
C     EPIC0160
C     THIS SUBPROGRAM CALCUALTES LEAF AREA INDEX, HEAT UNITS, ROOT DEPTH
C     AND TEMPERATURE STRESS FOR THE.
      INCLUDE 'EPCM0509_su.for'
      DIMENSION SLA0(12),XDLA0(12)
      JRT=0
      X1=DM(JJK)+1.E-10
      CPR=UP1(JJK)/X1
      CNR=UN1(JJK)/X1
      CKR=AMAX1(1.E-5,UK1(JJK)/X1)
      AJWA(JJK)=1.
      XPHU=PHU(JJK,IHU(JJK))
      X4=TOPC(JJK)-TBSC(JJK)
C     TGX=MIN(X4,TX-TBSC(JJK))
      TGX=TX-TBSC(JJK)
      HU(JJK)=HU(JJK)+AMAX1(0.,TGX)
      IF(JDA.NE.JDHU.OR.IDC(JJK).EQ.NDC(7).OR.IDC(JJK).EQ.NDC(8).OR.IDC
     1(JJK).EQ.NDC(10))GO TO 24
      HU(JJK)=XPHU*PARM(19)
      PSTS=MIN(0.,PSTS)
      IPST=0
   24 HUI(JJK)=HU(JJK)/XPHU
      IF(HU(JJK)>=XPHU)THEN
		WCYD=AMAX1(WCY(JJK),WCYD-EO*.002)
		IF(IDC(JJK)==NDC(3).OR.IDC(JJK)==NDC(6))THEN
	        HU(JJK)=0.
			JRT=2
		ELSE
	        JRT=1
          END IF
		RETURN
      END IF
      IF(IDC(JJK).NE.NDC(8).AND.IDC(JJK).NE.NDC(10))GO TO 18
      X1=HSM/AHSM
	F=X1/(X1+EXP(DLAP(1,JJK)-DLAP(2,JJK)*X1))
	XLAI(JJK)=AMAX1(.1,DMLX(JJK)*HUI(JJK)/(HUI(JJK)+EXP(DLAP(1,JJK)-
     1DLAP(2,JJK)*HUI(JJK))))
	GO TO 22 
   18 F=HUI(JJK)/(HUI(JJK)+EXP(DLAP(1,JJK)-DLAP(2,JJK)*HUI(JJK)))
   22 FF=F-WLV(JJK)
      XX=FF*XLAI(JJK)
      X2=1.
      SLAX=0.
	X3=SLAI(JJK)+.001
      IF(IGO.LT.2)GO TO 17
      SUM=0.
      DO 19 I=1,IGO
      K1=JE(I)
      IF(SLAI(K1).GT.SLAX)SLAX=SLAI(K1)
   19 SUM=SUM+SLAI(K1)
      IF(SLAX.LT.2.)GO TO 23
      X2=X3/SUM
	GO TO 23
   17 SUM=X3
   23 IF(XX.LT.1.E-5)GO TO 20
      X1=XX*X2*(1.+HR1)**PARM(70)
	IF(IDC(JJK).NE.NDC(7).AND.IDC(JJK).NE.NDC(8).AND.IDC(JJK).NE.NDC
     1(10))X1=X1*SQRT(WS)*SHRL
      SLAI(JJK)=MIN(XLAI(JJK),SLAI(JJK)+X1)
   20 WLV(JJK)=F
C     TGX=DST0-TBSC(JJK)
      IF(TGX.LE.0.)GO TO 4
	RTO=TGX/X4
	IF(RTO.GE.2.)GO TO 4
	REG(JJK)=SIN(1.5707*RTO)
      GO TO 5
C     X1=100.*TGX/X4
C     REG(JJK)=X1/(X1+EXP(SCRP(22,1)-SCRP(22,2)*X1))
    4 REG(JJK)=0.
    5 IF(SLAI(JJK).LT..05)GO TO 8
      CHT(JJK)=AMAX1(CHT(JJK),HMX(JJK)*SQRT(F+1.E-10))
      IF(HUI(JJK).GT.XDLAI(JJK).AND.HRLT.GT.WDRM)GO TO 6
      XDLA0(JJK)=1.-XDLAI(JJK)
      SLA0(JJK)=SLAI(JJK)
      GO TO 9
    6 XX=(1.-HUI(JJK))/XDLA0(JJK)
          IF(XX>1.E-5)THEN
          XX=LOG10(XX)
      ELSE
	    XX=-5.
      END IF

      IF(IDC(JJK).EQ.NDC(7).OR.IDC(JJK).EQ.NDC(8).OR.IDC(JJK).EQ.NDC(10)
     1)GO TO 7
      RTO=RLAD(JJK)*XX
      IF(RTO.LT.-10.)RTO=-10.
      SLAI(JJK)=MIN(SLAI(JJK),SLA0(JJK)*10.**RTO)
      SLAI(JJK)=AMAX1(.05,SLAI(JJK))
    7 RTO=RBMD(JJK)*XX
      IF(RTO.LT.-10.)RTO=-10.
      AJWA(JJK)=10.**RTO
      GO TO 9
    8 SLAI(JJK)=.05
    9 XX=AMAX1(CHT(JJK),RD(JJK),2.5*RDMX(JJK)*HUI(JJK))
      RD(JJK)=MIN(RDMX(JJK),Z(LID(NBSL)),XX)
      FGC=SUM/(SUM+EXP(SCRP(23,1)-SCRP(23,2)*SUM))
      CLG=BLG(3,JJK)*HUI(JJK)/(HUI(JJK)+EXP(BLG(1,JJK)-BLG(2,JJK)*
     1HUI(JJK)))
      SHRL=1.
      FHR=0.
      IF(HRLT+1.E-5.GT.WDRM)GO TO 10
      SHRL=0.
      FHR=1.-HRLT/WDRM
      GO TO 11
   10 SRA=SRA+RA
      GSVP=GSVP+VPD
   11 IF(IDC(JJK).EQ.NDC(7))GO TO 15
      IF(TMN.GT.-1.)GO TO 12
      XX=ABS(TMN)
      F=XX/(XX+EXP(FRST(1,JJK)-FRST(2,JJK)*XX))
      F=AMAX1(F,FHR)
      GO TO 13
   12 IF(SHRL.GT.0.)GO TO 15
      F=FHR
   13 IF(IDC(JJK).EQ.NDC(8).OR.IDC(JJK).EQ.NDC(10))GO TO 21
      IF(STL(JJK).LT..01)GO TO 21
      XX=F*STL(JJK)
      STL(JJK)=STL(JJK)-XX
      DM(JJK)=DM(JJK)-XX
      STD=STD+XX
      STDL=STDL+CLG*XX
      XY=XX*CNR
      XZ=XX*CPR
      XW=XX*CKR
      STDK=STDK+XW
      STDN=STDN+XY
      STDP=STDP+XZ
      UK1(JJK)=UK1(JJK)-XW
      UN1(JJK)=AMAX1(1.E-5,UN1(JJK)-XY)
      UP1(JJK)=UP1(JJK)-XZ
C  14 IF(F*(1.-SNOF).LT..9)GO TO 21
C     IF(IDC(JJK).NE.NDC(3).AND.IDC(JJK).NE.NDC(6))IGO=IGO-1
C     WRITE(KW(1),1)IYR,MO,KDA,JJK,IDC(JJK),IGO,TMN,F,SNOF
C   1 FORMAT(1X,'********',I4,2I2,3I3,3F10.3)
   21 SLAI(JJK)=AMAX1(.02,SLAI(JJK)*(1.-F))
   15 IF(REG(JJK).GT.0.)GO TO 16
      N1=NCP(JJK)
      SF(5,N1,JJK)=SF(5,N1,JJK)+1.
      SFMO(5,JJK)=SFMO(5,JJK)+1.
      CGSF(5,JJK)=1.
      BLYN(JJK)=BLYN(JJK)+1.
      SMMC(15,JJK,MO)=SMMC(15,JJK,MO)+1.
      VARC(15,JJK)=0.
      JRT=1
   16 RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE CPTBL
C     EPIC0509
C     THIS SUBPROGRAM READS CROP TABLE TO DETERMINE CROP PARAMETERS
      CHARACTER*12 ADUM
      INCLUDE 'EPCM0509_su.for'
      DIMENSION XTP(56)
      IF(NSTP.GT.0)GO TO 174
      IF(LC.EQ.0)GO TO 174
      DO 173 L=1,LC
      IF(KDC(L).EQ.JX(6))GO TO 179
  173 CONTINUE
  174 LC=LC+1
      KDC1(JX(6))=LC
      KDC(LC)=JX(6)
      XMTU(LC)=JX(7)
C     READ CROP DATA
C     CPNM = NAMES OF CROPS IN CROP PARAMETER TABLE
C  1  WA   = BIOMASS/ENERGY (KG/HA/MJ)(FOR CO2 = 330 PPM
C  2  HI   = HARVEST INDEX (CROP YIELD/ABOVE GROUND BIOMASS)
C  3  TOPC = OPTIMAL TEMP FOR PLANT GROWTH (C)
C  4  TBSC = MIN TEMP FOR PLANT GROWTH (C)
C  5  DMLA = MAX LEAF AREA INDEX
C  6  DLAI = FRACTION OF GROWING SEASON WHEN LEAF AREA STARTS DECLINING
C  7  DLAP(= LAI DEVELOPMENT PARMS--NUMBERS BEFORE DECIMAL = %
C  8   1,2) OF GROWING SEASON .  NUMBERS AFTER DDECIMAL = FRACTION OF
C            DMLA AT GIVEN %.
C  9  RLAD = LAI DECLINE RATE FACTOR.
C 10  RBMD = WA  DECLINE RATE FACTOR.
C 11  ALT  = ALUMINUM TOLERANCE INDEX(1-5)1=SENSITIVE, 5=TOLERANT
C 12  GSI  = MAX STOMATAL CONDUCTANCE (DROUGTH TOLERANT PLANTS HAVE
C            LOW VALUES.)
C 13  CAF  = CRITICAL AERATION FACTOR (SW/POR > CAF CAUSES AIR STRESS)
C 14  SDW  = SEEDING RATE (KG/HA)
C 15  HMX  = MAX CROP HEIGHT (M)
C 16  RDMX = MAX ROOT DEPTH (M)
C 17  WAC2 = NUMBER BEFORE DECIMAL = CO2 CONC IN FUTURE ATMOSPHERE
C            (PPM).  NUMBER AFTER DECIMAL = RESULTING WA VALUE.
C 18  CNY  = N FRACTION OF YIELD (KG/KG)
C 19  CPY  = P FRACTION OF YIELD (KG/KG)
C 20  CKY  = K FRACTION OF YIELD (KG/KG)
C 21  WSYF = LOWER LIMIT OF HARVEST INDEX
C 22  PST  = PEST(INSECTS,WEEDS,AND DISEASE)FACTOR (0-1)
C 23  COSD = SEED COST ($/KG)
C 24  PRYG = PRICE FOR SEED YIELD ($/T)
C 25  PRYF = PRICE FOR FORAGE YIELD ($/T)
C 26  WCY  = FRACTION WATER IN YIELD.
C27-29BN   = N FRACTION IN PLANT WHEN GROWTH IS 0.,.5,1.0
C30-32BP   = P FRACTION IN PLANT WHEN GROWTH IS 0.,.5,1.
C33-35BK   = K FRACTION IN PLANT WHEN GROWTH IS 0.,.5,1.
C36-38BW   = WIND EROSION FACTORS FOR STANDING LIVE, STANDING DEAD,
C            AND FLAT RESIDUE
C 39  IDC  = CROP ID NUMBERS. USED TO PLACE CROPS IN CATEGORIES
C            (1 FOR WARM SEASON ANNUAL LEGUME
C             2 FOR COLD SEASON ANNUAL LEGUME
C             3 FOR PERENNIAL LEGUME
C             4 FOR WARM SEASON ANNUAL
C             5 FOR COLD SEASON ANNUAL
C             6 FOR PERENNIAL
C             7 FOR EVERGREEN TREES
C             8 FOR DECIDUOUS TREES
C             9 FOR COTTON
C            10 FOR DECIDUOUS TREES (LEGUME)
C 40/ FRST(= FROST DAMAGE PARMS--NUMBERS BEFORE DECIMAL = MIN TEMP(DEG C
C 41   1,2) NUMBERS AFTER DECIMAL = FRACTION YLD LOST WHEN GIVEN MIN TE
C            IS EXPERIENCED.
C 42  WAVP = PARM RELATING VAPOR PRESSURE DEFFICIT TO WA
C 43  VPTH = THRESHOLD VPD (KPA)(F=1.
C 44  VPD2 = NUMBER BEFORE DECIMAL = VPD VALUE (KPA).  NUMBER AFTER
C            DECIMAL = F2 < 1.
C 45  RWPC1= ROOT WEIGHT/BIOMASS PARTITIONING COEF
C 46  RWPC2= ROOT WEIGHT/BIOMASS PARTITIONING COEF
C 47  GMHU = HEAT UNITS REQUIRED FOR GERMINATION
C 48  PPLP1= PLANT POP PARM--NUMBER BEFORE DECIMAL = # PLANTS
C            NO AFTER DEC = FRACTION OF MAX LAI
C 49  PPLP2= 2ND POINT ON PLANT POP-LAI CURVE. PPLP1<PPLP2--PLANTS/M2
C                                              PPLP1>PPLP2--PLANTS/HA
C 50  STX1 = YLD DECREASE/SALINITY INCREASE ((T/HA)/(MMHO/CM))
C 51  STX2 = SALINITY THRESHOLD (MMHO/CM)
C 52  BLG1 = LIGNIN FRACTION IN PLANT AT .5 MATURITY
C 53  BLG2 = LIGNIN FRACTION IN PLANT AT MATURITY
C 54  WUB  = WATER USE CONVERSION TO BIOMASS(T/MM)
C 55  FTO  = FRACTION TURNOUT (COTTON LINT/STRIPPER YLD)
C 56  FLT  = FRACTION LINT (COTTON LINT/PICKER YLD)
      READ(KR(4),1)ADUM
	READ(KR(4),1)ADUM
  175 READ(KR(4),333)J2,CPNM(LC),(XTP(L),L=1,56)
      IF(J2.NE.JX(6))GO TO 175
      WA(LC)=XTP(1)
      HI(LC)=XTP(2)
      TOPC(LC)=XTP(3)
      TBSC(LC)=XTP(4)
      DMLA(LC)=XTP(5)
      DLAI(LC)=XTP(6)
      DLAP(1,LC)=XTP(7)
      DLAP(2,LC)=XTP(8)
      RLAD(LC)=XTP(9)
      RBMD(LC)=XTP(10)
      ALT(LC)=XTP(11)
      GSI(LC)=XTP(12)
      CAF(LC)=XTP(13)
      SDW(LC)=XTP(14)
      HMX(LC)=XTP(15)
      RDMX(LC)=XTP(16)
      WAC2(2,LC)=XTP(17)
      CNY(LC)=XTP(18)
      CPY(LC)=XTP(19)
      CKY(LC)=XTP(20)
      WSYF(LC)=XTP(21)
      PST(LC)=XTP(22)
      COSD(LC)=XTP(23)
      PRYG(LC)=XTP(24)
      PRYF(LC)=XTP(25)
      WCY(LC)=XTP(26)
      BN(1,LC)=XTP(27)
      BN(2,LC)=XTP(28)
      BN(3,LC)=XTP(29)
      BP(1,LC)=XTP(30)
      BP(2,LC)=XTP(31)
      BP(3,LC)=XTP(32)
      BK(1,LC)=XTP(33)
      BK(2,LC)=XTP(34)
      BK(3,LC)=XTP(35)
      BWD(1,LC)=XTP(36)
      BWD(2,LC)=XTP(37)
      BWD(3,LC)=XTP(38)
      IDC(LC)=XTP(39)
      FRST(1,LC)=XTP(40)
      FRST(2,LC)=XTP(41)
      WAVP(LC)=XTP(42)
      VPTH(LC)=XTP(43)
      VPD2(LC)=XTP(44)
      RWPC(1,LC)=XTP(45)
      RWPC(2,LC)=XTP(46)
      GMHU(LC)=XTP(47)
      PPLP(1,LC)=XTP(48)
      PPLP(2,LC)=XTP(49)
      STX(1,LC)=XTP(50)
      STX(2,LC)=XTP(51)
      BLG(1,LC)=XTP(52)
      BLG(2,LC)=XTP(53)
      WUB(LC)=XTP(54)
      FTO(LC)=XTP(55)
      FLT(LC)=XTP(56)
      REWIND KR(4)
  179 JJK=KDC1(JX(6))
      IHU(JJK)=IHU(JJK)+1
	IF(OPV(1)>0.0) THEN
      PHU(JJK,IHU(JJK))=OPV(1)
      ELSE
	PHU=1500
	END IF
	IF(XMTU(JJK).GT.0)PHU(JJK,IHU(JJK))=CAHU(1,365,TBSC(JJK),0)*
     1XMTU(JJK)
      Y1=PPLP(1,JJK)
      Y2=PPLP(2,JJK)
      IF(Y2>Y1)THEN
                X4=Y1
                X5=Y2
      ELSE
                X4=Y2
                X5=Y1
      END IF
      X1=ASPLT(X4)
      X2=ASPLT(X5)
	CALL ASCRV(X4,X5,X1,X2)
      PPCF(1,JJK)=X4
      PPCF(2,JJK)=X5
        IF(OPV(5)>0.)THEN
                X3=OPV(5)
        ELSE
                G1=X2
                DO IT=1,10
                        Z1=EXP(X4-X5*G1)
                        Z2=G1+Z1
                        FU=G1/Z2-.9
                        IF(ABS(FU).LT.1.E-5)EXIT
                        DFDU=Z1*(1.+X5*G1)/(Z2*Z2)
                        G1=G1-FU/DFDU
                END DO
            IF(IT>10)WRITE(KW(1),5)
            X3=G1
      END IF
      PPLA(JJK,IHU(JJK))=DMLA(JJK)*X3/(X3+EXP(X4-X5*X3))
      POP(JJK,IHU(JJK))=X3
      IF(OPV(6).GT.0.)FMX=OPV(6)
      FNMX(JJK)=FMX
      RETURN
    1 FORMAT(A12)
    5 FORMAT(5X,'!!!!! PLANT POP DID NOT CONVERGE')
  333 FORMAT(1X,I4,1X,A4,56F8.3)
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE CRGBD(RGS)
C     EPIC0509
C     THIS SUBPROGRAM CALCULATES ROOT GROWTH STRESSES CAUSED BY
C     TEMPERATURE,  ALUMINUM TOXICITY, AND SOIL STRENGTH AND DETERMINES
C     THE ACTIVE CONSTRAINT ON ROOT GROWTH (THE MINIMUM STRESS FACTOR).
      INCLUDE 'EPCM0509_su.for'
      RGS=1.
      IF(PARM(2).GT.1.99)RETURN
      II=3
      XX=STMP(ISL)/TOPC(JJK)
      IF(XX.LE.0.)GO TO 3
      IF(XX.LT.1.)RGS=SIN(1.5708*XX)
      A0=10.+(ALT(JJK)-1.)*20.
      IF(ALS(ISL).LE.A0)GO TO 2
      F=(100.-ALS(ISL))/(100.-A0)
      CALL CFRG(2,II,F,RGS,.1,JRT)
      IF(JRT.GT.0)GO TO 4
    2 CALL SBDSC(BDP(ISL),PARM(2),F,ISL,3)
      XX=ROK(ISL)
      F=F*(1.-XX/(XX+EXP(SCRP(1,1)-SCRP(1,2)*XX)))
      CALL CFRG(1,II,F,RGS,.1,JRT)
      GO TO 4
    3 RGS=0.
    4 STDA(II,JJK)=STDA(II,JJK)+(1.-RGS)/NBSL
      IF(ISL.EQ.LID(IR))RGSM=RGS
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE CROP
C     EPIC0509
C     THIS SUBPROGRAM PREDICTS DAILY POTENTIAL GROWTH OF TOTAL PLANT
C     BIOMASS AND ROOTS.
      INCLUDE 'EPCM0509_su.for'
	XX=.685-.209*ROSP
      PAR=.0005*RA*(1.-EXP(-XX*SLAI(JJK)))
	X2=PAR*AJWA(JJK)
      IF(ICG==0)THEN
		X1=AMAX1(VPD-1.,-.5)
		XX=(WA(JJK)-WAVP(JJK)*X1)*CLF
		DDM(JJK)=XX*X2
		IF(DDM(JJK)<1.E-10)THEN
			DDM(JJK)=0.
			RETURN
		END IF
	ELSE
    		X2=X2*WA(JJK)
		VPDX=.67*(ASVP(TMX+273)-RHD*ASVP(TX+273.))
    		X3=.01*WUB(JJK)*VPDX**(-.5)
		X4=SU*X3
		DDM(JJK)=MIN(X2,X4)		
	END IF
      DM(JJK)=DM(JJK)+DDM(JJK)
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE CSTRS
C     EPIC0509
C     THIS SUBPROGRAM ESTIMATES PLANT STRESS FACTORS CAUSED BY LIMITED
C     N, P, AIR, AND WATER AND DETERMINES THE ACTIVE CONSTRAINT
C     (MINIMUM STRESS FACTOR--N, P, WATER, OR TEMPERATURE).  CALLS
C     NFIX AND NFERT (AUTOMATIC FERTILIZER OPTION).
      INCLUDE 'EPCM0509_su.for'
      DIMENSION JFS(7)
      DATA JFS/11,12,13,14,15,16,17/
      J3=5
      VARC(15,JJK)=REG(JJK)
      IF(EP(JJK).LT.1.E-5)GO TO 8
      IF(RZSW.GT.0.)GO TO 6
      WS=0.
      GO TO 7
    6 WS=100.*RZSW/PAW
      WS=WS/(WS+EXP(SCRP(11,1)-SCRP(11,2)*WS))
    7 WS=(1.-PARM(35))*WS+PARM(35)*SU/(EP(JJK)+1.E-10)
    8 VARC(11,JJK)=WS
      WFX=0.
      IF(IDC(JJK).EQ.NDC(1).OR.IDC(JJK).EQ.NDC(2).OR.IDC(JJK).EQ.NDC(3)
     1.OR.IDC(JJK).EQ.NDC(10))CALL NFIX
      CALL NAJN(UN,WNO3,UNO3,SUN,1.,0)
      X1=SUN/(UNO3+1.E-10)
      UNO3=SUN+WFX
      UN1(JJK)=UN1(JJK)+UNO3
      IF(UPP.GT.SUP)CALL NAJN(UP,AP,UPP,SUP,1.,1)
      X2=MIN(1.,SUP/(UPP+1.E-10))
      UPP=SUP
      UP1(JJK)=UP1(JJK)+UPP
      CALL NAJN(UK,SOLK,UPK,SUK,1.,0)
      X3=SUK/(UPK+1.E-10)
      UPK=SUK
      UK1(JJK)=UK1(JJK)+UPK
      CALL NUTS(UN1(JJK),UN2(JJK),SN)
      SN=AMAX1(X1,SN)
      VARC(12,JJK)=SN
      CALL NUTS(UP1(JJK),UP2(JJK),SP)
      SP=AMAX1(X2,SP)
      VARC(13,JJK)=SP
C     CALL NUTS(UK1(JJK),UK2(JJK),SK)
C     SK=AMAX1(X3,SK)
C     VARC(14,JJK)=SK
      VARC(16,JJK)=SAT
      X1=.15625*TSRZ/SWRZ
      XX=X1-STX(2,JJK)
      IF(XX.GT.0.)GO TO 1
      SSLT=1.
      GO TO 2
    1 SSLT=AMAX1(0.,1.-STX(1,JJK)*XX)
    2 VARC(17,JJK)=SSLT
      CALL CFRG(6,J3,SAT,REG(JJK),0.,JRT)
      IF(JRT.GT.0)GO TO 3
      IF(ICG.EQ.0)CALL CFRG(1,J3,WS,REG(JJK),0.,JRT)
      IF(JRT.GT.0)GO TO 3
      CALL CFRG(3,J3,SP,REG(JJK),0.,JRT)
      IF(JRT.GT.0)GO TO 3
C     CALL CFRG(4,J3,SK,REG(JJK),0.,JRT)
C     IF(JRT.GT.0)GO TO 3
      CALL CFRG(7,J3,SSLT,REG(JJK),0.,JRT)
      IF(JRT.GT.0)GO TO 3
      ZZ=REG(JJK)
      CALL CFRG(2,J3,SN,ZZ,REG(JJK),JRT)
      IF(JRT.EQ.0)GO TO 3
      REG(JJK)=ZZ
      IF(IDC(JJK).EQ.NDC(1).OR.IDC(JJK).EQ.NDC(2).OR.IDC(JJK).EQ.NDC(3)
     1.OR.IDC(JJK).EQ.NDC(10))GO TO 3
      IF(BFT.LE.SN)GO TO 3
      IF(NFA.LT.IFA)GO TO 3
      CALL NFERT(3,IAUF)
    3 XX=1.-REG(JJK)
      N1=NCP(JJK)
      SFMO(J3,JJK)=SFMO(J3,JJK)+XX
      SF(J3,N1,JJK)=SF(J3,N1,JJK)+XX
      CGSF(J3,JJK)=XX
      BLYN(JJK)=BLYN(JJK)+1.
      J1=JFS(J3)
      SMMC(J1,JJK,MO)=SMMC(J1,JJK,MO)+XX
      VARC(J1,JJK)=REG(JJK)
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      FUNCTION EAJL(X,Y)
C     EPIC0509
C     THIS SUBPROGRAM IS CALLED BY ESLOS TO CALCULATE THE AMOUNT OF
C     MATERIAL ADDED TO THE TOP LAYER AND REMOVED FROM THE SECOND LAYER.
      EAJL=X*Y
      X=X-EAJL
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      FUNCTION EROWN(Y1)
C     EPIC0509
C     THIS SUBPROGRAM COMPUTES POTENTIAL WIND EROSION RATE FOR BARE
C     SOIL GIVEN WIND SPEED
      INCLUDE 'EPCM0509_su.for'
      DU10=U10*Y1
      IF(DU10.GT.U10MX(MO))U10MX(MO)=DU10
      USTR=.0408*DU10
      X1=USTR*USTR-USTW
      IF(X1.LT.0.)GO TO 2
      YWR=.255*X1**1.5
      EROWN=YWR*ALG
      GO TO 1
C     WRITE(KW(1),15)X,DU10,USTR,YWR,WDST(I)
  2   EROWN=0.
    1 RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE ERSC
C     EPCM0509_su.for
C     THIS SUBPROGRAM ESTIMATES THE RUSLE C FACTOR DAILY.
      INCLUDE 'EPCM0509_su.for'
      NN=NBC(IRO)
      SUM=0.
      TOT=0.
      DO 2 I=2,NBSL
      L=LID(I)
      IF(Z(L).GT.PMX)GO TO 3
      IF(I.GT.1)TOT=TOT+RSD(L)
      DO 1 K=1,NN
      SUM=SUM+RWT(L,JE(K))
    1 CONTINUE
    2 CONTINUE
      GO TO 4
    3 KK=LID(I-1)
      RTO=(PMX-Z(KK))/(Z(L)-Z(KK))
      TOT=TOT+RTO*RSD(L)
      DO 5 K=1,NN
      SUM=SUM+RTO*RWT(L,JE(K))
    5 CONTINUE
    4 SUM=SUM/PMX
      TOT=TOT/(PMX-Z(LD1))
	PLU=.951*RCF*EXP(-.0451*SUM-.00943*TOT/SQRT(RCF))            
      FRUF=MIN(.8,EXP(-.026*(RRUF-6.1)))
      IF(CVRS.LT.15.)GO TO 6
      FRSD=.0001
      GO TO 7
    6 FRSD=EXP(-PARM(23)*CVRS)
    7 FBIO=1.-FGC*EXP(-PARM(26)*CHT(JJK))
!    UNC-VWB-BARE ESTIMATE OF THE FRACTION OF BARE SOIL FOR WIND EROSION CALCULATIONS added FBARE=1-FGC
      FBARE=1-FGC
      SLR=AMAX1(1.E-10,FRSD*FBIO*FRUF*PLU)
C     WRITE(KW(1),6)IY,MO,KDA,SUM,TOT,RRUF,RSD(LID(1)),RZSW,CHT(JJK),SP,
C    1PLU,SR,RSC,RCC,RSM,SLR
C   6 FORMAT(1X,'>>>>>',3I3,13E13.5)
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE ESLOS(JRT)
C     EPIC0509
C     THIS SUBPROGRAM CALCULATES THE THICKNESS OF SOIL REMOVED BY EACH
C     EROSION EVENT, MOVES THE TOP LAYER INTO THE SECOND LAYER BY A DIST
C     EQUAL THE ERODED THICKNESS, AND ADJUSTS THE TOP LAYER SOIL
C     PROPERTIES BY INTERPOLATION.  WHEN THE SECOND LAYER IS REDUCED TO
C     TO A THICKNESS OF 10 MM, IT IS PLACED INTO THE THIRD LAYER.
      INCLUDE 'EPCM0509_su.for'
      WFN(X1,X2,Z1,Z2,ZZ)=(Z1*X1+Z2*X2)/ZZ
      TK=.1*YERO/BD(LD1)
	THK=THK+TK
      TK=MIN(TK*.001,Z(LD1))
      J=LID(NBSL)
      W1=Z(LD1)-TK
      W2=TK
      WT(LD1)=WT(LD1)-YERO
      IF(Z(LID(2))-Z(LD1)-TK.GT..01)GO TO 10
C     REMOVE LAYER 2 AND PLACE SMALL REMAINING CONTENTS IN LAYER 3
      ISL=LID(3)
      LD2=LID(2)
      Z1=Z(LD2)-Z(LD1)
      Z2=Z(ISL)-Z(LD2)
      VV=Z1+Z2
      ZZ=.01/VV
      PSP(ISL)=WFN(PSP(LD2),PSP(ISL),Z1,Z2,VV)
      BDM(ISL)=WFN(BDM(LD2),BDM(ISL),Z1,Z2,VV)
      CLA(ISL)=WFN(CLA(LD2),CLA(ISL),Z1,Z2,VV)
      SIL(ISL)=WFN(SIL(LD2),SIL(ISL),Z1,Z2,VV)
      SAN(ISL)=100.-CLA(ISL)-SIL(ISL)
      ROK(ISL)=WFN(ROK(LD2),ROK(ISL),Z1,Z2,VV)
      SATC(ISL)=WFN(SATC(LD2),SATC(ISL),Z1,Z2,VV)
      PH(ISL)=WFN(PH(LD2),PH(ISL),Z1,Z2,VV)
      WT(ISL)=WT(ISL)+WT(LD2)
      BD(ISL)=.0001*WT(ISL)/VV
      WNO3(ISL)=WNO3(ISL)+WNO3(LD2)
      WHPN(ISL)=WHPN(ISL)+WHPN(LD2)
      WHSN(ISL)=WHSN(ISL)+WHSN(LD2)
      WBMN(ISL)=WBMN(ISL)+WBMN(LD2)
      WLSN(ISL)=WLSN(ISL)+WLSN(LD2)
      WLMN(ISL)=WLMN(ISL)+WLMN(LD2)
      WHPC(ISL)=WHPC(ISL)+WHPC(LD2)
      WHSC(ISL)=WHSC(ISL)+WHSC(LD2)
      WBMC(ISL)=WBMC(ISL)+WBMC(LD2)
      WLS(ISL)=WLS(ISL)+WLS(LD2)
      WLM(ISL)=WLM(ISL)+WLM(LD2)
      WLSL(ISL)=WLSL(ISL)+WLSL(LD2)
      WLSC(ISL)=WLSC(ISL)+WLSC(LD2)
      WLMC(ISL)=WLMC(ISL)+WLMC(LD2)
      WLSLC(ISL)=WLSLC(ISL)+WLSLC(LD2)
      WLSLNC(ISL)=WLSC(ISL)-WLSLC(ISL)
      WP(ISL)=WP(ISL)+WP(LD2)
      RSD(ISL)=.001*(WLS(ISL)+WLM(ISL))
      AP(ISL)=AP(ISL)+AP(LD2)
      PMN(ISL)=PMN(ISL)+PMN(LD2)
      FOP(ISL)=FOP(ISL)+FOP(LD2)
      OP(ISL)=OP(ISL)+OP(LD2)
      S15(ISL)=S15(ISL)+S15(LD2)
      FC(ISL)=FC(ISL)+FC(LD2)
      PO(ISL)=PO(ISL)+PO(LD2)
      CALL SPOFC(ISL)
      ST(ISL)=ST(ISL)+ST(LD2)
      LORG(LD1)=LORG(LD2)
C     SPLIT LAYER NEAREST SURFACE WITH THICKNESS > 0.15 M IN HALF
      ZMX=0.
      L1=LD1
      MXZ=LD2
      DO 5 J=3,NBSL
      ISL=LID(J)
      ZZ=Z(ISL)-Z(L1)
      IF(ZZ.LT..15)GO TO 4
      MXZ=J
      ZMX=ZZ
      GO TO 7
    4 L1=ISL
      IF(ZZ.LE.ZMX+.01)GO TO 5
      ZMX=ZZ
      MXZ=J
    5 CONTINUE
      ISL=LID(MXZ)
      L1=LID(MXZ-1)
      IF(ZMX.GT.ZQT)GO TO 7
      NBSL=NBSL-1
      IF(NBSL.GT.2)GO TO 1
      JRT=1
      RETURN
C     XNS=NBSL-1
C     XNS=1./XNS
    1 DO 6 J=2,NBSL
    6 LID(J)=LID(J+1)
      GO TO 10
    7 MX1=MXZ-1
      IF(MX1.EQ.2)GO TO 9
      DO 8 J=2,MX1
    8 LID(J)=LID(J+1)
    9 LID(MX1)=LD2
      LORG(LD2)=LORG(LID(MXZ))
      CALL SPLA(ISL,L1,LD2,1,.5)
C     ADJUST LAYER 1 BY INTERPOLATING BETWEEN LAYER 2 USING ERODED THICK
   10 ISL=LID(2)
      PSP(LD1)=WFN(PSP(LD1),PSP(ISL),W1,W2,Z(LD1))
      BDM(LD1)=WFN(BDM(LD1),BDM(ISL),W1,W2,Z(LD1))
      CLA(LD1)=WFN(CLA(LD1),CLA(ISL),W1,W2,Z(LD1))
      SIL(LD1)=WFN(SIL(LD1),SIL(ISL),W1,W2,Z(LD1))
      SAN(LD1)=100.-CLA(LD1)-SIL(LD1)
      BD(LD1)=WFN(BD(LD1),BD(ISL),W1,W2,Z(LD1))
      SATC(LD1)=WFN(SATC(LD1),SATC(ISL),W1,W2,Z(LD1))
C     HCL(LD1)=SATC(LD1)*UPS
      PH(LD1)=WFN(PH(LD1),PH(ISL),W1,W2,Z(LD1))
      XX=Z(ISL)-Z(LD1)
      GX=XX-TK
      RTO=GX/XX
      RX=1.
      IF(ROK(LD1).LT.1.E-10)GO TO 11
      X3=ROK(LD1)
      ROK(LD1)=WFN(ROK(LD1),ROK(ISL),W1,W2,Z(LD1))
      RX=(100.-ROK(LD1))/(100.-X3)
   11 W1=W1/Z(LD1)
      W2=W2/XX
      S15(LD1)=WFN(S15(LD1),S15(ISL),W1,W2,RX)
      FC(LD1)=WFN(FC(LD1),FC(ISL),W1,W2,RX)
      PO(ISL)=PO(ISL)*RTO
      S15(ISL)=S15(ISL)*RTO
      FC(ISL)=FC(ISL)*RTO
      CALL SPOFC(ISL)
      WT(ISL)=WT(ISL)*RTO
      PO(LD1)=WFN(PO(LD1),PO(ISL),W1,W2,RX)
      CALL SPOFC(LD1)
      WNO3(LD1)=WNO3(LD1)+EAJL(WNO3(ISL),W2)
      WHPN(LD1)=WHPN(LD1)+EAJL(WHPN(ISL),W2)
      WHSN(LD1)=WHSN(LD1)+EAJL(WHSN(ISL),W2)
      WBMN(LD1)=WBMN(LD1)+EAJL(WBMN(ISL),W2)
      WLSN(LD1)=WLSN(LD1)+EAJL(WLSN(ISL),W2)
      WLMN(LD1)=WLMN(LD1)+EAJL(WLMN(ISL),W2)
      WHPC(LD1)=WHPC(LD1)+EAJL(WHPC(ISL),W2)
      WHSC(LD1)=WHSC(LD1)+EAJL(WHSC(ISL),W2)
      WBMC(LD1)=WBMC(LD1)+EAJL(WBMC(ISL),W2)
      WLS(LD1)=WLS(LD1)+EAJL(WLS(ISL),W2)
      WLM(LD1)=WLM(LD1)+EAJL(WLM(ISL),W2)
      WLSL(LD1)=WLSL(LD1)+EAJL(WLSL(ISL),W2)
      WLSC(LD1)=WLSC(LD1)+EAJL(WLSC(ISL),W2)
      WLMC(LD1)=WLMC(LD1)+EAJL(WLMC(ISL),W2)
      WLSLC(LD1)=WLSLC(LD1)+EAJL(WLSLC(ISL),W2)
      WLSLNC(LD1)=WLSC(LD1)-WLSLC(LD1)
      WP(LD1)=WP(LD1)+EAJL(WP(ISL),W2)
      RSD(LD1)=.001*(WLS(LD1)+WLM(LD1))
      AP(LD1)=AP(LD1)+EAJL(AP(ISL),W2)
      PMN(LD1)=PMN(LD1)+EAJL(PMN(ISL),W2)
      FOP(LD1)=FOP(LD1)+EAJL(FOP(ISL),W2)
      OP(LD1)=OP(LD1)+EAJL(OP(ISL),W2)
      SOLK(LD1)=SOLK(LD1)+EAJL(SOLK(ISL),W2)
      EXCK(LD1)=EXCK(LD1)+EAJL(EXCK(ISL),W2)
      FIXK(LD1)=FIXK(LD1)+EAJL(FIXK(ISL),W2)
      ST(LD1)=ST(LD1)+EAJL(ST(ISL),W2)
      XY=.01*(1.-.01*ROK(LD1))
      XX=XY
      WT(LD1)=BD(LD1)*100.
      ABD=WT(LD1)
      DO 12 J=2,NBSL
      ISL=LID(J)
      Z(ISL)=Z(ISL)-TK
      ABD=ABD+WT(ISL)
   12 CONTINUE
      XX=Z(LID(NBSL))
      IF(XX.GT.ZF)GO TO 13
      ZF=0.
      JRT=1
      RETURN
C  13 IF(XX.LT.1.)SMX=SMX*(1.-100.*FC(LD1)*TK/CAP)
   13 IF(BIG.LT.XX)GO TO 14
      BIG=XX
      PMX=XX
   14 ABD=ABD*1.E-4/Z(LID(NBSL))
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE EWEMHKS(JRT)
C     EPIC0509
C     THIS SUBPROGRAM ESTIMATES DAILY SOIL LOSS CAUSED BY WIND EROSION,
C     GIVEN THE AVERAGE WIND SPEED AND DIRECTION.
      INCLUDE 'EPCM0509_su.for'
      JRT=0
      IF(U10.GT.PARM(67))GO TO 5
    6	JRT=1
	RETURN
    5 WD=193.*EXP(1.103*(U10-30.)/(U10+1.))
      BT=PI2/4.+TH-ANG
      ALG=FL*FW/(FL*ABS(COS(BT))+FW*ABS(SIN(BT)))
      IF(RGIN.LT.1.E-10) GO TO 2
      X1=1.+RHTT
      RK=.004*X1*X1/RGIN
      IF(RK.LT.2.27) GO TO 2
      IF(RK.LT.89.) GO TO 1
      RF=.336*EXP(.00324*RK)
      GO TO 3
    1 RF=1.125-.153*ALOG(RK)
      GO TO 3
    2 RF=1.
    3 VAC=1000.*(VAC+BWD(3,JD)*RSD(LD1))
      IF(VAC.GT.4000.)GO TO 6
      VF=.2533*VAC**1.363
      BV=1.+VF*(8.9303E-5+VF*(8.5074E-9-VF*1.5888E-13))
      AV=EXP(VF*(-7.5935E-4-VF*(4.7416E-8-VF*2.9476E-13)))
      E2=695.*WK*RF
	XL=1.5579E6*E2**(-1.2571)*EXP(-.001558*E2)
      AA=ALG*1000./XL
      F=(AA/(AA+EXP(-3.2388-1.6241*AA)))
	XX=F**.3484+WCF-1.
	IF(XX.LE.0.)GO TO 6
      E4=(XX*E2**.3484)**2.8702
      E5=AV*E4**BV
      YW=E5*WD/WB
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE EWER(JRT)
C     EPIC0509
C     THIS SUBPROGRAM ESTIMATES DAILY SOIL LOSS CAUSED BY WIND EROSION,
C     GIVEN THE AVERAGE WIND SPEED AND DIRECTION.
      INCLUDE 'EPCM0509_su.for'
      JRT=0
      IF(U10.GT.PARM(67))GO TO 1
      JRT=1
      RETURN
    1 BT=PI2/4.+TH-ANG
      ALG=FL*FW/(FL*ABS(COS(BT))+FW*ABS(SIN(BT)))
      RRF=11.9*(1.-EXP(-(RRUF/9.8)**1.3))
      RIF=ABS(SIN(BT))*(1.27*RHTT**.52)
      RFB=AMAX1(.1,RRF+RIF)
      RFC=.77*1.002**RHTT
      RGRF=1.
      X1=(10./RFB)**RFC
      IF(X1.LT.10.)RGRF=1.-EXP(-X1)
	X1=VAC
      X1=MIN(10.,X1+BWD(3,JD)*RSD(LD1))
      VF=1.-X1/(X1+EXP(SCRP(13,1)-SCRP(13,2)*X1))
      ALG=1.-EXP(-ALG/.07)
      RTO=ST(LD1)/S15(LD1)
      SMM(68,MO)=SMM(68,MO)+ST(LD1)
      VAR(68)=ST(LD1)
      NWDA=NWDA+1
      USTW=USTT+.5*RTO*RTO
      ROKF=EXP(-.047*ROK(LD1))
      CALL EWNINT
C     WK1=WK*EXP(-PARM(8)*RRUF-PARM(13)*TLMF)
      WK1=WK*EXP(-.001*TLMF)
      SMM(38,MO)=SMM(38,MO)+WK1
      VAR(38)=WK1
      YW=8640.*YW*RGRF*VF*ROKF*WK1
      TLMF=TLMF+YW
C     WRITE(KW(1),7)KDA,MO,U10,RTO,USTW,RRUF,RHTT,RIF,RGRF,VF,WK1,YW
C   7 FORMAT(1X,2I4,10F10.3)
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE EWNINT
C     EPIC0509
C     THIS SUBPROGRAM ESTIMATES DAILY POTENTIAL WIND EROSION FOR A BARE
C     SOIL BY INTEGRATING EROSION RATES WITH TIME GIVEN THE WIND SPEED
C     DISTRIBUTION
      INCLUDE 'EPCM0509_su.for'
      WW=MIN(.5,ATRI(.1,.35,.6,9)*UAVM(MO)/U10)
      SUM=.6424*WW**(-.1508)*EXP(.4336*WW)
      DU10=USTRT/.0408
      Y1=DU10/U10
      XX=ALOG10(Y1)/WW
	IF(XX.GT.1.3)GO TO 7
      IF(XX.LT.-3.)GO TO 1
	XX=10**XX
	GO TO 6
    7 YW=0.
      RETURN
    1 X1=1.
	GO TO 4 
    6 X1=EXP(-XX)
    4 DX=.1
      YW=0.
      Z1=0.
C     WRITE(KW(1),3)X1,DX,Z1,WW
    5 X2=X1-DX
      IF(X2.LE.0.)GO TO 2
      Y2=(-ALOG(X2))**WW/SUM
      Z2=EROWN(Y2)
      XY=(Y1+Y2)*DX
      XZ=(Z2+Z1)*DX
      YW=YW+XZ
C     WRITE(KW(1),3)X2,DX,Z2,YW
      X1=X2
      Y1=Y2
      Z1=Z2
      IF(XY.LT..1)GO TO 5
    2 DX=DX*.5
      IF(DX.GT.1.E-4)GO TO 5
      YW=.5*YW
      RETURN
C   3 FORMAT(10E13.5)
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE EWIK
C     THIS SUBPROGRAM ESTIMATES THE SOIL ERODIBILITY FACTOR FOR THE WIND
C     EROSION EQ.
      INCLUDE 'EPCM0509_su.for'
      IF(SAN(LD1).GT.85.+.5*CLA(LD1))GO TO 5
      IF(SAN(LD1).GT.70.+CLA(LD1))GO TO 6
      IF(SIL(LD1).GT.80..AND.CLA(LD1).LT.12.)GO TO 7
      IF(CAC(LD1).GT.0.)GO TO 4
      IF(CLA(LD1).LT.7.)GO TO 12
      IF(CLA(LD1).LT.20.)GO TO 3
      IF(CLA(LD1).LT.27.)GO TO 1
      IF(CLA(LD1).LT.35.)GO TO 2
      IF(SAN(LD1).GT.45.)GO TO 9
      GO TO 10
    1 IF(SIL(LD1).LT.28.)GO TO 9
      GO TO 8
    2 IF(SAN(LD1).LT.20.)GO TO 7
      IF(SAN(LD1).LT.45.)GO TO 8
      GO TO 9
    3 IF(SAN(LD1).GT.52.)GO TO 10
      GO TO 9
    4 IF(SAN(LD1).LT.45.)GO TO 10
      IF(CLA(LD1).LT.20.)GO TO 10
      IF(SIL(LD1).GT.28.)GO TO 10
      GO TO 9
   12 IF(SIL(LD1).LT.50.)GO TO 10
      GO TO 9
    5 WK=1.
      GO TO 11
    6 WK=.43
      GO TO 11
    7 WK=.12
      GO TO 11
    8 WK=.16
      GO TO 11
    9 WK=.18
      GO TO 11
   10 WK=.28
   11 RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE EYCC
C     EPIC0509
C     THIS SUBPROGRAM ESTIMATES THE USLE C FACTOR BASED ON PLANT POP &
C     BIOMASS & RESIDUE COVER
      INCLUDE 'EPCM0509_su.for'
	X1=MIN(10.,PARM(60)*CV)
	CVF=(.8*EXP(-X1)+CFMN)*(.9*(1.-CVP)+.1)
      CVF=CVF*EXP(-.05*ROK(LD1))
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE EYSED
C     EPIC0509
C     THIS SUBPROGRAM PREDICTS DAILY SOIL LOSS CAUSED BY WATER EROSION
C     AND ESTIMATES THE NUTRIENT ENRICHMENT RATIO.
      INCLUDE 'EPCM0509_su.for'
	DIMENSION XTP(3)
	CALL ERSC
      CALL EYCC
      CVX=CVF
      IF(ICF.EQ.0)CVX=SLR
      F=1.
      XX=STMP(LID(2))
      IF(XX.GT.0.)GO TO 1
      XX=273.+XX
      F=XX/(XX+EXP(SCRP(18,1)-SCRP(18,2)*XX))
    1 XX=CVX*USL*F
      YLM=100.*RFV
      IF(RFV.LT.12.7)GO TO 2
      YSD(3)=MIN(YLM,EI*XX*1.292)
      SMM(29,MO)=SMM(29,MO)+CVF*EI
      SMM(28,MO)=SMM(28,MO)+EI
	X1=SLR*EI
      SMM(37,MO)=SMM(37,MO)+X1
      YSD(7)=MIN(YLM,X1*RSLK)
	IF(YSD(7).LT.1.E-10)GO TO 2
C	CVX=100.*CVRS/(CVRS+EXP(SCRP(5,1)-SCRP(5,2)*CVRS))
C	B=BETA*EXP(-.025*CVX)
	B=BETA
	RXM=B/(1.+B)
	RLFX=UPSX**RXM
	SMM(90,MO)=SMM(90,MO)+RLFX*RSF*EI
	SMM(91,MO)=SMM(91,MO)+REK*EI
	YI=MIN(YLM,.5*X1*RSK)
	SUM=PSZ(1)*SAN(LD1)
	SUM=SUM+PSZ(2)*SIL(LD1)
	SUM=SUM+PSZ(3)*CLA(LD1)
	SUM=.01*PARM(71)*SUM/(QPR+1.E-5)
	T2=PARM(72)*QPR*UPS
	IF(T2.GT.YI)GO TO 5
	YSD(8)=AMAX1(0.,YI+SUM*(T2-YI))
	RUSM(2)=RUSM(2)+YSD(8)
	RUSM(3)=RUSM(3)+YI
	GO TO 2
    5 YSD(8)=1.5*X1*RLFX*RSK
	RUSM(1)=RUSM(1)+YSD(8)
    2 IF(QD.LT.1.)GO TO 4
      REP=REP*(QD/RWO)**.1
      YSD(2)=MIN(YLM,(.646*EI+.45*QD*QP**.3333)*XX)
      QQ=QD*QP
      YSD(4)=MIN(YLM,YSW*QQ**.65*XX)
      YSD(1)=MIN(YLM,2.5*SQRT(QQ)*XX)
      YSD(6)=MIN(YLM,BUS(1)*QD**BUS(2)*QP**BUS(3)*XX)
      CX(MO)=CX(MO)+1.
      TAL(MO)=TAL(MO)+AL5
      YSD(5)=MIN(YLM,WSA1*QQ**.56*XX)
      DR=SQRT(QP/REP)
      CY=.1*YSD(4)/QD+1.E-10
      IF(IERT.GT.0)GO TO 6
      DR1=1./DR
      B2=-ALOG10(DR1)/2.699
      B1=1./.1**B2
      ER=AMAX1(1.,B1*(CY+1.E-4)**B2)
      GO TO 3
    6 ER=.78*CY**(-.2468)
    3 SMM(58,MO)=SMM(58,MO)+ER
    4 RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE HCNSLP(CNII,X1)
C     EPIC0509
C     THIS SUBPROGRAM ADJUSTS THE 2 CONDITION SCS RUNOFF CURVE
C     NUMBER FOR WATERSHED SLOPE AND COMPUTES CN1 AND CN3.
      INCLUDE 'EPCM0509_su.for'
      C2=100.-CNII
      CN3=CNII*EXP(.006729*C2)
      X1=(CN3-CNII)*UPSQ+CNII
      C2=100.-X1
      CN1=AMAX1(.4*X1,X1-20.*C2/(C2+EXP(2.533-.0636*C2)))
      SMX=254.*(100./CN1-1.)
      CN3=X1*EXP(.006729*C2)
      S3=254.*(100./CN3-1.)
      S2=254.*(100./X1-1.)
      SUM=0.
      TOT=0.
      DO 1 J=1,NBSL
      ISL=LID(J)
      IF(Z(ISL).GT.1.)GO TO 2
      SUM=SUM+FC(ISL)-S15(ISL)
    1 TOT=TOT+PO(ISL)-S15(ISL)
      GO TO 3
    2 L1=LID(J-1)
      RTO=(1.-Z(L1))/(Z(ISL)-Z(L1))
      SUM=SUM+RTO*(FC(ISL)-S15(ISL))
      TOT=TOT+RTO*(PO(ISL)-S15(ISL))
    3 N1=100.+SCRP(30,2)*(TOT/SUM-1.)+.5
      SCRP(4,1)=1.-S2/SMX+SCRP(30,1)
      SCRP(4,2)=1.-S3/SMX+N1
      Z1=ASPLT(SCRP(4,1))
      Z2=ASPLT(SCRP(4,2))
      CALL ASCRV(SCRP(4,1),SCRP(4,2),Z1,Z2)
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE HEVP
C     EPIC0509
C     THIS SUBPROGRAM ESTIMATES DAILY EVAPOTRANSPIRATION.  THERE ARE
C     FOUR OPTIONS FOR COMPUTING POTENTIAL EVAP(PENMAN-MONTEITH, PENMAN,
C     PRIESTLEY-TAYLOR, & HARGREAVES)
      INCLUDE 'EPCM0509_su.for'
      SUM=.01
      EPP=0.
      NN=NBC(IRO)
      CHMX=0.
      DO 15 K=1,NN
      K1=JE(K)
      SUM=SUM+SLAI(K1)
      IF(CHT(K1).GT.CHMX)CHMX=CHT(K1)
   15 EP(K1)=0.
      X1=AMAX1(.4*SUM,PARM(41)*(CV+.1))
      EAJ=EXP(-X1)
      IF(SNO.GT.5.)GO TO 2
	IF(ICV.EQ.0)GO TO 26
	X1=1.-EAJ
	ALB=(.23*X1+PALB*FCV)/(FCV+X1)
	EAJ=MIN(EAJ,1.-FCV)
	GO TO 3
   26 ALB=.23*(1.-EAJ)+SALB*EAJ
      GO TO 3
    2 ALB=.6
      EAJ=.5
    3 TK=TX+273.
      RSO=RAMX
      XL=2.501-2.2E-3*TX
      EA=ASVP(TK)
      ED=EA*RHD
      VPD=EA-ED
      SMM(9,MO)=SMM(9,MO)+VPD
      VAR(9)=VPD
      RALB1=RA*(1.-ALB)
      IF(IET.LT.5)GO TO 1
C     BAIER-ROBERTSON PET METHOD
      EO=AMAX1(0.,.288*TMX-.144*TMN+.139*RSO-4.931)
      GO TO 13
    1 IF(IET.LT.4)GO TO 4

C     HARGREAVES PET METHOD

C    UNC added following EPIC modular codes

      IF(IET==4.AND.PARM(13)>0.0)THEN
          HGX=PARM(13)
      ELSE
          IF(WCF<0.5)THEN
              HGXW=0.5
          ELSE
              HGXW=MIN(0.6,WCF)
          END IF
          IF(CLF>7.0)THEN
              HGX0=0.5
          ELSE
              HGX0=MIN(0.6,1.2-0.1*CLF)
          END IF
          HGX=0.5*(HGXW+HGX0)
      END IF
      
      RAMM=RSO/XL
C      EO=AMAX1(0.,PARM(38)*RAMM*(TX+17.8)*(TMX-TMN)**PARM(13)
      EO=AMAX1(0.,PARM(38)*RAMM*(TX+17.8)*(TMX-TMN)**HGX )

      EO=MIN(9.,EO)
C      write(KW(1),'(/T10,A,3F6.3,A)')'**********HGX= ',hgx,wcf,clf,'**********'

      GO TO 13
    4 DLT=EA*(6790.5/TK-5.029)/TK
      XX=DLT+GMA
      TK4=TK**4
      IF(IET.LT.3)GO TO 5
C     PRIESTLEY-TAYLOR PET METHOD
C     R4=1.-.261*EXP(-7.77E-4*TX*TX)
C     R6=.04184*(R4-.96)*1.17E-7*TK4*(.2+.8*RTO)
C     RAMM=(RALB1+R6)/XL
      RAMM=RALB1/XL
      EO=1.28*RAMM*DLT/XX
      GO TO 13
    5 RBO=(.34-.14*SQRT(ED))*4.9E-9*TK4
      RTO=MIN(.99,RA/(RSO+.1))
      RN=RALB1-RBO*(.9*RTO+.1)
      X2=RN*DLT
      IF(IET.LT.2)GO TO 6
C     PENMAN PET METHOD
      FWV=2.7+1.63*U10
      X3=GMA*FWV*VPD
      X1=X2/XL+X3
      EO=X1/XX
      GO TO 13
C     PENMAN-MONTEITH PET METHOD
    6 RHO=.01276*PB/(1.+.00367*TX)
      IF(IGO.EQ.0)GO TO 12
      IF(CHMX.GT.8.)GO TO 8
      UZZ=U10
      ZZ=10.
      GO TO 9
    8 ZZ=CHMX+2.
      UZZ=U10*ALOG(ZZ/.0005)/9.9035
    9 X1=ALOG10(CHMX+.01)
      Z0=10.**(.997*X1-.883)
      ZD=10.**(.979*X1-.154)
      RV=6.25*(ALOG((ZZ-ZD)/Z0))**2/UZZ
      X3=VPD-VPTH(JJK)
      IF(X3.LE.0.)GO TO 10
      FVPD=AMAX1(.1,1.-VPD2(JJK)*X3)
      GO TO 11
   10 FVPD=1.
   11 G1=GSI(JJK)*FVPD
      RC=PARM(1)/((SUM+.01)*G1*EXP(.00155*(330.-CO2)))
      EPP=PARM(74)*(X2+86.66*RHO*VPD/RV)/(XL*(DLT+GMA*(1.+RC/RV)))
   12 RV=350./U10
      EO=PARM(74)*(X2+86.66*RHO*VPD/RV)/(XL*XX)
      IF(EPP.GT.EO)EO=EPP
      GO TO 24
   13 EPP=MIN(EO,EO*SUM/3.)
   24 IF(IGO.EQ.0)GO TO 22
      XX=EPP/SUM
      DO 16 K=1,NN
      K1=JE(K)
   16 EP(K1)=SLAI(K1)*XX
   22 ES=EO*EAJ
      ST0=RALB1
      ES=MIN(ES,ES*EO/(ES+EPP+1.E-10))
      IF(SNO.GE.ES)GO TO 21
      XX=ES-SNO
      ES=SNO
      SNO=0.
      TOT=0.
      DO 19 J=1,NBSL
      ISL=LID(J)
      RTO=1000.*Z(ISL)
      SUM=XX*RTO/(RTO+EXP(SCRP(2,1)-SCRP(2,2)*RTO))
      XZ=FC(ISL)-S15(ISL)
      IF(ST(ISL).GT.FC(ISL))GO TO 17
      F=EXP(PARM(12)*(ST(ISL)-FC(ISL))/XZ)
      GO TO 18
   17 F=1.
   18 ZZ=SUM-PARM(61)*TOT-(1.-PARM(61))*ES
      SEV(ISL)=ZZ*F
      XY=PARM(5)*S15(ISL)
      IF(Z(ISL).GT..2)GO TO 20
      IF(ST(ISL)-SEV(ISL).LT.XY)SEV(ISL)=ST(ISL)-XY-1.E-5
      ES=ES+SEV(ISL)
      ST(ISL)=ST(ISL)-SEV(ISL)
      TOT=SUM
   19 CONTINUE
      J=NBSL
   20 NEV=J
      Z1=Z(LID(J-1))
      RTO=(.2-Z1)/(Z(ISL)-Z1)
      X1=RTO*ST(ISL)
      X2=RTO*XY
      IF(X1-SEV(ISL).LT.X2)SEV(ISL)=X1-X2
      ES=ES+SEV(ISL)
      ST(ISL)=AMAX1(1.E-5,ST(ISL)-SEV(ISL))
      GO TO 23
   21 SNO=SNO-ES
      NEV=1
   23 XX=AMAX1(0.,EO-ES)
      IF(EPP.LE.XX)GO TO 25
      X1=XX/EPP
      EPP=XX
      DO 7 K=1,NN
      K1=JE(K)
    7 EP(K1)=EP(K1)*X1
   25 VAR(65)=EPP
      SMM(12,MO)=SMM(12,MO)+EPP
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE HFURD
C     EPIC0509
C     THIS SUBPROGRAM COMPUTES THE STORAGE VOLUME OF FURROW DIKES GIVEN
C     DIKE INTERVAL AND HEIGHT, RIDGE HEIGHT, AND SLOPE.
      INCLUDE 'EPCM0509_su.for'
      DH=DHT*.001
      H2=2.*DH
      X1=.001*DKHL
      TW=RGIN-X1
      BW=AMAX1(TW-4.*X1,.1*TW)
      DI=DKIN-X1
      D2=DH*(1.-2.*UPS)
      D3=DH-UPS*(DI-H2)
      X1=(TW-BW)/DH
      TW2=BW+D2*X1
      TW3=BW+D3*X1
      A2=.5*D2*(TW2+BW)
      A3=.5*D3*(TW3+BW)
      XX=DH/UPS
      ZZ=DI-H2
      X1=FDSF/(RGIN*DKIN)
      IF(XX.GT.ZZ)GO TO 2
      DV=X1*A2*(DH+.5*(XX-H2))
      GO TO 3
    2 DV=X1*(A2*DH+.5*(A2+A3)*(DI-4.*DH)+A3*D3)
    3 RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE HGAWY(A,PT,Q1,RX)
C     EPIC0509
C     THIS SUBPROGRAM SOLVES THE GREEN & AMPT INFILTRATION EQ ITERATIVELY
C     TO OBTAIN RESULT AT DT/2
      INCLUDE 'EPCM0509_su.for'
      F1=PT-QD
      ZI=SATK*(SCN/F1+1.)
      IF(RX.LE.ZI)GO TO 1
      QL=A*(RX-ZI)/RX
      GB=QL
      GL=0.
      FF=F1-GB
      ZI=SATK*(SCN/FF+1.)
      QB=A*(RX-ZI)/RX
      DO 7 I=1,10
      B2=(QL-QB)/(GL-GB)
      B1=QL-B2*GL
      G1=B1/(1.-B2)
      FF=F1-G1
      ZI=SATK*(SCN/FF+1.)
      Q1=A*(RX-ZI)/RX
      GQ=Q1-G1
      IF(ABS(GQ/G1).LT..001)GO TO 3
      IF(GQ.GT.0.)GO TO 9
      GB=G1
      QB=Q1
      GO TO 7
    9 GL=G1
      QL=Q1
    7 CONTINUE
      GO TO 3
    1 Q1=0.
    3 QD=QD+Q1
      WRITE(KW(1),2)I,SATK,RX,ZI,F1,Q1,PT,QD
      RETURN
    2 FORMAT(1X,I3,10F10.3)
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE HGASP(A,PT,Q1,RX)
C     EPIC0509
C     THIS SUBPROGRAM SOLVES THE GREEN & AMPT INFILTRATION EQ ASSUMING
C     F1 IS INCREMENTED BY TOTAL RAIN DURING DT
      INCLUDE 'EPCM0509_su.for'
      F1=PT-QD
      X1=SATK
      IF(STMP(LID(2)).LT.-1.)X1=.01*X1
      ZI=X1*(SCN/F1+1.)
      IF(RX.LE.ZI)GO TO 1
      Q1=A*(RX-ZI)/RX
      GO TO 3
    1 Q1=0.
    3 QD=QD+Q1
C     WRITE(KW(1),2)SATK,RX,ZI,F1,Q1,PT,QD
C   2 FORMAT(1X,10F10.3)
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE HIRG(AIR,EFD,ZX,JRT,IRX,IRY)
C     EPIC0509
C     THIS SUBPROGRAM IS USED TO SIMULATE AUTOMATIC OR USER SPECIFIED
C     IRRIGATION APPLICATIONS.  COMPUTES THE AMOUNT OF IRRIGATION WATER
C     NEEDED TO BRING THE ROOT ZONE WATER CONTENT TO FIELD CAPACITY, FOR
C     AUTOMATIC OPTION.  USER SPECIFIED AMOUNT IS APPLIED FOR
C     MANUAL OPTION.  EROSION AND RUNOFF ARE ESTIMATED.
      INCLUDE 'EPCM0509_su.for'
      IF(VIRT.LT.VIMX.AND.NII.GE.IRI)GO TO 8
	AIR=0.
      JRT=1
      RETURN
    8 X3=COIR*AIR
      N1=MAX0(1,NCP(JJK))
	I=1
      X4=AIR      
      AIR=AIR*EFD
      IF(IRY.EQ.1)GO TO 18
      X1=10000.
      IF(IAC.EQ.0)GO TO 2
      XX=10000.
      GO TO 4
   18 IF(IAC.GT.0)GO TO 5
      X1=AIR
    2 XX=(PAW-RZSW)/(1.-EFI)
    4 X4=MIN(X1,VIMX-VIRT,XX,ARMX)
      AIR=X4*EFD
      X3=COIR*X4
      IF(AIR.GT.ARMN)GO TO 5
      AIR=0.
      GO TO 10
    5 NII=0
      QXM=AIR*EFI
      IF(IRR.EQ.5)GO TO 15
      IF(QXM.LT.1.E-5)GO TO 7
      QPX=QXM/24.
      IF(IRR.EQ.1)GO TO 6
      CVF=1.
      IF(RHTT.LT.1.E-10.OR.RGIN.LT.1.E-5)GO TO 3
      X1=1000.*RGIN/RHTT
      QPX=2.778E-6*QPX*RGIN*WSA/FW
      DX=(2.*QPX/(SX*X1*(1./(4.+16./(X1*X1)))**.3333))**.375
      X2=DX*X1
      PX=2.*SQRT(DX*DX+.25*X2*X2)
      AX=.5*DX*X2
      VX=(AX/PX)**.6667*SX
      CY=PARM(36)*VX**PARM(31)
      YX=10.*QXM*CY*EK
      GO TO 1
    6 CALL EYCC
    3 YX=2.5*CVF*USL*SQRT(QPX*QXM)
      GO TO 1
   15 DO 17 J=1,NBSL
      I=LID(J)
      IF(ZX.LT.Z(I))GO TO 16
   17 CONTINUE
   16 ST(I)=ST(I)+AIR
      YX=0.
    1 QD=QD+QXM
      YERO=YERO+YX
      YSD(NDRV)=YSD(NDRV)+YX
    7 X1=RZSW-PAW
      VSLT=.01*AIR*CSLT
      SMM(69,MO)=SMM(69,MO)+VSLT
      VAR(69)=VSLT
	IF(KG(JJK).GT.0.OR.JPL(JJK).GT.0)XHSM=HU(JJK)/PHU(JJK,IHU(JJK))
      IF(NOP.GT.0)WRITE(KW(1),9)IYR,MO,KDA,AIR,WS,WTN,X1,BIR,QXM,YX,XHSM
     1,X3
      VIRT=VIRT+X4
      COST=COST+X3
      IF(VIRT.LT.1.E-5)GO TO 12
      IF(IRY.GT.0)GO TO 13
      X1=COTL(IRX)
      X2=X1-COOP(IRX)
      COST=COST+X1
      CSFX=CSFX+X2
   13 IF(KFL(20).EQ.0)GO TO 12
      WRITE(KW(20),14)IYR,MO,KDA,TIL(IRX),KDC(JJK),IHC(IRX),NBE(IRX),X3,
     1X3,AIR
      IF(IRY.EQ.0)WRITE(KW(20),50)IYR,MO,KDA,TIL(IRX),KDC(JJK),IHC(IRX),
     1NBE(IRX),NBT(IRX),X1,X2,FULU(IRX)
   12 SMM(19,MO)=SMM(19,MO)+X4
      VAR(19)=X4
	SMM(92,MO)=SMM(92,MO)+FULU(IRX)
      XEF=X4-AIR
      SMM(84,MO)=SMM(84,MO)+XEF
      VAR(84)=XEF
      AIR=AIR-QXM
	VIR(N1,JJK)=VIR(N1,JJK)+X4
      VIL(N1,JJK)=VIL(N1,JJK)+XEF
	AFN=AIR*CNO3I
      ANA(JJK)=ANA(JJK)+AFN
      WNO3(I)=WNO3(I)+AFN
      SMM(60,MO)=SMM(60,MO)+AFN
      VAR(60)=VAR(60)+AFN
      IF(NOP.GT.0.AND.AFN.GT.0.)WRITE(KW(1),133)IYR,MO,KDA,AFN,AIR,XHSM
   10 JRT=0
      IF(IRR.EQ.5)THEN
	AWC=AWC+AIR
	AIR=0.
	END IF
      RETURN
    9 FORMAT(1X,I4,2I2,2X,'IRRIGATE',10X,'VOL=',F5.0,'MM',2X,'WS=',F6.2,
     12X,'WTN=',F8.0,'KPA',2X,'PWDF=',F6.0,'MM',2X,'TRGR=',F7.2,
     22X,'Q=',F5.0,'MM',2X,'Y=',F4.1,'T/HA',2X,'HUSC=',F6.2/2X,'COST=',
     3F7.2,'$/HA')
   14 FORMAT(1X,3I4,2X,A8,8X,I6,6X,2I4,4X,F10.2,10X,2F10.2)
   50 FORMAT(1X,3I4,2X,A8,8X,I6,6X,3I4,2F10.2,20X,F10.2)
  133 FORMAT(1X,I4,2I2,2X,'NO3 FERT = ',F5.0,'KG/HA',2X,'IRR VOL = ',
     1F5.0,'MM',2X,'HUSC = ',F6.2)
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE HLGB(Q,EV,O,RG,VLGE,VLGB,WW,KW)
C     EPIC0509
C     THIS SUBPROGRAM CHECKS THE LAGOON WATER BALANCE AT THE END OF A
C     SIMULATION.
      DIMENSION KW(32)
      DF=VLGB+Q-EV-O-VLGE-RG+WW
      WRITE(KW(1),3)DF,VLGB,Q,EV,O,VLGE,RG,WW
      WRITE(KW(1),2)DF
      VLGB=VLGE
      RETURN
    2 FORMAT(T10,'LAGOON WATER BALANCE = ',E16.6/)
    3 FORMAT(8E16.6)
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE HLGOON(JRT)
C     EPIC0509
C     THIS SUBPROGRAM ESTIMATES INFLOW, STORAGE, & IRRIGATION FROM
C     LAGOONS. RUNOFF IS ESTIMATED WITH 90 CN.
      INCLUDE 'EPCM0509_su.for'
      X2=10.*DALG
      DP=.1677*VLG**.3333
      TW=18.*DP
      SA=.0001*TW*TW
      EV=6.*EO*SA
      VLG=VLG-EV+COWW
      EV=EV/X2
      SMM(21,MO)=SMM(21,MO)+EV
      VAR(21)=EV
      XX=COWW/X2
      SMM(22,MO)=SMM(22,MO)+XX
      VAR(22)=XX
      X1=RWO-5.64
      IF(X1.LE.0.)GO TO 5
      QLG=X1*X1/(RWO+22.6)
      QLG=10.*(QLG*(DALG-SA)+RWO*SA)
      VLG=VLG+QLG
      QLG=QLG/X2
      SMM(23,MO)=SMM(23,MO)+QLG
      VAR(23)=QLG
    5 IF(VLG.GT.VLGN)GO TO 1
      JRT=1
      RETURN
    1 IF(VLG.LE.VLGM)GO TO 3
      X1=(VLG-VLGM)/X2
      WRITE(KW(1),4)IYR,MO,KDA,X1
      SMM(24,MO)=SMM(24,MO)+X1
      VAR(24)=X1
      VLG=VLGM
    3 IF(RZSW.LT.PAW)GO TO 2
      JRT=1
      RETURN
    2 XX=10.*WSA*VLGI
      X1=XX/X2
      SMM(25,MO)=SMM(25,MO)+X1
      VAR(25)=X1
      VLG=AMAX1(1.E-5,VLG-XX)
      JRT=0
      RETURN
    4 FORMAT(T10,'***** LAGOON OVERFLOWED ',I4,2I2,F4.0,' MM')
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE HPERC
C     EPIC0509
C     THIS SUBPROGRAM COMPUTES PERCOLATION AND LATERAL SUBSURFACE FLOW
C     FROM A SOIL LAYER WHEN FIELD CAPACITY IS EXCEEDED.
      INCLUDE 'EPCM0509_su.for'
      SEP=0.
      SUP=ST(ISL)-FC(ISL)
      IF(SUP.LT.1.E-5)GO TO 5
      X1=24./(PO(ISL)-FC(ISL))
      X2=HCL(ISL)*X1
      ZZ=X1*SATC(ISL)
      XZ=X2+ZZ
      IF(XZ.GT.20.)GO TO 3
      X3=SUP*(1.-EXP(-XZ))
      GO TO 4
    3 X3=SUP
    4 SEP=X3/(1.+X2/ZZ)
      SST=X3-SEP
      IF(ISL.NE.IDR)SST=SST*RFTT
C     WRITE(KW(1),7)MO,KDA,K,PO(ISL),FC(ISL),S15(ISL),ST(ISL),SATC(ISL),
C    1HCL(ISL),SUP,X3,SEP,SST
      GO TO 6
    5 SST=0.
    6 RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE HPERC1
C     EPIC0801
C     THIS SUBPROGRAM COMPUTES PERCOLATION AND LATERAL SUBSURFACE FLOW
C     FROM A SOIL LAYER WHEN FIELD CAPACITY IS EXCEEDED.
C     MODIFIED by EPA 2018-04-25 for 4MM SLUGS THROUGH AS A FUNCTION OF
C     HYDRAULIC CONDUCTIVITY FOLLOWING EPIC1102
      INCLUDE 'EPCM0509_su.for'
      SEP=0.
      SST=0.
      ICW=0
      !ST1=ST(ISL)
      !ST2=ST(L2)
      AVW=ST(ISL)-FC(ISL)
      IF(AVW>0.)THEN
          POFC=PO(ISL)-FC(ISL)
          X1=24./POFC
          DO WHILE(AVW>.01)
              X5=MIN(AVW/POFC,1.)
              X4=MAX(1.E-5,X5**PARM(82))
              H=SATC(ISL)*X4
              X2=X1*HCL(ISL)*X4
              ZZ=X1*H
              XZ=X2+ZZ
              XX=MIN(4.,AVW)
              IF(XZ>20.)THEN
                  X3=XX
              ELSE
                  X3=XX*(1.-EXP(-XZ))
              END IF
              X6=X3/(1.+X2/ZZ)
              SEP=SEP+X6
              SST=SST+X3-X6
              AVW=AVW-4.
              IF(ISL/=IDR)SST=SST*RFTT
              ICW=ICW+1
              IF(ICW>50)EXIT
          END DO
      END IF
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE HPURK
C     EPIC0509
C     THIS SUBPROGRAM IS THE MASTER PERCOLATION COMPONENT.  IT
C     MANAGES THE ROUTING PROCESS
      INCLUDE 'EPCM0509_su.for'
      ADD=0.
      SEP=RFV-QD
      DO 3 KK=1,NBSL
      ISL=LID(KK)
      ST(ISL)=ST(ISL)+SEP
      IF(WTBL<=Z(ISL))THEN
          SSF(ISL)=0.
          PKRZ(ISL)=0.
          SEP=0.
      ELSE
          IF(IPRK==0)THEN
              CALL HPERC
          ELSE
              CALL HPERC1
          END IF
          ST(ISL)=ST(ISL)-SEP-SST
          SSF(ISL)=SST
          IF(ISL==IDR)THEN
              SMM(18,MO)=SMM(18,MO)+SST
              VAR(18)=SST
          END IF
          PKRZ(ISL)=SEP
          ADD=ADD+SST
      END IF
    3 CONTINUE
      SST=ADD
      K=NBSL
    4 ISL=LID(K)
      L1=LID(K-1)
      XX=ST(ISL)-PO(ISL)
      IF(XX.LE.0.)GO TO 5
      ST(L1)=ST(L1)+XX
      PKRZ(L1)=PKRZ(L1)-XX
      ST(ISL)=PO(ISL)
    5 XX=ST(ISL)-FC(ISL)
      IF(XX.LE.0.)GO TO 6
	WP1=ALOG10(S15(L1))
      FC1=ALOG10(FC(L1))
	IF(ST(L1).GT..01)GO TO 8
	T1=1500.
	GO TO 11
    8 T1=10.**(3.1761-1.6576*((ALOG10(ST(L1))-WP1)/(FC1-WP1)))
   11 WP2=ALOG10(S15(ISL))
      FC2=ALOG10(FC(ISL))
      T2=10.**(3.1761-1.6576*(ALOG10(ST(ISL))-WP2)/(FC2-WP2))
      IF(T1.LT.T2)GO TO 6
	X1=XX*MIN(.5,(T1-T2)/T1)
      ST(L1)=ST(L1)+X1
      PKRZ(L1)=PKRZ(L1)-X1
      ST(ISL)=ST(ISL)-X1
    6 K=K-1
      IF(K.GT.1)GO TO 4
      IF(PKRZ(L1).LT.0.)PKRZ(L1)=0.
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE HREXP
C     EPIC0509
C     THIS SUBPROGRAM DISTRIBUTES DAILY RAINFALL EXPONENTIALLY &
C     FURNISHES THE GREEN & AMPT SUBPROGRAM RAIN INCREMENTS OF EQUAL
C     VOLUME = DRFV
      INCLUDE 'EPCM0509_su.for'
      DATA DRFV/2./
      PT=0.
      UPLM=.95
      QMN=.25
      BLM=.05
      R1=ATRI(BLM,QMN,UPLM,8)
      RTP=R1*RFV
      XK1=R1/4.605
      XK2=XK1*(1.-R1)/R1
      DUR=RFV/(REP*(XK1+XK2))
      X1=REP*DUR
      XKP1=XK1*X1
      XKP2=XK2*X1
      RX=0.
      WRITE(KW(4),1)IYR,MO,KDA,SCN,XK1,XK2,RFV,RTP,REP,DUR,R1
    2 PT=PT+DRFV
      IF(PT.LT.RTP)GO TO 4
      A=RTP-PT+DRFV
      PT=RTP
      RX=REP
C     T=R1
      CALL HGASP(A,PT,Q1,RX)
C     WRITE(KW(1),1)T,RX,PT,QD
      GO TO 3
    4 RX=REP*(1.-(RTP-PT)/XKP1)
C     T=R1+XK1*ALOG(RX/REP)
      CALL HGASP(DRFV,PT,Q1,RX)
C     WRITE(KW(1),1)T,RX,PT,QD
      GO TO 2
    3 PT=PT+DRFV
      IF(PT.LT.RFV)GO TO 6
      RX=0.
      A=RFV-PT
      PT=RFV
C     T=DUR
      CALL HGASP(A,PT,Q1,RX)
C     WRITE(KW(1),1)T,RX,PT,QD
      GO TO 7
    6 RX=REP*(1.-(PT-RTP)/XKP2)
C     T=R1-XK2*ALOG(RX/REP)
      CALL HGASP(DRFV,PT,Q1,RX)
C     WRITE(KW(1),1)T,RX,PT,QD
      GO TO 3
C   1 FORMAT(1X,10E13.5)
C   7 WRITE(KW(1),13)IYR,MO,KDA,SCN,RFV,PT,QD,REP,DUR,R1
C  13 FORMAT(1X,I4,2I2,10F10.2)
    7 RETURN
    1 FORMAT(1X,I4,2I2,9F10.2)
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE HRFEI
C     EPIC0509
C     THIS SUBPROGRAM ESTIMATES THE USLE RAINFALL ENERGY FACTOR, GIVEN
C     DAILY RAINFALL.
      INCLUDE 'EPCM0509_su.for'
      DATA ALMN/.02083/
      AJP=1.-EXP(-125./(RFV+5.))
      AL5=ATRI(ALMN,WI(NWI,MO),AJP,4)
      X1=-2.*ALOG(1.-AL5)
      PR=2.*RFV*AL5+.001
      IF(REP.LT.1.E-5)REP=X1*RFV+.001
      DUR=MIN(24.,4.605/X1)
      EI=AMAX1(0.,RFV*(12.1+8.9*(ALOG10(REP)-.4343))*PR/1000.)
      PR=X1
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE HRTRI
C     EPIC0509
C     THIS SUBPROGRAM DISTRIBUTES DAILY RAINFALL FROM A TRIANGLE &
C     FURNISHES THE GREEN & AMPT SUBPROGRAM RAIN INCREMENTS OF EQUAL
C     VOLUME = DRFV
      INCLUDE 'EPCM0509_su.for'
      DATA DRFV/2.5/
      PT=0.
      DUR=2.*RFV/REP
      UPLM=.95*DUR
      QMN=.25*DUR
      BLM=.05*DUR
C     RPR=2.*RFV/DUR
      R1=ATRI(BLM,QMN,UPLM,8)
      RTP=.5*R1*REP
      B2=REP/R1
      RX=0.
C     WRITE(KW(1),1)SCN,B2,DRFV,RFV,RTP,REP,DUR,R1
    2 PT=PT+DRFV
      T=SQRT(2.*PT/B2)
      IF(T.LT.R1)GO TO 4
      T=R1
      A=RTP-PT+DRFV
      PT=RTP
      RX=REP
      CALL HGAWY(A,PT,Q1,RX)
C     WRITE(KW(1),1)T,RX,PT,QD
      GO TO 5
    4 RX=B2*T
      CALL HGAWY(DRFV,PT,Q1,RX)
C     WRITE(KW(1),1)T,RX,PT,QD
      GO TO 2
    5 B2=REP/(DUR-R1)
      PX=REP+R1*B2
      BB=PX*PX
C     WRITE(KW(1),1)B2,PR
    3 PT=PT+DRFV
      IF(PT.LT.RFV)GO TO 6
      T=DUR
      RX=0.
      A=RFV-PT
      PT=RFV
      CALL HGAWY(A,PT,Q1,RX)
C     WRITE(KW(1),1)T,RX,PT,QD
      GO TO 7
    6 T=(PX-SQRT(BB-2.*B2*(PT-RTP+R1*(REP+.5*B2*R1))))/B2
      RX=REP-B2*(T-R1)
      CALL HGAWY(DRFV,PT,Q1,RX)
C     WRITE(KW(1),1)T,RX,PT,QD
      GO TO 3
C   1 FORMAT(1X,10E13.5)
    7 WRITE(KW(1),13)IYR,MO,KDA,SCN,RFV,PT,QD,REP,DUR,R1
      RETURN
   13 FORMAT(1X,I4,2I2,10F10.2)
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE HRUNF
C     EPIC0509
C     THIS SUBPROGRAM DISTRIBUTES DAILY RAINFALL UNIFORMLY &
C     FURNISHES THE GREEN & AMPT SUBPROGRAM RAIN INCREMENTS OF EQUAL
C     VOLUME = DRFV
      INCLUDE 'EPCM0509_su.for'
      DATA DRFV/5./
      PT=0.
      WRITE(KW(1),1)SCN,RFV,REP,DUR
    3 PT=PT+DRFV
      IF(PT.LT.RFV)GO TO 6
      A=RFV-PT+DRFV
      PT=RFV
      CALL HGASP(A,PT,Q1,REP)
      WRITE(KW(1),1)PT,QD
      GO TO 7
    6 CALL HGASP(DRFV,PT,Q1,REP)
      WRITE(KW(1),1)PT,QD
      GO TO 3
    7 WRITE(KW(1),13)IYR,MO,KDA,SCN,RFV,PT,QD,REP,DUR
      RETURN
    1 FORMAT(1X,10E13.5)
   13 FORMAT(1X,I4,2I2,10F10.2)
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE HSGCN
C     EPIC0509
C     THIS SUBPROGRAM CONTAINS THE SCS HYDROLOGIC SOIL GROUP-CURVE
C     NUMBER TABLE.
      INCLUDE 'EPCM0509_su.for'
      DIMENSION CNX(35,4)
      DATA CNX/77.,72.,67.,70.,65.,66.,62.,65.,63.,63.,61.,61.,59.,66.,
     158.,64.,55.,63.,51.,68.,49.,39.,47.,25.,6.,30.,45.,36.,25.,59.,72.
     2,74.,43.,39.,98.,86.,81.,78.,79.,75.,74.,71.,76.,75.,74.,73.,72.,
     370.,77.,72.,75.,69.,73.,67.,79.,69.,61.,67.,59.,35.,58.,66.,60.,
     455.,74.,82.,84.,65.,61.,98.,91.,88.,85.,84.,82.,80.,78.,84.,83.,
     582.,81.,79.,78.,85.,81.,83.,78.,80.,76.,86.,79.,74.,81.,75.,70.,
     671.,77.,73.,70.,82.,87.,90.,77.,74.,98.,94.,91.,89.,88.,86.,82.,
     781.,88.,87.,85.,84.,82.,81.,89.,85.,85.,83.,83.,80.,89.,84.,80.,
     888.,83.,79.,78.,83.,79.,77.,86.,89.,92.,82.,80.,98./ 
      CN2=CNX(LUN,ISG)
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE HSNOM
C     EPIC0509
C     THIS SUBPROGRAM PREDICTS DAILY SNOW MELT WHEN THE AVERAGE AIR
C     TEMPERATURE EXCEEDS 0 DEGREES C.
      INCLUDE 'EPCM0509_su.for'
      X2=MIN(DST0,STMP(LID(2)))
      X1=SQRT(TMX*RA)
      SNPKT=.3333*(2.*X2+TX)
      F=TSNO/(TSNO+EXP(SCRP(16,1)-SCRP(16,2)*TSNO))
      SML=AMAX1(0.,X1*(1.52+.54*F*SNPKT))
      SML=MIN(SML,SNO)
      SNO=SNO-SML
      IF(REP.LT.1.E-5)REP=.042*SML
      PR=.042
      DUR=24.
C     WRITE(KW(1),1)IYR,MO,KDA,TMX,TMN,TX,DST0,SNPKT,T(LID(2)),ST0,SNO,
C    1SML
C   1 FORMAT(1X,I4,2I2,9F10.3)
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE HSWBL(P,Q,ET,SSF,O,RG,SNO,SW,SWW,QINT,RGDL,KW)
C     EPIC0509
C     THIS SUBPROGRAM CHECKS THE SOIL WATER BALANCE AT THE END OF A
C     SIMULATION.
      DIMENSION KW(32)
      WRITE(KW(1),2)
      DF=SWW+P-Q-ET-O-SW-SSF+RG-SNO+QINT-RGDL
      PER=100.*DF/SW
      WRITE(KW(1),1)PER,DF,SWW,P,Q,ET,O,SSF,RG,RGDL,SNO,QINT,SW
      SWW=SW+SNO
      RETURN
    2 FORMAT(T10,'SOIL WATER BALANCE')
    1 FORMAT(5X,'PER =',E13.6,2X,'DF  =',E13.6,2X,'BSW =',E13.6,2X,
     1'PCP =',E13.6,2X,'Q   =',E13.6,2X,'ET  =',E13.6/5X,'PRK =',E13.6,
     22X,'SSF =',E13.6,2X,'IRG =',E13.6,2X,'IRDL=',E13.6,2X,'SNO =',
     3E13.6,2X,'QIN =',E13.6,2X/5X,'FSW =',E13.6)
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE HSWU(CPWU,RGS)
C     EPIC0509
C     THIS SUBPROGRAM DISTRIBUTES PLANT EVAPORATION THROUGH THE ROOT
C     ZONE AND CALCULATES ACTUAL PLANT WATER USE BASED ON SOIL WATER
C     AVAILABILITY.
      INCLUDE 'EPCM0509_su.for'
      BLM=S15(ISL)
      IF(Z(ISL)<=.5)BLM=PARM(5)*S15(ISL)
      IF(ISL/=LD1)THEN
          CALL CRGBD(RGS)
          CPWU=CPWU*RGS
      END IF
      SUM=EP(JJK)*(1.-EXP(-UB1*GX/RD(JJK)))/UOB
      TOS=36.*ECND(ISL)
      XX=LOG10(S15(ISL))
      WTN=MAX(5.,10.**(3.1761-1.6576*((LOG10(ST(ISL))-XX)/(LOG10(FC
     &(ISL))-XX))))
      XX=TOS+WTN
      IF(XX<5000.)THEN
          F=1.-XX/(XX+EXP(SCRP(21,1)-SCRP(21,2)*XX))
          U(ISL)=MIN(SUM-CPWU*SU-(1.-CPWU)*UX,ST(ISL)-BLM)*F*RGS
          IF(U(ISL)<0.)U(ISL)=0.
      END IF
      UX=SUM
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE HTR55
C     EPIC0509
C     THIS SUBPROGRAM ESTIMATES PEAK RUNOFF RATES USING THE SCS TR55
C     EXTENDED METHOD.
      INCLUDE 'EPCM0509_su.for'
      DIMENSION PIAF(18)
      DATA PIAF/0.0,0.1,0.2,0.3,0.35,0.4,0.45,0.5,0.55,
     *0.6,0.65,0.7,0.75,0.8,0.85,0.9,0.95,1.0/
      IF(QP.GT..35)GO TO 2
      XOX=QP/.1+1.
      GO TO 3
    2 XOX=(QP-.35)/.05+5.
    3 INT=XOX
      INT1=INT+1
      RTO=(QP-PIAF(INT))/(PIAF(INT1)-PIAF(INT))
      X1=ALOG(TC)
      Y1=HQP(X1,CQP,ITYP,INT)
      IF(INT.GE.17)GO TO 4
      Y2=HQP(X1,CQP,ITYP,INT1)
      Y=Y1+(Y2-Y1)*RTO
      Y=EXP(Y)
      GO TO 5
    4 Y=EXP(Y1)*(1.0-RTO)
    5 QP=Y*RFV
C     WRITE(KW(1),1)ITYP,INT,TC,QP,Y1,Y2,Y,QP
C   1 FORMAT(1X,2I4,10F10.3)
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      FUNCTION HQP(X1,CQP,ITP,INT)
      DIMENSION CQP(8,17,4)
C     EPIC0509
      HQP=CQP(1,INT,ITP)+X1*(CQP(2,INT,ITP)+X1*(CQP(3,INT,ITP)+X1*
     1(CQP(4,INT,ITP)+X1*(CQP(5,INT,ITP)+X1*(CQP(6,INT,ITP)+X1*
     2(CQP(7,INT,ITP)+X1*CQP(8,INT,ITP)))))))
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE HUSE
C     EPIC0509
C     THIS SUBPROGRAM IS THE MASTER WATER AND NUTRIENT USE SUBPROGRAM.
C     CALLS HSWU AND NUPPO FOR EACH SOIL LAYER.
      INCLUDE 'EPCM0509_su.for'
	IR=1
      IAR=0
      UX=0.
      SEP=0.
      TOT=0.
        CPWU=1.
        RGS=1.
      DO 9 J=1,NBSL
      ISL=LID(J)
      IF(Z(ISL).LT.1.)GO TO 5
      IF(IAR.GT.0)GO TO 6
      IAR=1
      X3=1.-SEP
      X4=Z(ISL)-SEP
      RTO=X3/X4
      IF(WTBL.GT.Z(ISL))GO TO 3
      X1=PO(ISL)*(Z(ISL)-WTBL)/X4
      X2=ST(ISL)-X1
      IF(WTBL.GT.1.)GO TO 2
      SAT=SAT+X2+PO(ISL)*(1.-WTBL)/X4
      GO TO 4
    2 SAT=SAT+X2*X3/(WTBL-SEP)
      GO TO 4
    3 SAT=SAT+RTO*ST(ISL)
    4 TOT=TOT+RTO*PO(ISL)
      GO TO 6
    5 SAT=SAT+ST(ISL)
      TOT=TOT+PO(ISL)
      SEP=Z(ISL)
    6 IF(IR.GT.1)GO TO 9
      IF(RD(JJK).GT.Z(ISL))GO TO 7
      GX=RD(JJK)
      IR=J
      GO TO 8
    7 GX=Z(ISL)
    8 CALL HSWU(CPWU,RGS)
      SU=SU+U(ISL)
    9 CONTINUE
      IF(IR.EQ.0)IR=NBSL
	IF(RZSW<PAW)GO TO 10
      RTO=MIN(1.,SAT/TOT)
!     WRITE(KW(1),1)IY,MO,KDA,SAT,TOT,(ST(LID(J)),J=1,10),(PO(LID(J)),
!    &J=1,10),(FC(LID(J)),J=1,10)
!   1 FORMAT('&&&&&',1X,3I4,2F10.1/(10F10.1))
      F=100.*(RTO-CAF(JJK))/(1.0001-CAF(JJK))
      IF(F.LE.0.)GO TO 10
      SAT=1.-F/(F+EXP(SCRP(7,1)-SCRP(7,2)*F))
      GO TO 11
   10 SAT=1.
   11 RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE HVOLQ
C     EPIC0509
C     THIS SUBPROGRAM PREDICTS DAILY RUNOFF VOLUME AND PEAK RUNOFF RATE
C     GIVEN DAILY PRECIPITATION AND SNOW MELT.
      INCLUDE 'EPCM0509_su.for'
      SUM=0.
      ADD=0.
      IF(LUN.EQ.35)GO TO 32
      IF(NVCN.GT.0)GO TO 25
      XX=0.
      DO 1 JJ=1,NBSL
      J=LID(JJ)
      IF(Z(J).GT.1.)GO TO 3
      ZZ=(Z(J)-XX)/Z(J)
      SUM=SUM+(ST(J)-S15(J))*ZZ/(FC(J)-S15(J))
      ADD=ADD+ZZ
      XX=Z(J)
    1 CONTINUE
      GO TO 11
    3 ZZ=1.-XX
      SUM=SUM+(ST(J)-S15(J))*ZZ/(FC(J)-S15(J))
      ADD=ADD+ZZ
      GO TO 11
   25 IF(NVCN.GT.1)GO TO 19
      DO 2 JJ=1,NBSL
      L=LID(JJ)
      IF(Z(L).GT.1.)GO TO 26
      SUM=SUM+ST(L)-S15(L)
      ADD=ADD+FC(L)-S15(L)
    2 L1=L
      GO TO 11
   26 RTO=(1.-Z(L1))/(Z(L)-Z(L1))
      SUM=SUM+(ST(L)-S15(L))*RTO
      ADD=ADD+(FC(L)-S15(L))*RTO
   11 SUM=SUM/ADD
      IF(SUM.GT.0.)GO TO 13
   31 SCN=SMX*(1.-SUM)**2
      GO TO 14
   13 SUM=SUM*100.
      SCN=SMX*(1.-SUM/(SUM+EXP(SCRP(4,1)-SCRP(4,2)*SUM)))
   14	SCN=(SCN-SMX)*EXP(PARM(75)*(1.-RSD(LD1)))+SMX  
C  14 SCN=(SCN-SMX)*EXP(PARM(15)*(1.-STL))+SMX
C  14 B=.01143*SIL(LD1)-.0143
C     F=RFSM/(RFSM+EXP(SCRP(11,1)-SCRP(11,2)*RFSM))
C     SCN=SCN*((1-F)*B+1.-B)
      IF(STMP(LID(2)).LT.-1.)SCN=SCN*PARM(65)
      IF(ICV.GT.0)SCN=SCN*SQRT(1.-FCV) 
      CN=25400./(SCN+254.)
      IF(ISCN.GT.0)GO TO 4
      UPLM=MIN(99.5,CN+5.)
      BLM=AMAX1(1.,CN-5.)
      CN=ATRI(BLM,CN,UPLM,8)
    4 SCN=25400./CN-254.
      IF(SCN.GT.3.)GO TO 20
      SCN=3. 
	CN=25400./(SCN+254.)
      GO TO 20
   19 IF(NVCN.GT.2)GO TO 28
      DO 29 JJ=1,NBSL
      ISL=LID(JJ)
      SUM=SUM+ST(ISL)-S15(ISL)
      ADD=ADD+FC(ISL)-S15(ISL)
      IF(Z(ISL).GT.1.)GO TO 30
   29 CONTINUE
   30 SUM=SUM/ADD
      IF(SUM.LT.0.)GO TO 31
      RTO=MIN(.98,SUM)
      SCN=SMX*(1.-RTO)
      GO TO 14
   28 IF(NVCN.GT.3)GO TO 33
   32 SCN=25400./CN0-254.
      CN=CN0
      GO TO 20
   33 SCN=AMAX1(3.,SCI)
      GO TO 14
   20 BB=.2*SCN
      TOT=100.
      DO 5 I=1,9
      TOT=TOT-5.
      IF(CN.GT.TOT)GO TO 6
    5 CONTINUE
      I=10
    6 CNDS(I)=CNDS(I)+1.
      RTO=MIN(1.,SCN/SMX)
      CRKF=PARM(17)*RFV*RTO
      RFV=RFV-CRKF
      IF(RWO.LT.1.E-5)GO TO 10
      GO TO(21,23,23,24),INFL
   23 CALL HREXP
      GO TO 22
   24 CALL HRUNF
      GO TO 22
   21 X1=RWO-BB
      IF(X1.LE.0.)GO TO 10
      QD=X1*X1/(RWO+.8*SCN)
   22 IF(IFD.EQ.0)GO TO 8
      IF(DHT.LT..01.OR.RGIN.LT..01)GO TO 7
      CALL HFURD
	X1=AMAX1(0.,ST(LD1)-PO(LD1))
      IF(NOP.GT.0)WRITE(KW(1),17)IYR,MO,KDA,DHT,RHTT,QD,DV,X1,XHSM
      IF(QD.GT.DV-X1)GO TO 7
      QD=0.
      GO TO 10
    7 DHT=0.
      IF(IDRL.EQ.1)GO TO 8
      IF(CHT(JJK).GT.1.)GO TO 8
      DHT=DKHL
    8 IF(ITYP.GT.0)GO TO 12
C     IF(SML.GT.0.)GO TO 18
      X2=QD/DUR
      IF(X2.GT.1.)GO TO 15
      X2=1.
      GO TO 16
   15 X2=X2**.25
   16 X4=MIN(UPSL/360.,TCS/X2)
      TC=X4+TCC/X2
      ALTC=1.-EXP(-TC*PR)
	X1=ALTC*QD
      QP=X1/TC
	QPR=X1/X4
      GO TO 10
C  18 QP=QD/72.
C     GO TO 9
   12 TC=TCC+TCS/SQRT(RWO)
      QP=BB/RWO
      CALL HTR55
   10 IF(KFL(4).GT.0)WRITE(KW(4),27)IYR,MO,KDA,RWO,CN,SCI,QD,TC,QP,DUR,
     &ALTC,AL5
      RETURN
   27 FORMAT(1X,3I4,9F10.2)
   17 FORMAT(1X,I4,2I2,12X,'DHT=',F5.0,'MM',2X,'RHTT=',F5.0,'MM',2X,'Q='
     1,F5.1,'MM',2X,'DV=',F5.1,'MM',2X,'ST=',F5.1,'MM',2X,'HUSC=',F6.2)
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE HWTBL
C     EPIC0509
C     THIS SUBPROGRAM SIMULATES WATER TABLE DYNAMICS AS A FUNCTION
C     OF RAIN AND EVAP.
      INCLUDE 'EPCM0509_su.for'
      RTO=100.*GWST/GWMX
      WTBL=WTMX+(WTMN-WTMX)*RTO/(RTO+EXP(SCRP(19,1)-SCRP(19,2)*RTO))
      SUM=0.
      TOT=0.
      IF(WTBL.GT.Z(LID(NBSL)))GO TO 7
      XX=0.
      NN=0
      DO 6 K=1,NBSL
      ISL=LID(K)
      SUM=SUM+ST(ISL)
      IF(WTBL.GT.Z(ISL))GO TO 5
      IF(NN.GT.0)GO TO 4
      NN=1
      IF(ST(ISL).GT.FC(ISL))ST(ISL)=FC(ISL)
      ST(ISL)=(ST(ISL)*(WTBL-XX)+PO(ISL)*(Z(ISL)-WTBL))/(Z(ISL)-XX)
      GO TO 5
    4 ST(ISL)=PO(ISL)
    5 TOT=TOT+ST(ISL)
      XX=Z(ISL)
    6 CONTINUE
    7 XX=TOT-SUM
      QIN(MO)=QIN(MO)+XX
      SMM(20,MO)=SMM(20,MO)+XX
      VAR(20)=XX
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE INIFP(I3,II,JJ,JRT)
C     EPIC0509
C     THIS SUBPROGRAM ALLOWS INPUT TO OPERATION SCHEDULE FOR IRRIGATION,
C     FERTILIZER, OR PESTICIDE APPLICATION
      INCLUDE 'EPCM0509_su.for'
      IF(I3.NE.8)GO TO 161
      VIRR(II,JJ)=OPV(1)
      IF(OPV(4).GT.0.)EFI=OPV(4)
      KI=KI+1
      GO TO 162
  161 IF(I3.NE.9)GO TO 163
      WFA(II,JJ)=OPV(1)
      CALL NFTBL(L)
      LFT(II,JJ)=KDF1(JX(7))
      KF=KF+1
  162 TIR(II,JJ)=BIR
      CND(II,JJ)=CN2
      QIR(II,JJ)=EFI
	JRT=1
      RETURN
  163 IF(I3.NE.7)GO TO 169
      PSTE(II,JJ)=OPV(1)
      PSTR(II,JJ)=OPV(2)
      CALL PSTTBL
      LPC(II,JJ)=KDP1(JX(7))
      KP=KP+1
      GO TO 162
  169 IF(OPV(2).LT.0.)GO TO 2
      IF(OPV(2).LT.1.E-10)GO TO 1
      LUN=OPV(2)
      CALL HSGCN
      GO TO 1
    2 CN2=-OPV(2)
    1 CND(II,JJ)=CN2
      IF(ABS(OPV(3)).GT.1.E-5)BIR=OPV(3)
      TIR(II,JJ)=BIR
      IF(OPV(4).GT.0.)EFI=OPV(4)
      QIR(II,JJ)=EFI
	IF(OPV(8).GT.0.)CFMN=OPV(8)
	CFRT(II,JJ)=CFMN
	IF(OPV(9)>0.)HWC(II,JJ)=OPV(9)
      JRT=0
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE NAJN(UU,AN,DMD,SUPL,AJF,IAJ)
C     EPIC0509
C     THIS SUBPROGRAM COMPUTES ACTUAL N PLANT UPTAKE FROM EACH
C     LAYER (UPTAKE = MINIMUM OF PLANT DEMAND AND SOIL SUPPLY).
      INCLUDE 'EPCM0509_su.for'
      DIMENSION UU(15),AN(15)
      IF(IAJ.GT.0)GO TO 9
      SUM=0.
      X2=DMD/(SUPL+1.E-20)
      IF(X2.GT.1.)GO TO 4
      DO 2 J=1,IR
      K=LID(J)
      UU(K)=UU(K)*X2
    2 SUM=SUM+UU(K)
    3 SUPL=SUM
      GO TO 7
    9 SUM=0.
    4 X2=AJF*(DMD-SUPL)
      X21=X2
      DO 5 J=1,IR
      K=LID(J)
      XX=UU(K)+X2
      X1=AN(K)-.001*PARM(27)*WT(K)
      IF(XX.LT.X1)GO TO 6
      IF(X1.GT.0.)GO TO 8
      UU(K)=0.
      GO TO 5
    8 X2=X2-X1+UU(K)
      UU(K)=X1
      SUM=SUM+UU(K)
    5 CONTINUE
      GO TO 3
    6 UU(K)=XX
      SUPL=SUPL+X21
    7 RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE NBL(BTN,RN,YON,QNO3,SSFN,PRKN,DN,TFO,YLN,VOL,FNO3,FNH3,
     1FX,FTN,KBL,KW)
C     EPIC0509
C     THIS SUBPROGRAM COMPUTES THE N & P BALANCES AT THE END OF THE
C     SIMULATION
      DIMENSION KW(32)
      DF=BTN+RN-YON-QNO3-SSFN-PRKN-DN-YLN-VOL+FNO3+FNH3-FTN+FX+TFO
      PER=100.*DF/FTN
      IF(KBL.GT.1)GO TO 2
      WRITE(KW(1),4)
      WRITE(KW(1),1)PER,DF,BTN,RN,YON,QNO3,SSFN,PRKN,DN,YLN,VOL,FNO3,
     1FNH3,FX,TFO,FTN
      GO TO 3
    2 IF(KBL.GT.2)GO TO 6
      WRITE(KW(1),5)
      WRITE(KW(1),8)PER,DF,BTN,YON,QNO3,PRKN,YLN,FNO3,TFO,FTN
      GO TO 3
    6 WRITE(KW(1),7)
      WRITE(KW(1),9)PER,DF,BTN,YON,QNO3,SSFN,PRKN,YLN,FNO3,FTN
    3 RETURN
    1 FORMAT(5X,'PER =',E13.6,2X,'DF  =',E13.6,2X,'BTOT=',E13.6,2X,
     1'PCP =',E13.6,2X,'Y   =',E13.6,2X,'Q   =',E13.6/5X,'SSF =',E13.6,
     22X,'PRK =',E13.6,2X,'DNIT=',E13.6,2X,'YLD =',E13.6,2X,'VOL =',
     3E13.6,2X,'FNO3=',E13.6/5X,'FNH3=',E13.6,2X,'FIX =',E13.6,2X,
     4'FORG=',E13.6,2X,'FTOT=',E13.6)
    4 FORMAT(/T10,'N BALANCE')
    5 FORMAT(/T10,'P BALANCE')
    8 FORMAT(5X,'PER =',E13.6,2X,'DF  =',E13.6,2X,'BTOT=',E13.6,2X,
     1'Y   =',E13.6,2X,'Q   =',E13.6,2X,'PRK =',E13.6/5X,'YLD =',E13.6,
     22X,'FPML=',E13.6,2X,'FPO =',E13.6,2X,'ETOT=',E13.6)
    7 FORMAT(/T10,'K BALANCE')
    9 FORMAT(5X,'PER =',E13.6,2X,'DF  =',E13.6,2X,'BTOT=',E13.6,2X,
     1'Y   =',E13.6,2X,'Q   =',E13.6,2X,'SSF =',E13.6/5X,'PRK =',E13.6,
     22X,'YLD =',E13.6,2X,'FKM =',E13.6,2X,'ETOT=',E13.6)
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE NCBL(BTC,YOC,VBC,QBC,RSPC,TFOC,RSDC,FTC,KW)
C     EPIC0509
C     THIS SUBPROGRAM COMPUTES THE C BALANCE AT THE END OF THE
C     SIMULATION
      DIMENSION KW(32)
      WRITE(KW(1),4)
      DF=BTC-YOC-VBC-QBC-RSPC+TFOC+RSDC-FTC
      PER=100.*DF/FTC
      WRITE(KW(1),1)PER,DF,BTC,YOC,VBC,QBC,RSPC,RSDC,TFOC,FTC
      BTC=FTC
      RETURN
    1 FORMAT(5X,'PER =',E13.6,2X,'DF  =',E13.6,2X,'BTOT=',E13.6,2X,
     1'Y   =',E13.6,2X,'PRK =',E13.6,2X,'Q   =',E13.6/5X,'RSPC=',E13.6,
     22X,'RSDC=',E13.6,2X,'TFOC=',E13.6,2X,'FTOT=',E13.6)
    4 FORMAT(/T10,'C BALANCE')
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE NCQYL
C     EPIC0509
C     THIS SUBPROGRAM PREDICTS DAILY C LOSS, GIVEN SOIL LOSS AND
C     ENRICHMENT RATIO.
      INCLUDE 'EPCM0509_su.for'
      Y1=WBMC(LD1)
      Y4=PKRZ(LD1)
      QBC=0.
      VBC=0.
      YBC=0.
      YOC=0.
      TOT=WHPC(LD1)+WHSC(LD1)+WLMC(LD1)+WLSC(LD1)
      X1=1.-YEW
      YOC=YEW*TOT
      WHSC(LD1)=WHSC(LD1)*X1
      WHPC(LD1)=WHPC(LD1)*X1
      WLS(LD1)=WLS(LD1)*X1
      WLM(LD1)=WLM(LD1)*X1
      WLSL(LD1)=WLSL(LD1)*X1
      WLSC(LD1)=WLSC(LD1)*X1
      WLMC(LD1)=WLMC(LD1)*X1
      WLSLC(LD1)=WLSLC(LD1)*X1
      WLSLNC(LD1)=WLSC(LD1)-WLSLC(LD1)
      IF(Y1.LT..01)GO TO 6
      DK=.0001*PARM(21)*WOC(LD1)
      X1=PO(LD1)-S15(LD1)
      XX=X1+DK
      V=QD+Y4
      X3=0.
      IF(V.LT.1.E-10)GO TO 6
      X3=Y1*(1.-EXP(-V/XX))
      CO=X3/(Y4+PARM(44)*QD)
      CS=PARM(44)*CO
      VBC=CO*Y4
      Y1=Y1-X3
C     WRITE(KW(1),3)MO,KDA,Y4,Y1,VBC,CO,X3
      QBC=CS*QD
C     COMPUTE WBMC LOSS WITH SEDIMENT
      IF(YEW.LT.1.E-10)GO TO 6
      CS=DK*Y1/XX
      YBC=YEW*CS
    6 WBMC(LD1)=Y1-YBC
      DO 8 L=2,NBSL
      ISL=LID(L)
      Y1=WBMC(ISL)+VBC
      VBC=0.
      IF(Y1.LT..01)GO TO 5
      V=PKRZ(ISL)
      IF(V.LE.0.)GO TO 5
      VBC=Y1*(1.-EXP(-V/(PO(ISL)-S15(ISL)+.0001*PARM(21)*WOC(ISL))))
    5 WBMC(ISL)=Y1-VBC
    8 CONTINUE
      SMM(75,MO)=SMM(75,MO)+VBC
      VAR(75)=VBC
      SMM(76,MO)=SMM(76,MO)+QBC
      VAR(76)=QBC
      YOC=YOC+YBC
      SMM(77,MO)=SMM(77,MO)+YOC
      VAR(77)=YOC
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE NCNMI(Z5,CS)
C     EPIC0509
C     THIS SUBPROGRAM SIMULATES MINERALIZATION AND IMMOBILIZATION OF N
C     AND C USING EQUATIONS TAKEN FROM CENTURY.

C     Updated the subprogram with new version from EPIC1102 from J. Williams
C     2017-12-05,  EPA LR

      INCLUDE 'EPCM0509_su.for'
      XZ=WNO3(ISL)+WNH3(ISL)
C     AD1=WBMN(ISL)+WHPN(ISL)+WHSN(ISL)+WLMN(ISL)+WLSN(ISL)+XZ
C     ADD=WBMC(ISL)+WHPC(ISL)+WHSC(ISL)+WLMC(ISL)+WLSC(ISL)
C     IF(ISL.NE.2)GO TO 17
C     X1=ADD/TOT
C     WRITE(KW(1),19)ISL,IYR,MO,KDA,Z(ISL),WBMC(ISL),WHPC(ISL),WHSC(ISL)
C    1,WLMC(ISL),WLSC(ISL),X1,ADD
C     WRITE(KW(1),19)ISL,IYR,MO,KDA,Z(ISL),WBMN(ISL),WHPN(ISL),WHSN(ISL)
C    1,WLMN(ISL),WLSN(ISL),XZ,TOT
C     RLR=AMAX1(.05,WLSL(ISL)/(WLS(ISL)+1.E-5))
      RLR=MIN(.8,WLSL(ISL)/(WLS(ISL)+1.E-5))
	RHS=PARM(47)
      RHP=PARM(48)
	XHN=WHSN(ISL)+WHPN(ISL)
	IF(IOX.GT.0)GO TO 22
      OX=1.-PARM(53)*Z5/(Z5+EXP(SCRP(20,1)-SCRP(20,2)*Z5))
	GO TO 23
   22	Y1=.1*WOC(ISL)/WT(ISL)
	Y2=2.11+.0375*CLA(ISL)
	Y3=100.*Y1/Y2
	OX=Y3/(Y3+EXP(SCRP(24,1)-SCRP(24,2)*Y3))
   23 X1=EXP(PARM(52)*(BD(ISL)-BDP(ISL)))
!	IF(X1>5.)WRITE(KW(1),19)IY,MO,KDA,ISL,BD(ISL),BDP(ISL),X1
      SMS(4,ISL)=SMS(4,ISL)+X1
      CS=MIN(10.,SQRT(CDG*SUT)*PARM(20)*OX*X1)
      SMS(11,ISL)=SMS(11,ISL)+1.
      SMS(1,ISL)=SMS(1,ISL)+SUT
      APCO2=.55
      ASCO2=.60
      IF(ISL.GT.1)GO TO 1
      CS=CS*PARM(51)
      ABCO2=.55
      A1CO2=.55
      RBM=.0164
      RLM=.0405
      RLS=.0107
      HPNC=.1
      XBM=1.
C     COMPUTE N/C RATIOS
      X1=.1*(WLMN(LD1)+WLSN(LD1))/(RSD(LD1)+1.E-5)
      IF(X1.GT.2.)GO TO 3
      IF(X1.GT..01)GO TO 4
      BMNC=.05
      GO TO 6
    3 BMNC=.1
      GO TO 6
    4 BMNC=1./(20.05-5.0251*X1)
    6 HSNC=BMNC/(5.*BMNC+1.)
      GO TO 2
    1 ABCO2=.17+.0068*SAN(ISL)
      A1CO2=.55
      RBM=.02
      RLM=.0507
      RLS=.0132
      XBM=.25+.0075*SAN(ISL)
      X1=1000.*(WNH3(ISL)+WNO3(ISL))/WT(ISL)
      IF(X1.GT.7.15)GO TO 5
      BMNC=1./(15.-1.678*X1)
      HSNC=1./(20.-1.119*X1)
      HPNC=1./(10.-.42*X1)
      GO TO 2
    5 BMNC=.33
      HSNC=.083
      HPNC=.143
    2 ABP=.003+.00032*CLA(ISL)
      SMS(3,ISL)=SMS(3,ISL)+CS
      ASP=AMAX1(.001,PARM(45)-.00009*CLA(ISL))
C     POTENTIAL TRANSFORMATIONS STRUCTURAL LITTER
      X1=RLS*CS*EXP(-3.*RLR)
      TLSCP=X1*WLSC(ISL)
      TLSLCP=TLSCP*RLR
      TLSLNCP=TLSCP*(1.-RLR)
      TLSNP=X1*WLSN(ISL)
C     POTENTIAL TRANSFORMATIONS METABOLIC LITTER
      X1=RLM*CS
      TLMCP=WLMC(ISL)*X1
      TLMNP=WLMN(ISL)*X1
C     POTENTIAL TRANSFORMATIONS MICROBIAL BIOMASS
      X1=RBM*CS*XBM
      TBMCP=WBMC(ISL)*X1
      TBMNP=WBMN(ISL)*X1
C     POTENTIAL TRANSFORMATIONS SLOW HUMUS
      X1=RHS*CS
      THSCP=WHSC(ISL)*X1
      THSNP=WHSN(ISL)*X1
C     POTENTIAL TRANSFORMATIONS PASSIVE HUMUS
      X1=CS*RHP
      THPCP=WHPC(ISL)*X1
      THPNP=WHPN(ISL)*X1
C     ESTIMATE N DEMAND
      A1=1.-A1CO2
      ASX=1.-ASCO2-ASP
      APX=1.-APCO2
      PN1=TLSLNCP*A1*BMNC
      PN2=.7*TLSLCP*HSNC
      PN3=TLMCP*A1*BMNC
      PN5=TBMCP*ABP*HPNC
      PN6=TBMCP*(1.-ABP-ABCO2)*HSNC
      PN7=THSCP*ASX*BMNC
      PN8=THSCP*ASP*HPNC
      PN9=THPCP*APX*BMNC
C     COMPARE SUPPLY AND DEMAND FOR N
      SUM=0.
      CPN1=0.
      CPN2=0.
      CPN3=0.
      CPN4=0.
      CPN5=0.
      X1=PN1+PN2
      IF(TLSNP.LT.X1)GO TO 7
      SUM=SUM+TLSNP-X1
      GO TO 8
    7 CPN1=X1-TLSNP
    8 IF(TLMNP.LT.PN3)GO TO 9
      SUM=SUM+TLMNP-PN3
      GO TO 10
    9 CPN2=PN3-TLMNP
   10 X1=PN5+PN6
      IF(TBMNP.LT.X1)GO TO 11
      SUM=SUM+TBMNP-X1
      GO TO 12
   11 CPN3=X1-TBMNP
   12 X1=PN7+PN8
      IF(THSNP.LT.X1)GO TO 13
      SUM=SUM+THSNP-X1
      GO TO 14
   13 CPN4=X1-THSNP
   14 IF(THPNP.LT.PN9)GO TO 15
      SUM=SUM+THPNP-PN9
      GO TO 16
   15 CPN5=PN9-THPNP
C     EXCESS N PLACED TEMPORARILY IN SUM
C  16 WNH3(ISL)=WNH3(ISL)+SUM
   16 WMIN=AMAX1(1.E-5,WNO3(ISL)+SUM)
      DMDN=CPN1+CPN2+CPN3+CPN4+CPN5
      X3=1.
C     REDUCE DEMAND IF SUPPLY LIMITS
      IF(WMIN.LT.DMDN)X3=WMIN/DMDN
      SMS(5,ISL)=SMS(5,ISL)+X3
C     ACTUAL TRANSFORMATIONS
      TLSCA=TLSCP*X3
      TLSLCA=TLSLCP*X3
      TLSLNCA=TLSLNCP*X3
      TLSNA=TLSNP*X3
      TLMCA=TLMCP*X3
      TLMNA=TLMNP*X3
      TBMCA=TBMCP*X3
      TBMNA=TBMNP*X3
      THSCA=THSCP*X3
      THSNA=THSNP*X3
      THPCA=THPCP*X3
      THPNA=THPNP*X3
C     DMDN=DMDN*X3
      SGMN=SGMN+SUM
      RNMN(ISL)=SUM-DMDN
C     UPDATE
      IF(RNMN(ISL)>0.)THEN
          X1=PARM(79)*RNMN(ISL)
          WNH3(ISL)=WNH3(ISL)+X1
          WNO3(ISL)=WNO3(ISL)+RNMN(ISL)-X1
      ELSE
          X1=WNO3(ISL)+RNMN(ISL)
          IF(X1>0.)THEN
              WNO3(ISL)=X1
          ELSE
              RNMN(ISL)=-WNO3(ISL)
              WNO3(ISL)=1.E-10    
          END IF   
      END IF    
      DF1=TLSNA
      DF2=TLMNA
	SNMN=SNMN+RNMN(ISL)
	SMS(9,ISL)=SMS(9,ISL)+RNMN(ISL)
      WLSC(ISL)=AMAX1(1.E-10,WLSC(ISL)-TLSCA)
      WLSLC(ISL)=AMAX1(1.E-10,WLSLC(ISL)-TLSLCA)
      WLSLNC(ISL)=AMAX1(1.E-10,WLSC(ISL)-WLSLC(ISL))
      WLMC(ISL)=AMAX1(1.E-10,WLMC(ISL)-TLMCA)
      WLM(ISL)=AMAX1(1.E-10,WLM(ISL)-TLMCA/.42)
      WLSL(ISL)=AMAX1(1.E-10,WLSL(ISL)-TLSLCA/.42)
      WLS(ISL)=AMAX1(1.E-10,WLS(ISL)-TLSCA/.42)
      X3=APX*THPCA+ASX*THSCA+A1*(TLMCA+TLSLNCA)
      WBMC(ISL)=WBMC(ISL)-TBMCA+X3
      DF3=TBMNA-BMNC*X3
      X1=.7*TLSLCA+TBMCA*(1.-ABP-ABCO2)
      WHSC(ISL)=WHSC(ISL)-THSCA+X1
      DF4=THSNA-HSNC*X1
      X1=THSCA*ASP+TBMCA*ABP
      WHPC(ISL)=WHPC(ISL)-THPCA+X1
      DF5=THPNA-HPNC*X1
C     X1=WMIN+1.E-10
C     X1=(X1-DMDN)/X1
C     X1=WNO3(ISL)/(WNO3(ISL)+WNH3(ISL)) 
C     WNO3(ISL)=AMAX1(1.E-5,WNO3(ISL)+RNMN(ISL)*X1)
      DF6=XZ-WNO3(ISL)-WNH3(ISL)
      SMS(10,ISL)=SMS(10,ISL)-DF6
      ADD=DF1+DF2+DF3+DF4+DF5+DF6
      ADF1=ABS(DF1)
      ADF2=ABS(DF2)
      ADF3=ABS(DF3)
      ADF4=ABS(DF4)
      ADF5=ABS(DF5)
      TOT=ADF1+ADF2+ADF3+ADF4+ADF5
      XX=ADD/(TOT+1.E-10)
      WLSN(ISL)=AMAX1(.001,WLSN(ISL)-DF1+XX*ADF1)
      WLMN(ISL)=AMAX1(.001,WLMN(ISL)-DF2+XX*ADF2)
      WBMN(ISL)=WBMN(ISL)-DF3+XX*ADF3
      WHSN(ISL)=WHSN(ISL)-DF4+XX*ADF4
      WHPN(ISL)=WHPN(ISL)-DF5+XX*ADF5
      RSPC(ISL)=.3*TLSLCA+A1CO2*(TLSLNCA+TLMCA)+ABCO2*TBMCA+ASCO2*THSCA+
     1APCO2*THPCA
      SMM(74,MO)=SMM(74,MO)+RSPC(ISL)
      SMS(8,ISL)=SMS(8,ISL)+RSPC(ISL)
      TRSP=TRSP+RSPC(ISL)      
      VAR(74)=VAR(74)+RSPC(ISL)
      RSD(ISL)=.001*(WLS(ISL)+WLM(ISL))
	DHN(ISL)=XHN-WHSN(ISL)-WHPN(ISL)
C     XZ=WNO3(ISL)+WNH3(ISL)
C     ADD=WBMN(ISL)+WHPN(ISL)+WHSN(ISL)+WLMN(ISL)+WLSN(ISL)+XZ
C     DF1=AD1-ADD
C 	DF=ABS(DF1)
C     IF(DF.GT..001)WRITE(KW(1),18)IY,MO,KDA,ISL,AD1,ADD,DF1
C     SMM(85,MO)=SMM(85,MO)+AD1-ADD
C     ADD=WBMC(ISL)+WHPC(ISL)+WHSC(ISL)+WLMC(ISL)+WLSC(ISL)
C     IF(ISL.GT.2)GO TO 20
C     X1=ADD/TOT
C     WRITE(KW(1),19)ISL,IYR,MO,KDA,CDG,SUT,CS,RSPC(ISL),RLR,Z(ISL),WBMC
C    1(ISL),WHPC(ISL),WHSC(ISL),WLMC(ISL),WLSC(ISL),X1,ADD
C     WRITE(KW(1),19)ISL,IYR,MO,KDA,Z(ISL),WBMN(ISL),WHPN(ISL),WHSN(ISL)
C    1,WLMN(ISL),WLSN(ISL),XZ,TOT
      RETURN
C  18 FORMAT(1X,'^^^^^',4I4,16E16.6)
!  19 FORMAT(1X,'^^^^^',4I4,13F10.3)
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE NCNSTD(B1,X1,X2,JSL)
C     THIS SUBPROGRAM REMOVES C AND N FROM STANDING RESIDUE AND ADDS IT
C     TO THE TOP SOIL LAYER AS A RESULT OF A TILLAGE OPERATION.
      INCLUDE 'EPCM0509_su.for'
      RLN=1000.*STDL/(STDN+1.E-5)
      RLR=MIN(.8,STDL/(STD+1.E-5))
      X7=1000.*X1
      C7=.42*X7
      SMS(7,JSL)=SMS(7,JSL)+C7
      SMM(73,MO)=SMM(73,MO)+C7
      VAR(73)=VAR(73)+C7
      RCN=C7/(X2+1.E-5)
      X8=.85-.018*RLN
      IF(X8.LT..01)GO TO 3
      IF(X8.LT..7)GO TO 4
      X8=.7
      GO TO 4
    3 X8=.01
    4 XX=X7*X8
      WLM(JSL)=WLM(JSL)+XX
      XZ=X7-XX
      WLS(JSL)=WLS(JSL)+XZ
      WLSL(JSL)=WLSL(JSL)+XZ*RLR
      X6=X2
	SMM(86,MO)=SMM(86,MO)+X6
C     IF(RCN.LT.10.)GO TO 1
C     X4=.1*C7-X2
C     IF(WNO3(JSL).LT.X4)X4=WNO3(JSL)
C     X5=B1*WNH3(JSL)
C     WNO3(JSL)=WNO3(JSL)-X4
C     WNH3(JSL)=WNH3(JSL)-X5
C     SNMN=SNMN-X4
C	SMS(9,JSL)=SMS(9,JSL)-X4
C	SMS(10,ISL)=SMS(10,ISL)-X4
C     X6=X6+X4
    1 XY=.42*XZ
      WLSC(JSL)=WLSC(JSL)+XY
      WLSLC(JSL)=WLSLC(JSL)+XY*RLR
      WLSLNC(JSL)=WLSC(JSL)-WLSLC(JSL)
      X3=MIN(X6,XY/150.)
	WLSN(JSL)=WLSN(JSL)+X3
      WLMC(JSL)=WLMC(JSL)+.42*XX
      WLMN(JSL)=WLMN(JSL)+X6-X3
      RSD(JSL)=.001*(WLS(JSL)+WLM(JSL))
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE NCONC(P0,P5,P1,A)
C     THIS SUBPROGRAM COMPUTES PARAMETERS OF AN EQUATION DESCRIBING THE
C     N AND P RELATIONS TO BIOMASS ACCUMULATION.
      INCLUDE 'EPCM0509_su.for'
      A=5.0
      DO 2 I=1,10
      A5=A*.5
      EA=EXP(A)
      EA1=EA-1.
      EG=EXP(-A5)
      P0G=P0*EG
      EG1=EXP(A5)
      PEG=P1*(EA-EG1)
      P01=P0*(1.-EG)
      X1=PEG-P01
      PG5=.5*P0G
      FU=X1/EA1+P0G-P5
      IF(ABS(FU).LT.1.E-7)GO TO 3
      DFDA=(EA1*(P1*(EA-.5*EG1)-PG5)-EA*X1)/(EA1*EA1)-PG5
      A=A-FU/DFDA
    2 CONTINUE
      WRITE(KW(1),4)A,FU
    3 P5=(P1*EA-P0)/EA1
      P0=P0-P5
      RETURN
    4 FORMAT(//T10,'NCONC DID NOT CONVERGE',2E16.6)
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE NCONT
C     SUBROUTINE NCONT(YK,QK,SSK,CYLK,PRKK,FSK)
C     SUBROUTINE NCONT(RN,SEDN,SOLN,SSN,TFO,CYLN,PRKN,DNIT,VOL,FNIT,
C    1FAMO,FX)
C     SUBROUTINE NCONT(YOC,VBC,QBC,TFOC,RSDC)
      INCLUDE 'EPCM0509_su.for'
      DATA SM4/0./
      TEK=0.
      TFK=0.
      TSK=0.
      TNO3=0.
      TNH3=0.
      TAP=0.
      TP=0.
      TMP=0.
      TRSD=0.
      TFOP=0.
      TWN=0.
      TOP=0.
      ZLS=0.
      ZLM=0.
      ZLSL=0.
      ZLSC=0.
      ZLMC=0.
      ZLSLC=0.
      ZLSLNC=0.
      ZBMC=0.
      ZHSC=0.
      ZHPC=0.
      ZLSN=0.
      ZLMN=0.
      ZBMN=0.
      ZHSN=0.
      ZHPN=0.
      TNOR=0.
      DO 124 J=1,NBSL
      LL=LID(J)
      TNO3=TNO3+WNO3(LL)
      TNH3=TNH3+WNH3(LL)
      TAP=TAP+AP(LL)
      TOP=TOP+OP(LL)
      TMP=TMP+PMN(LL)
      TP=TP+WP(LL)
      TRSD=TRSD+RSD(LL)
      SW=SW+ST(LL)
      TFOP=TFOP+FOP(LL)
      TEK=TEK+EXCK(LL)
      TFK=TFK+FIXK(LL)
      TSK=TSK+SOLK(LL)
      ZLS=ZLS+WLS(LL)
      ZLM=ZLM+WLM(LL)
      ZLSL=ZLSL+WLSL(LL)
      ZLSC=ZLSC+WLSC(LL)
      ZLMC=ZLMC+WLMC(LL)
      ZLSLC=ZLSLC+WLSLC(LL)
      ZLSLNC=ZLSLNC+WLSLNC(LL)
      ZBMC=ZBMC+WBMC(LL)
      ZHSC=ZHSC+WHSC(LL)
      ZHPC=ZHPC+WHPC(LL)
      WOC(LL)=WBMC(LL)+WHPC(LL)+WHSC(LL)+WLMC(LL)+WLSC(LL)
      ZLSN=ZLSN+WLSN(LL)
      ZLMN=ZLMN+WLMN(LL)
      ZBMN=ZBMN+WBMN(LL)
      ZHSN=ZHSN+WHSN(LL)
      ZHPN=ZHPN+WHPN(LL)
      WON(LL)=WBMN(LL)+WHPN(LL)+WHSN(LL)+WLMN(LL)+WLSN(LL)
  124 CONTINUE
      TWN=ZLSN+ZLMN+ZBMN+ZHSN+ZHPN
      TOC=ZLSC+ZLMC+ZBMC+ZHSC+ZHPC
C     WRITE(KW(1),125)IY,MO1,KDA,ZLSC,ZLMC,ZBMC,ZHSC,ZHPC,TOC
C     X1=UP1(1)+UP1(2)
C     SUM=TAP+TOP+TMP+TP+TFOP+STDP+STDOP+X1
C     BAL=BTP-YP-QAP-VAP-YLP+VAR(62)+VAR(63)-SUM
C     SM4=SM4+BAL
C     BAL=BTP-SEDN-SOLN-PRKN-CYLN+TFO+FNIT-SUM
C     IF(ABS(BAL).LT..001)GO TO 1
C     WRITE(KW(1),125)IY,MO1,KDA,TAP,TOP,TMP,TP,TFOP,STDP,STDOP,X1,SUM
C     WRITE(KW(1),125)IY,MO1,KDA,BTP,YP,QAP,VAP,VAR(62),VAR(63),YLP,BAL,
C    1SM4
C   1 BTP=SUM
C     YLP=0.
C     DF=BTC-YOC-VBC-QBC-RSPC(LL)+TFOC+RSDC-TOC
C     WRITE(KW(1),125)IY,MO1,KDA,BTC,YOC,VBC,QBC,RSPC(LL),TFOC,RSDC,TOC
C     BTC=TOC
      X1=UN1(1)+UN1(2)
      TYN1=TYN-TYN1
      SUM=TNO3+TNH3+TWN+STDN+STDON+X1
      BAL=BTNX+RNO3-VAR(43)-VAR(44)-VAR(45)-VAR(46)-VAR(49)-VAR(52)+
     1VAR(59)+VAR(60)+VAR(61)+VAR(50)-TYN1-SUM
	SM4=SM4+BAL
	IF(ABS(BAL).LT..1)GO TO 1
      WRITE(KW(1),125)IY,MO1,KDA,TNO3,TNH3,TWN,STDN,STDON,X1,BTNX,SUM
      WRITE(KW(1),125)IY,MO1,KDA,RNO3,VAR(43),VAR(44),VAR(45),VAR(46),
     1VAR(49),VAR(52),VAR(59),VAR(60),VAR(61),VAR(50),TYN1,BAL,SM4
    1 BTNX=SUM
      TYN1=TYN
C     X1=UK1(1)+UK1(2)
C     SUM=TSK+TEK+TFK+STDK+STDOK+X1
C     BAL=BTK-YK-QK-SSK-PRKK-CYLK+FSK-SUM
C     WRITE(KW(1),125)IY,MO1,KDA,TSK,TEK,TFK,STDK,STDOK,X1,SUM
C     WRITE(KW(1),125)IY,MO1,KDA,QK,YK,SSK,PRKK,FSK,CYLK,BAL
C     BTK=SUM
      RETURN
  125 FORMAT(1X,3I3,14E16.6)
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE NDNIT (DZA)
C     EPIC0509
C     THIS SUBPROGRAM ESTIMATES DAILY LOSS OF NO3 BY DENITRIFICATION.
      INCLUDE 'EPCM0509_su.for'
      WDN=0.
      DN2G=0.

      AIRV=MAX(0.,(PO(ISL)-ST(ISL))/DZA)
        X1=0.90+.001*CLA(ISL)
        X2=(1.0001-AIRV)/X1
        IF(X2>=.8)THEN
            H2OF=1./(1.+X2**(-60))
          X1=1.-EXP(-.001*PARM(4)*CDG*WOC(ISL)/WT(ISL))
          WDN=WNO3(ISL)*X1*H2OF
          IF(WDN>WNO3(ISL))WDN=WNO3(ISL)
          WNO3(ISL)=WNO3(ISL)-WDN
      ELSE
          WDN=0.
      END IF

      DN2G=PARM(80)*WDN
C      write(*,*) 'ISL=',ISL,' WNO3=',WNO3(ISL),' X1=',X1, ' WDN=',WDN,' DN2=',DN2G
      RETURN
      END

C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE NDNITAK(DZA)
C     EPIC0509
C     THIS SUBPROGRAM DEVELOPED BY ARMEN KEMANIAN ESTIMATES DAILY 
C     DENITRIFICATION AND N2O LOSSES OF SOIL NO3.
	INCLUDE 'EPCM0509_su.for'
	WDN=0.
  	DN2G=0.
	
      ! COMPUTE WATER FACTOR
        AIRV=MAX(0.,(PO(ISL)-ST(ISL))/DZA)
        X1=0.90+.001*CLA(ISL)
        X2=(1.0001-AIRV)/X1
        IF(X2<.8)RETURN
        H2O_F=1./(1.+X2**(-60))
      ! COMPUTE NITRATE FACTOR
        ONO3_C=MAX(1.E-5,1000.*WNO3(ISL)/WT(ISL))
        ONO3_F=ONO3_C/(ONO3_C+60.)
      ! COMPUTE RESPIRATION FACTOR
        X3=1000.*RSPC(ISL)/WT(ISL)
        C_F=MIN(1.,X3/50.)
        D_F=ONO3_F*H2O_F*C_F
        DNITMX=32.
        WDN=D_F*DNITMX*WT(ISL)/1000.
      !WDN=MIN(PARM(80),D_F*DNITMX*WT(ISL)/1000.)
        IF(WDN>WNO3(ISL))WDN=WNO3(ISL)
        !compute N2O as a fraction of WDN
        X1=MAX(PARM(80),ONO3_F*(1.-SQRT(H2O_F))*(1.-C_F**.25))
        DN2G=X1*WDN
        WNO3(ISL)=WNO3(ISL)-WDN
  	RETURN
	END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE NDNITAK_RICEU(DZA)
C     THIS SUBPROGRAM DEVELOPED BY ARMEN KEMANIAN ESTIMATES DAILY 
C     DENITRIFICATION AND N2O LOSSES OF SOIL NO3.
C     MODIFIED BY RICEU TO INCLUDE NO FROM DENITRIFICATION
C
      INCLUDE 'EPCM0509_su.for'
      WDN=0.
      DN2G=0.
      DENITNO(ISL)=0.0
      DENITN2O(ISL)=0.0
      
C compute water factor
C      WFP=SWST(ISL)/PO(ISL)
      AIRV=MAX(0.,(PO(ISL)-ST(ISL))/DZA)
      X1=0.90+.001*CLA(ISL)
      X2=(1.0001- AIRV)/X1
      IF(X2<.8)RETURN
      H2O_F=1./(1.+X2**(-60))
C compute nitrate factor
      ONO3_C=MAX(1.E-5,1000.*WNO3(ISL)/WT(ISL)) ! g/Mg or ppm
      ONO3_F=ONO3_C/(ONO3_C+60.)
C compute respiration factor
      X3=1000.*RSPC(ISL)/WT(ISL) ! units mg/kg
      C_F=MIN(1.,X3/50.)
      D_F=ONO3_F*H2O_F*C_F
      DNITMX=32.
C units g N / Mg soil / day (32 x 10-6 kg N kg-1 soil day-1)
      WDN=D_F*DNITMX*WT(ISL)/1000. ! kg N /ha
      IF(WDN>WNO3(ISL)) WDN=WNO3(ISL)
      !compute N2O as a fraction of WDN
      X1=MAX(PARM(80),ONO3_F*(1.-SQRT(H2O_F))*(1.-C_F**.25))
      DN2G=X1*WDN
      DENITN2O(ISL)=DN2G
      DENITNO(ISL)=MIN(WDN-DN2G,DN2G*RNOTON2O(ISL))      
      WNO3(ISL) = WNO3(ISL)-WDN
      RETURN
      END

C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
       SUBROUTINE PULSERICE
C
C      ! DESCRIPTION adapted from BDNSP_MOD of CMAQv5.1 developed by QUAZI RASOOL et al., 2019
C      ! DESCRIPTION: SUBROUTINE PULSING calculates the increase (or "pulse") of
C      ! soil NOx emission that happens after preciptiation falls on dry soil.
C      !\
C      !\\
C      !  According to  Yan et al., [2005] , this pulsing process is thought to
C      !  be due to a release of inorganic nitrogen trapped on top of the dry soil
C      !  and a subsequent reactivation of water-stressed bacteria, which then
C      !  metabolize the excess nitrogen. This can happen in seasonally dry
C      !  grasslands and savannahs or over freshly fertilized fields.
C      !  Soil NOx emissions consist of baseline emissions plus discrete "pulsing"
C      !  episodes.  We follow the Yan et al., [2005] algorithm, where the pulse
C      !  (relative to the flux pre wetting) is determined by the antecedent dry
C      !  period, with a simple logarithmic relationship,
C      !
C      !  PFACTOR = 13.01 ln ( DRYPERIOD ) -  53.6
C      !
C      !  ,where PFACTOR is the magnitude of peak flux relative to prewetting flux,
C      !  and DRYPERIOD  is the length of the antecedent dry period in hours.
C      !
C      !  The pulse decays with
C      !
C      !  PFACTOR = PFACTOR * EXP( -0.068d0 * dt ) ; dt in hours
C      !  MODIFICATIONS IN FEST-C:
C      !  Note: In EPIC/APEX, an maximum value of PFACTOR (15) is introduced in PULSERICE
C      !  based on the value in YL scheme, from Del Grosso., 2000 to avoid an extremely 
C      !  high NO emissions
C
C      !  Variables:
C      !  NSTEP(ISA): TIMER to set up the initilization value of DRYPERIOD, SWSTPREV, and PFACTOR
C      !  SWTP(ISL): soil water content (ST(ISL)) of previous day
C      !  DRYPERIOD(ISL): TIMER of dry period in day between two pulsing event; same of DRYPERIOD in aboved formula
C      !  MOISDIFF: local variable, difference of soil water content betwee two days to determine the occurence of pulse event
  
      INCLUDE 'EPCM0509_su.for'

  
C      ! Local Variables
C      !initilization-beginning day of simulation for certain subarea
      XX=0.
      DO J=1,NBSL
          ISL=LID(J)
          X1=(Z(ISL)-XX)*1000.
          STR(ISL)=ST(ISL)/X1
          XX=Z(ISL)
          OISTDIFF(ISL) = (STR(ISL)-SWTP(ISL) )
      END DO
      DO J=1,NBSL
          ISL=LID(J)
          IF ( NSTEP.EQ.1 ) THEN
              ISL=LID(J)
              DRYPERIOD(ISL)=0
              SWTP(ISL)=0.000
              PFACTOR(ISL)=1.000
              OISTDIFF(ISL)=0.0
              !        END DO
          ELSE
              IF ( STR(ISL) < 0.175 .and. PFACTOR(ISL) == 1.000) THEN !0.175
                  ! Get change in soil moisture since previous timestep
                  !          MOISTDIFF(ISL) = ( STR(ISL) - SWTP(ISL) )
                  IF (OISTDIFF(ISL) > 0.005) THEN
                      !Initialize new pulse factor (dry period hours)
                      IF( DRYPERIOD(ISL) .LT. 3) THEN
                          ! If dry period < ~3 days then no pulse
                          PFACTOR(ISL) = 1.000
                      ELSE
                         PFACTOR(ISL)=min((13.01*LOG(DRYPERIOD(ISL)
     &*24.0)-53.6),15.0) 
C 15.0 from YL scheme in case of unreasonable amount of NO; check NO value
                      END IF
                      ! Reinitialize dry period
                      DRYPERIOD(ISL) = 0
                      ! If no rain (i.e.,  change in soil moisture is < 0.01)
                  ELSE
                      ! Add one timestep to dry period
                      DRYPERIOD(ISL) = DRYPERIOD(ISL) + 1
                  ENDIF
                  ! If box is already pulsing , then decay pulse one timestep
              ELSEIF ( PFACTOR(ISL) /= 1.000) THEN
                  ! Decay pulse
                  PFACTOR(ISL)   = PFACTOR(ISL) * EXP( -0.06800*24 )
  
                  ! Update dry period
                  IF(STR(ISL)<0.175)DRYPERIOD(ISL)=DRYPERIOD(ISL)+1
                  ! If end of pulse
                  IF ( PFACTOR(ISL) < 1.000 ) PFACTOR(ISL) = 1.000
              ELSEIF (STR(ISL)>=0.175 .and. PFACTOR(ISL)==1.000) THEN
                 IF( DRYPERIOD(ISL) .GE. 3) THEN
                      IF (OISTDIFF(ISL)>0.005) THEN
                        PFACTOR(ISL) = min((13.01 * LOG( DRYPERIOD(ISL)
     &*24.0 ) - 53.6),15.0) 
C15.0 from YL scheme in case of unreasonable amount of NO; check NO value  
                      !Initialize new pulse factor (dry period hours)
                      ELSE 
                          PFACTOR(ISL)=1.000
                      END IF
                 ELSE
                     PFACTOR(ISL)=1.000
                 END IF
                 DRYPERIOD(ISL)=0
              ENDIF
          ENDIF
          !      SWTP(ISL)=STR(ISL) !storing SWST of previous day
      END DO
      DO J=1,NBSL
          ISL=LID(J)
          SWTP(ISL)=STR(ISL) !storing SWST of previous day
      END DO
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*

C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*

      SUBROUTINE NITNON2O
C    
C     THIS SUBPROGRAM CALCULATES THE RATIO OF NO TO N2O
C     IN NITTRIFICATION (& DENITRIFICATION) AND SOIL WATER FACTOR USED FOR HONO 
C     CALCULATION, USING METHOD IN Rasool et al., 2019.
C      USE PARM
      INCLUDE 'EPCM0509_su.for'

C            !        REAL                :: WFPS            ! water filled pore space
C            !        REAL                :: FSWC            ! soil water content adjustment factor to compute HONO
C            !        REAL                :: RNOTON2O        ! ratio of NO to N2O
C            !        REAL, PARAMETER     :: dwat=0.2178     ! [cm^2/s] at 273.15K, water vapor diffusion coefficient derived from AST_DATA_MOD of CMAQv5.1
C            !        REAL, DIMENSION(4)  :: bslp            ! B Slope
C            !        REAL                :: GF              ! relative gas diffusitivity in soil comapred to air
C            !        REAL, PARAMETER     :: A_HONO = 0.429  !HONO:NO ratio for each of the 17 soil biomes [in fraction] FigS1
C      REAL, PARAMETER :: Pi = 3.1415926535897932
C            !        Oswald et al., 2013
C            !     blsp is the slope of the retention curve (NP89) of 11 types of soil texture and then avaraged for 4 hydological soil groups
C            !     blsp of 11 types of soil texture derived from LSM_MOD.F of CMAQv5.1
C             !    BSLP =( /4.443,5.345,7.120,9.694/ )
C            !     Fractional water filled pore space (WFA in NDNITAK)
C            !WFPS(ISL)=ST(ISL)/PO(ISL)
C            !     Relative gas diffusitivity Moldrup et al., (1999)
C            !     0.2178[cm^2/s] at 273.15K, water vapor diffusion coefficient
C            !     derived from AST_DATA_MOD of CMAQv5.1
             XX=0.
	         Pi=3.1415926535897932
			 BSLPT=BSLP(ISG)
            DO J=1,NBSL
                ISL=LID(J)
                X1=(Z(ISL)-XX)*1000.
                POR(ISL)=PO(ISL)/X1
                XX=Z(ISL)
                GF(ISL)=0.2178*POR(ISL)**2
     &*(max(1.0-ST(ISL)/PO(ISL),0.0)) 
     &**(2.0 + 3.0/BSLP(ISG))
                RNOTON2O(ISL)=15.2+
     &((35.5*ATAN(0.68*Pi*((10.0*GF(ISL))-1.86)))/Pi)
                WFPS(ISL)=ST(ISL)/PO(ISL)
C        FSWC(ISL)=0.429*WFPS(ISL) !debug
                IF ( WFPS(ISL) .LE. 0.1) THEN
                    FSWC(ISL) = (0.429*WFPS(ISL))/0.1  
C !Assuming linear increase till 10% SWC
                ELSE IF ( WFPS(ISL) .LE. 0.4 ) THEN
                    FSWC(ISL) = 0.429*(0.4-WFPS(ISL))/0.3
                ELSE
                    FSWC(ISL) = 0.0
                END IF
            END DO

            RETURN
            END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE NEVN
C     EPIC0509
C     THIS SUBPROGRAM ESTIMATES UPWARD NO3 MOVEMENT CAUSED BY SOIL EVAPO
      INCLUDE 'EPCM0509_su.for'
      IF(NEV.EQ.1)GO TO 4
      TOT=0.
      J=NEV
    2 ISL=LID(J)
      X1=WNO3(ISL)-.001*WT(ISL)*PARM(27)
      IF(X1.LE..01)GO TO 3
	X2=1.-EXP(-PARM(62)*SEV(ISL)/(STFR(ISL)*PO(ISL)))
	XX=X1*X2
      TOT=TOT+XX
      WNO3(ISL)=WNO3(ISL)-XX
    3 J=J-1
      IF(J.GT.1)GO TO 2
      WNO3(LD1)=WNO3(LD1)+TOT
    4 RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE NEVP
C     EPIC0509
C     THIS SUBPROGRAM ESTIMATES UPWARD SOLUBLE P MOVEMENT CAUSED BY SOIL
C     EVAPORATION.
      INCLUDE 'EPCM0509_su.for'
      IF(NEV.EQ.1)GO TO 4
      TOT=0.
      J=NEV
    2 ISL=LID(J)
      IF(AP(ISL).LT..001)GO TO 3
      XX=AP(ISL)*MIN(.75,PARM(43)*SEV(ISL)/WT(ISL))
      TOT=TOT+XX
      AP(ISL)=AP(ISL)-XX
    3 J=J-1
      IF(J.GT.1)GO TO 2
      AP(LD1)=AP(LD1)+TOT
    4 RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE NFALL(ZZ)
C     EPIC0509
C     THIS SUBPROGRAM SIMULATES THE CONVERSION OF STANDING DEAD CROP
C     RESIDUE TO FLAT RESIDUE.
      INCLUDE 'EPCM0509_su.for'
      X1=ZZ*STD
      STD=STD-X1
      X2=ZZ*STDN
      STDN=STDN-X2
      ZS=ZZ*STDP
      FOP(LD1)=FOP(LD1)+ZS
      STDP=STDP-ZS
      ZS=ZZ*STDK
      SOLK(LD1)=SOLK(LD1)+ZS
      STDK=AMAX1(1.E-5,STDK-ZS)
      ZS=ZZ*STDL
      STDL=STDL-ZS
      ZZ=MIN(1.,ZZ*10.)
      ZS=ZZ*STDO
      STDO=AMAX1(1.E-5,STDO-ZS)
      X1=X1+ZS
      ZS=ZZ*STDON
      X2=X2+ZS
      CALL NCNSTD(.05,X1,X2,LD1)
      STDON=AMAX1(1.E-5,STDON-ZS)
      ZS=ZZ*STDOP
      FOP(LD1)=FOP(LD1)+ZS
      STDOP=AMAX1(1.E-5,STDOP-ZS)
      ZS=ZZ*STDOK
      SOLK(LD1)=SOLK(LD1)+ZS
      STDOK=AMAX1(1.E-5,STDOK-ZS)
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE NFERT(IRC,JFT)
C     EPIC0509
C     THIS SUBPROGRAM APPLIES N AND P FERTILIZER AT SPECIFIED DATES,
C     RATES, AND DEPTH.
      INCLUDE 'EPCM0509_su.for'
C  UNC
C      IF(ANA(JJK).GE.FNMX(JJK).OR.HUI(JJK).GT.0.50)RETURN
C  UNC
      IF(ANA(JJK)>=FNMX(JJK))RETURN

C    set HU percent of maturity to stop fertilization
      STOP_HUI = 0.5
      IF ( CROPNUM_N>=17 .AND. CROPNUM_N<=18 ) STOP_HUI = 0.4

C      write(*,*)  "CROPNUM_N =", CROPNUM_N, " STOP_HUI =",STOP_HUI

	  IF(HUI(JJK)>STOP_HUI .AND. IRC/=1)RETURN
C
	X1=0.
C	IF(HUI(JJK)>.5.AND.IRC/=1)RETURN
      X1=0.
      I=LD1
      ZFT=TLD(JFT)
      GO TO(5,7,9,11,22),IRC
    7 KF=IDFT(1)
      GO TO 10
    9 IF(IRR.NE.4)GO TO 7
      KF=IDFT(2)
      GO TO 8
   10	X1=FNP
      GO TO 8
    5 KF=LFT(IRO,KT)
      X1=WFA(IRO,KT)
	GO TO 8
   22 KF=IDFP
      X1=APMU
	X3=APMU*FN(KF)
	GO TO 13
    8 DO 2 J=1,NBSL
      I=LID(J)
      IF(ZFT.LT.Z(I))GO TO 6
    2 CONTINUE
    6 IF(X1.GT.0.)GO TO 3
      X1=AMAX1(PARM(28)*UNA(JJK)-TNOR,0.)
C     XX=AMAX1(0.,UNA(JJK)-ANA(JJK))
C     X3=MIN(X1,XX)
      X3=X1
      IF(FN(KF).GT.0.)GO TO 1
      GO TO 14
    3 IF(FN(KF).GT.0.)GO TO 12
   14 X3=0.
      IF(FP(KF).LT.1.E-5.AND.FK(KF).LT.1.E-5)X1=0.
      GO TO 13
   12 X3=X1*FN(KF)
      GO TO 1
   11 KF=IDFT(2)
      X3=BFT-TNOR
    1 IF(X3.LT.1.E-5)GO TO 19
      X3=MIN(X3,FNMX(JJK)-ANA(JJK))
      X1=X3/FN(KF)
   13 X2=X1*FP(KF)
      X4=X3*FNH3(KF)
      X5=X1*FNO(KF)
      X6=X1*FPO(KF)
      X7=X3-X4
      X8=X1*FOC(KF)
      SMM(65,MO)=SMM(65,MO)+X8
      IF(X8.LT..1)GO TO 15
      RLN=.175*X8/(X3+X5)
      X10=.85-.018*RLN
      IF(X10.LT..01)GO TO 16
      IF(X10.LT..7)GO TO 17
      X10=.7
      GO TO 17
   16 X10=.01
   17 XX=X8*X10
      WLMC(I)=WLMC(I)+XX
      YY=X1*X10
      WLM(I)=WLM(I)+YY
      ZZ=X5*X10
      WLMN(I)=WLMN(I)+ZZ
      WLSN(I)=WLSN(I)+X5-ZZ
      XZ=X8-XX
      WLSC(I)=WLSC(I)+XZ
      WLSLC(I)=WLSLC(I)+XZ*.175
      WLSLNC(I)=WLSC(I)-WLSLC(I)
      YZ=X1-YY
      WLS(I)=WLS(I)+YZ
      WLSL(I)=WLSL(I)+YZ*.175
   15 X9=X1*FK(KF)
      X11=X1*FSLT(KF)
      WNH3(I)=WNH3(I)+X4
C   UNC
C     FNHL(1,I) IS MINERAL N APPLIED IN LAYER I BY DAY
C     FNHL(2,I) IS NO3-N APPLIED IN LAYER I BY DAY
C     FNHL(3,I) IS NH3-N APPLIED IN LAYER I BY DAY
C     FNHL(4,I) IS LABILE P APPLIED IN LAYER I BY DAY
C     FNHL(5,I) IS ORGANIC N APPLIED IN LAYER I BY DAY
C     FNHL(6,I) IS ORGANIC P APPLIED IN LAYER I BY DAY
	FNHL(1,I)=FNHL(1,I)+X3
	FNHL(2,I)=FNHL(2,I)+X7
	FNHL(3,I)=FNHL(3,I)+X4
	FNHL(4,I)=FNHL(4,I)+X2
	FNHL(5,I)=FNHL(5,I)+X5
	FNHL(6,I)=FNHL(6,I)+X6
      AP(I)=AP(I)+X2
C     FOP(I)=FOP(I)+X6
      WP(I)=WP(I)+X6
      SMM(59,MO)=SMM(59,MO)+X5
      VAR(59)=X5
      SMM(62,MO)=SMM(62,MO)+X6
      VAR(62)=X6
      SMM(61,MO)=SMM(61,MO)+X4
      VAR(61)=X4
      SMM(63,MO)=SMM(63,MO)+X2
      VAR(63)=X2
      WNO3(I)=WNO3(I)+X7
      ANA(JJK)=ANA(JJK)+X3
      SMM(60,MO)=SMM(60,MO)+X7
      VAR(60)=VAR(60)+X7
      SOLK(I)=SOLK(I)+X9
      SMM(64,MO)=SMM(64,MO)+X9
      VAR(64)=X9
      WSLT(I)=WSLT(I)+X11
      SMM(72,MO)=SMM(72,MO)+X11
      VAR(72)=X11
	N1=MAX0(1,NCP(JJK))
      FRTN(N1,JJK)=FRTN(N1,JJK)+X3+X5
      FRTP(N1,JJK)=FRTP(N1,JJK)+X2+X6
      XX=X1*FCST(KF)
      COST=COST+XX
	IF(IRC.NE.3)GO TO 20
      Y1=COTL(JFT)
      Y2=Y1-COOP(JFT)
      COST=COST+Y1
      CSFX=CSFX+Y2
C   UNC
C	WRITE(KWNCF,818)IYR,MO,KDA,FTNM(KF),KDC(JJK),KDF(KF),IHC(JFT),NBE
C     1(JFT),NBT(JFT),XX,XX,X1
C  UNC
   20 IF(KFL(20).EQ.0)GO TO 21
      WRITE(KW(20),18)IYR,MO,KDA,FTNM(KF),KDC(JJK),KDF(KF),IHC(JFT),NBE
     1(JFT),NBT(JFT),XX,XX,X1
      IF(IRC.NE.3)GO TO 21
	WRITE(KW(20),50)IYR,MO,KDA,TIL(JFT),KDC(JJK),IHC(JFT),NBE(JFT),NBT
     &(JFT),Y1,Y2,FULU(JFT)
   21 IF(NOP.GT.0)WRITE(KW(1),90)IYR,MO,KDA,FTNM(KF),X1,ZFT,X3,X4,X5,X2,
     1X6,X9,XHSM,XX
C   UNC

C	IF(NOP.GT.0)WRITE(KWNCF,890)ASTN,SITEFILE,WPM1FILE,WINDFILE,
C     1SOILFILE,OPSCFILE,YLAT,XLOG,
C     2IYR,MO,KDA,FTNM(KF),X1,ZFT,X3,X4,X5,X2,X6,XHSM
      WRITE(KWNCF,890)ASTN,SITEFILE,WPM1FILE,WINDFILE,
     1SOILFILE,OPSCFILE,YLAT,XLOG,
     2IYR,MO,KDA,FTNM(KF),X1,ZFT,X3,X4,X5,X2,X6,XHSM
C   SAVES INFO FOR DAILY FILE BEGINS
C     X1VWB IS TOTAL FERTILIZER APPLIED BY DAY
C     FNHL(2,I) IS NO3-N APPLIED IN LAYER I BY DAY
C     X3VWB IS MINERAL APPLIED BY DAY
C     X4VWB IS NH3-N APPLIED BY DAY
C     X2VWB IS LABILE P APPLIED BY DAY
C     X5VWB IS ORGANIC N APPLIED BY DAY
C     X6VWB IS ORGANIC P APPLIED BY DAY
C     X7VWB IS NO3-N APPLIED BY DAY
      FTNMVWB=FTNM(KF)
	X1VWB=X1
	ZFTVWB=ZFT
	X3VWB=X3
	X4VWB=X4
	X5VWB=X5
	X2VWB=X2
	X6VWB=X6
	XHSMVWB=XHSM






C   SAVES INFO FOR DAILY FILE ENDS 
  890 FORMAT(1X,A16,1X,5A20,2(1X,F8.2,1X),
     11X,I4,2I2,2X,A8,2X,'RATE=',F6.0,'KG/HA',1X,'DPTH=',F6.2,'M'
     2,1X,'MN=',F4.0,1X,'NH3=',F4.0,1X,'ON=',F4.0,1X,'MP=',F4.0,1X,'OP='
     3,F4.0,1X,'HUSC=',F6.2)
C  UNC

      NFA=0
   19 RETURN
   18 FORMAT(1X,3I4,2X,A8,8X,I6,2X,4I4,F10.2,10X,2F10.2,10X,F10.2)
   50 FORMAT(1X,3I4,2X,A8,8X,I6,6X,3I4,2F10.2,20X,F10.2)
   90 FORMAT(1X,I4,2I2,2X,A8,2X,'RATE=',F6.0,'KG/HA',1X,'DPTH=',F6.2,'M'
     1,1X,'MN=',F4.0,1X,'NH3=',F4.0,1X,'ON=',F4.0,1X,'MP=',F4.0,1X,'OP='
     2,F4.0,1X,'MK=',F4.0,1X,'HUSC=',F6.2,2X,'COST=',F7.0,'$/HA')
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE NFIX
C     EPIC0509
C     THIS SUBPROGRAM ESTIMATES N FIXATION FOR LEGUMES.
      INCLUDE 'EPCM0509_su.for'
      IF(HUI(JJK).LT..15.OR.HUI(JJK).GT..75)GO TO 8
      SUM=0.
      TOT=0.
      ADD=0.
      DO 2 J=1,NBSL
      ISL=LID(J)
      IF(Z(ISL).GT..3)GO TO 3
      SUM=SUM+ST(ISL)-S15(ISL)
      TOT=TOT+FC(ISL)-S15(ISL)
    2 CONTINUE
      GO TO 4
    3 L1=LID(J-1)
      RTO=(.3-Z(L1))/(Z(ISL)-Z(L1))
      SUM=SUM+(ST(ISL)-S15(ISL))*RTO
      TOT=TOT+(FC(ISL)-S15(ISL))*RTO
    4 X1=SUM/TOT
      IF(X1.LE..25)GO TO 8
      DO 5 J=1,NBSL
      ISL=LID(J)
      IF(Z(ISL).GT.RD(JJK))GO TO 6
      ADD=ADD+WNO3(ISL)
    5 CONTINUE
      GO TO 7
    6 L1=LID(J-1)
      RTO=(RD(JJK)-Z(L1))/(Z(ISL)-Z(L1))
      ADD=ADD+WNO3(ISL)*RTO
    7 FXN=1.5-.005*ADD/RD(JJK)
      IF(FXN.LE.0.)GO TO 8
      FXW=1.333*X1-.333
      FXG=(HUI(JJK)-.1)*5.
      FXS=4.-5.*HUI(JJK)
      FXP=MIN(FXG,FXS,1.)
      FIXR=MIN(FXW,FXN,1.)*FXP
      WFX=FIXR*UNO3
    8 WFX=AMAX1(0.,PARM(7)*WFX+(1.-PARM(7))*UNO3)
      IF(WFX.GT.PARM(68))WFX=PARM(68)
      SMM(50,MO)=SMM(50,MO)+WFX
      UNO3=UNO3-WFX
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE NFTBL(L)
C     EPIC0509
C     THIS SUBPROGRAM READS FERTILIZER TABLE TO DETERMINE PARAMETERS OF
C     INPUT FERTILIZER
      INCLUDE 'EPCM0509_su.for'
      DIMENSION XTP(10)
      IF(NDF.EQ.0)GO TO 1
      DO 264 L=1,NDF
      IF(KDF(L).EQ.JX(7))GO TO 392
  264 CONTINUE
    1 NDF=NDF+1
      KDF(NDF)=JX(7)
      KDF1(JX(7))=NDF
C     READ FERTILIZER TABLE
C  1  FTNM = FERTILIZER NAME
C  2  FN   = MINERAL N FRACTION
C  3  FP   = MINERAL P FRACTION
C  4  FK   = MINERAL K FRACTION
C  5  FNO  = ORGANIC N FRACTION
C  6  FPO  = ORGANIC P FRACTION
C  7  FNH3 = AMMONIA N FRACTION(FNH3/FN)
C  8  FOC  = ORGANIC C FRACTION
C  9  FSLT = SALT FRACTION
C 10  FCST = COST OF FERTILIZER($/KG)      
  391 READ(KR(9),395)I,FTNM(NDF),(XTP(K),K=2,10)
      IF(I.NE.JX(7))GO TO 391
      FN(NDF)=XTP(2)
      FP(NDF)=XTP(3)
      FK(NDF)=XTP(4)
      FNO(NDF)=XTP(5)
      FPO(NDF)=XTP(6)
      FNH3(NDF)=XTP(7)
      FOC(NDF)=XTP(8)
      FSLT(NDF)=XTP(9)
      FCST(NDF)=XTP(10)
      REWIND KR(9)
  392 RETURN
  395 FORMAT(1X,I4,1X,A8,10F8.3)
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE NITVOL(Z5)
C     EPIC0509
C     THIS SUBPROGRAM SIMULATES THE TRANSFORMATION FROM NH3 TO NO3, AND
C     THE VOLATILIZATION OF NH3 USING MODIFIED METHODS OF REDDY AND OF
C     THE CERES MODEL
      INCLUDE 'EPCM0509_su.for'
C	X1=CDG
      X1=.41*((STMP(ISL)-5.)/10.)
      IF(X1.LE.0.)GO TO 10
      IF(ISL.NE.LD1)GO TO 1
      FAF=.335+.16*ALOG(U10+.2)
      AKAV=X1*FAF
      GO TO 3
    1 FCEC=AMAX1(.3,1.-.038*CEC(ISL))
      FZ=1.-Z5/(Z5+EXP(SCRP(12,1)-SCRP(12,2)*Z5))
      AKAV=X1*FCEC*FZ
    3 IF(PH(ISL).GT.7.)GO TO 9
      FPH=.307*PH(ISL)-1.269
      GO TO 7
    9 IF(PH(ISL).GT.7.4)GO TO 8
      FPH=1.
      GO TO 7
    8 FPH=5.367-.599*PH(ISL)
    7 AKAN=X1*SUT*FPH
      AKAV=AKAV*SUT
      XX=AKAV+AKAN
      IF(XX.LT.1.E-5)GO TO 10
      F=MIN(PARM(64),1.-EXP(-XX))
      X1=F*WNH3(ISL)
      AVOL=X1*PARM(57)
      RNIT=X1-AVOL
C     UNC
      IF(ISL.EQ.LID(1))RNITVWB1=RNIT
      IF(ISL.EQ.LID(2))RNITVWB2=RNIT

C Modified by RICEU for including NO, HONO, N2O from nitrification
C AVOLRICEU is equal to AVOL which represents NH3 simulated by EPIC/APEX,
C !!! Consider to delete AVOLRICEU !!!
      AVOLRICEU(ISL)=AVOL
      SVOLRICEU=SVOLRICEU+AVOLRICEU(ISL)
      RNITIN(ISL)=RNIT
      SRNITIN=SRNITIN+RNITIN(ISL)
C Partition parts of RNIT as NO, HONO, N2O emissions from nitrification
C Nitrification N2O emissions are calcualted using method adapted from DayCENT
C Nitrification N2O is assumed as 2% of nitrification rate (RNIT in EPIC) (Parton et al, 2001)
C     " We assume that N2O flux from nitrification is proportional to the nitrification
C       rate and calculate flux using
C       FN2O=k2*FNO3
C       FN2O-N2O flux from nitrification (gN m-2 d-1)
C       k2-fraction of nitrified N lost as N2O flux (k2=0.02)  "
C Nitrification N2O: NITN2O(called TN2O here, unit kg/ha/d)
      TN2O(ISL)= 0.02*RNIT 
C Nitrification NO: method adapted from DayCENT with modifications in PULSE function 
C which is adapted from  Hudman et al., 2012
      TNOX(ISL) = RNOTON2O(ISL)*TN2O(ISL)*PFACTOR(ISL) ! Parton et al, 2001
C HONO: method from Quazi et al., 2019
C FSWC derived from NITNON2O subroutine
      HONO(ISL) = FSWC(ISL) * TNOX(ISL)
      TNO(ISL) = TNOX(ISL) - HONO(ISL)
      SNITNOX=SNITNOX+TNOX(ISL)
      SNITNO=SNITNO+TNO(ISL)
      SNITN2O=SNITN2O+TN2O(ISL)
      SHONO=SHONO+HONO(ISL)      
C new RNIT (minus intermediate products of nitrification, NO, HONO, and N2O)
      RNIT=RNIT-TN2O(ISL)-TNOX(ISL)
      RNITOUT(ISL)=RNIT
      SRNITOUT=SRNITOUT+RNITOUT(ISL)
C     RICEU END      

C     UNC
      WNH3(ISL)=WNH3(ISL)-AVOL-RNIT
      SVOL=SVOL+AVOL
      WNO3(ISL)=WNO3(ISL)+RNIT
      SNIT=SNIT+RNIT
   10 RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE NKMIN
C     EPIC0509
C     THIS SUBPROGRAM COMPUTES K FLUX BETWEEN THE WATER SOLUBLE,
C     EXCHANGEABLE, & FIXED POOLS
      INCLUDE 'EPCM0509_su.for'
      RSE=(SOLK(ISL)-EXCK(ISL)*EQKS(ISL))*PARM(29)
      REF=(EXCK(ISL)-FIXK(ISL)*EQKE(ISL))*PARM(22)
      SOLK(ISL)=AMAX1(.0001,SOLK(ISL)-RSE)
      EXCK(ISL)=AMAX1(.0001,EXCK(ISL)+RSE-REF)
      FIXK(ISL)=FIXK(ISL)+REF
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE NLCH
!     EPIC0810  -- Updated by Jimmy 20170119
!     THIS SUBPROGRAM ESTIMATES DAILY NO3, SALT,AND SOLUBLE P AND K
!     LEACHING BY PERCOLATION AND LATERAL SUBSURFACE FLOW FOR ALL
!     LAYERS EXCEPT THE SURFACE LAYER.
      INCLUDE 'EPCM0509_su.for'
      AP(ISL)=AP(ISL)+VAP
      WNO3(ISL)=WNO3(ISL)+VMN
      SOLK(ISL)=SOLK(ISL)+VSK
      WSLT(ISL)=WSLT(ISL)+VSLT
      VMN=0.
      VAP=0.
      VSK=0.
      VSLT=0.
      SSO3(ISL)=0.
      SSFN=0.
      SSFP=0.
      SSFK=0.
      SSST=0.
      V=PKRZ(ISL)+SSF(ISL)+1.E-10
      IF(V>0.)THEN
          X2=1.-EXP(-V/(STFR(ISL)*PO(ISL)))
          X1=WNO3(ISL)-.001*WT(ISL)*PARM(27)
          IF(X1>0.)THEN
              X3=X1*X2
              VV=X3/V
              WNO3(ISL)=WNO3(ISL)-X3
              SSO3(ISL)=VV*PKRZ(ISL)
              SSFN=VV*SSF(ISL)
              VMN=SSO3(ISL)
          END IF
          IF(SOLK(ISL)>0.)THEN
              X3=SOLK(ISL)*X2
              SOLK(ISL)=SOLK(ISL)-X3
              VSK=X3*PKRZ(ISL)/V
              SSFK=X3-VSK
          END IF
          IF(WSLT(ISL)>0.)THEN
              X3=WSLT(ISL)*X2
              WSLT(ISL)=WSLT(ISL)-X3
              VSLT=X3*PKRZ(ISL)/V
              SSST=X3-VSLT
          END IF
          IF(AP(ISL)>0.)THEN
              XX=MIN(.75,(PKRZ(ISL)+SSF(ISL))/WT(ISL))
              X3=XX*AP(ISL)
              AP(ISL)=AP(ISL)-X3
              VAP=X3*PKRZ(ISL)/V
              SSFP=X3*SSF(ISL)/V
          END IF
      END IF
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE NLGB(WTI,WTO,WTB,WTE,KW)
C     EPIC0509
C     THIS SUBPROGRAM THE LAGOON MANURE BALANCE
      DIMENSION KW(32)
      DF=WTB+WTI-WTO-WTE
      WRITE(KW(1),1)DF,WTB,WTI,WTO,WTE
      WRITE(KW(1),2)DF
      RETURN
    1 FORMAT(10E13.5)
    2 FORMAT(T10,'LAGOON MANURE BALANCE = ',E13.5/)
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE NLIMA(SB,DSB,C1,PH,ALS,OC,BSA)
C     EPIC0509
C     THIS SUBPROGRAM ESTIMATES ALUMINUM SATURATION USING BASE
C     SATURATION, ORGANIC C, AND PH.
      SB=SB-DSB
      IF(SB.LT..02)SB=.02
      BSA=C1*SB
      IF(PH.GT.5.6)GO TO 2
      ALS=154.2-1.017*BSA-3.173*OC-14.23*PH
      IF(ALS.LT..01)GO TO 2
      IF(ALS.GT.95.)ALS=95.
      GO TO 3
    2 ALS=0.
    3 RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE NLIME
C     EPIC0509
C     THIS SUBPROGRAM APPLIES LIME WHEN THE SUM OF THE SOIL LIME REQUIRE
C     MENT AND ACCUMULATED LIME REQUIREMENT CAUSED BY N FERTILIZER EXCEE
C     4 T/HA.
      INCLUDE 'EPCM0509_su.for'
      DATA SMFN/0./
      OC=0.
      TOT=0.
      XZ=0.
      ZZ=0.
      XX=0.
      DO 2 J=1,NBSL
      ISL=LID(J)
      IF(Z(ISL).GT.BIG)GO TO 3
      XY=WT(ISL)
      OC=OC+.1*WOC(ISL)
      XZ=XZ+CEC(ISL)*XY
      TOT=TOT+PH(ISL)*XY
      ZZ=ZZ+SMB(ISL)*XY
      XX=XX+XY
    2 CONTINUE
      J=NBSL
      ISL=LID(NBSL)
      GO TO 4
    3 L1=LID(J-1)
      W3=Z(ISL)-Z(L1)
      W2=BIG-Z(L1)
      RTO=W2*WT(ISL)/W3
      X1=.1*WOC(ISL)/WT(ISL)
      OC=OC+RTO*X1
      TOT=TOT+RTO*PH(ISL)
      ZZ=ZZ+RTO*SMB(ISL)
      XZ=XZ+RTO*CEC(ISL)
      XX=XX+RTO
    4 XZ=XZ/XX
      OC=OC/XX
      TOT=TOT/XX
      ZZ=ZZ/XX
      XY=.001*XX
      X1=SMY(60)+SMY(61)
      DSB=.036*(SMY(50)+X1-SMFN)/XX
      SMFN=X1
      BS=100./XZ
      TOT=TOT-.05*DSB*BS
      CALL NLIMA(ZZ,DSB,BS,TOT,ALSX,OC,BSA)
      IF(TOT.GT.6.5)GO TO 6
      IF(IDSP.NE.4)GO TO 5
      EAL=.01*ALSX*XZ
      TLA=EAL*XY
      IF(TLA.LT.1.)GO TO 6
      TOT=5.4
      CALL NLIMA(ZZ,-EAL,BS,TOT,ALSX,OC,BSA)
      GO TO 7
    5 DBS=MIN((6.5-TOT)/.023,90.-BSA)
      ALN=0.
      TLA=DBS*XY/BS
      IF(TLA.GT.2.)GO TO 11
	IF(TOT.GT.5.)GO TO 6
	RTO=1.
	GO TO 12
   11 RTO=2./TLA
      TLA=2.
   12 PHN=(6.5-TOT)*RTO+TOT
      DBS=MIN((PHN-TOT)/.023,90.-BSA)
      BSA=(BSA+DBS)/BS
      GO TO 8
    6 TLA=0.
    7 ALN=ALSX
      PHN=TOT
      BSA=ZZ
    8 DO 9 K=1,J
      ISL=LID(K)
      TOT=SMB(ISL)
      XZ=PH(ISL)
      ALSX=ALS(ISL)
      SMB(ISL)=BSA
      PH(ISL)=PHN
      ALS(ISL)=ALN
    9 CONTINUE
      IF(J.EQ.NBSL)GO TO 10
      ISL=LID(J)
      W1=Z(ISL)-BIG
      SMB(ISL)=(W1*TOT+W2*SMB(ISL))/W3
      PH(ISL)=(W1*XZ+W2*PH(ISL))/W3
      ALS(ISL)=AMAX1(.001,(W1*ALSX+W2*ALS(ISL))/W3)
   10 RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE NPCY
C     EPIC0509
C     THIS SUBPROGRAM IS THE MASTER NUTRIENT CYCLING SUBPROGRAM.
C     CALLS NPMIN, NYNIT, NLCH, NCNMI, AND NDNIT FOR EACH SOIL
C     LAYER.
      INCLUDE 'EPCM0509_su.for'
C Added by RICEU for new N VARS
      SNITNOX=0.0
      SNITNO=0.0
      SNITN2O=0.0
      SHONO=0.0
      SRNITIN=0.0
      SRNITOUT=0.0
      SVOLRICEU=0.0
      SDENITNO=0.0
      SDENITN2O=0.0
C********	
      SGMN=0.
      SDN=0.
	SN2=0.
      SMP=0.
      SIP=0.
      TSFN=0.
      TSFP=0.
      TSFK=0.
      TSFS=0.
      SVOL=0.
      SNIT=0.
      TRSP=0.
	SMNIM=0.
	XX=0.
	SSO3(LD1)=0.
      DO 5 J=1,NBSL
      ISL=LID(J)
      RSPC(ISL)=0.
      RNMN(ISL)=0.
C Added by RICEU for new N VARS
C TNOX:NITNOX;TNO:NITNO;TN2O;NITN2O
      TNOX(ISL)=0. 
      TNO(ISL)=0.   
      TN2O(ISL)=0. 
      HONO(ISL)=0.    
      RNITIN(ISL)=0.  
      RNITOUT(ISL)=0.   
      AVOLRICEU(ISL)=0.
C*********   

      X1=ST(ISL)-S15(ISL)
	IF(X1.LT.0.)GO TO 6
	SUT=MIN(1.,.1+.9*SQRT(X1/(FC(ISL)-S15(ISL))))
      GO TO 7
    6 SUT=.1*(ST(ISL)/S15(ISL))**2
    7 CALL NPMIN
      CALL NKMIN
      IF(ISL.NE.LD1)GO TO 2
      ZZ=PARM(66)*(1.+.1*RFV)
      IF(STD+STDO.GT..001)CALL NFALL(ZZ)
	IF(LUN.EQ.35.OR.RFV.LT.1.E-5)GO TO 3
      CALL NYNIT
      CALL NYPA
      SMM(54,MO)=SMM(54,MO)+YP
      VAR(54)=YP
      GO TO 3
    2 CALL NLCH
    3 TSFN=TSFN+SSFN
      TSFP=TSFP+SSFP
      TSFK=TSFK+SSFK
      TSFS=TSFS+SSST
      IF(ISL==IDR)THEN
          SMM(53,MO)=SMM(53,MO)+SSFN
          VAR(53)=SSFN
          SMM(114,MO)=SMM(114,MO)+SSFP
          VAR(114)=SSFP
      END IF
      Z5=500.*(Z(ISL)+XX)
      IF(WNH3(ISL).GT..01)CALL NITVOL(Z5)
      IF(STMP(ISL).LE.0.)GO TO 5
      CDG=STMP(ISL)/(STMP(ISL)+EXP(SCRP(14,1)-SCRP(14,2)*STMP(ISL)))
C     IF(STMP(ISL).LE.5.)GO TO 5
C	CDG=.41*((STMP(ISL)-5.)/10.)
C     IF(RZ.LT.XX)GO TO 4
	SMNIM=SMNIM-WNO3(ISL)
      CALL NCNMI(Z5,CS)
	SMNIM=SMNIM+WNO3(ISL)
      CALL NPMN(CS)
      SMP=SMP+WMP

C     Jimmy bug fix on 20180319
      DZA=1000.*(Z(ISL)-XX)
C     commented out by RICEU for new N mechanism
C      IF(IDN==0)THEN
C          CALL NDNIT(DZA)
C      ELSE
C          CALL NDNITAK(DZA)
C      END IF
C     added by RICEU for new N mechanism
      SELECT CASE (IDN)
      CASE(0)
            CALL NDNIT(DZA)
      CASE(1)
            CALL NDNITAK(DZA)
      CASE(2)
            CALL NDNITAK_RICEU(DZA)
            SDENITNO=SDENITNO+DENITNO(ISL)
            SDENITN2O=SDENITN2O+DENITN2O(ISL)
      CASE DEFAULT
            CALL NDNITAK(DZA)
      END SELECT	  
	  


      SDN=SDN+WDN
      SN2=SN2+DN2G
    5 XX=Z(ISL)
      SMM(57,MO)=SMM(57,MO)+VAP
      VAR(57)=VAP
      SMM(81,MO)=SMM(81,MO)+VSK
      VAR(81)=VSK
      SMM(82,MO)=SMM(82,MO)+VSLT
      VAR(82)=VSLT
	SMM(87,MO)=SMM(87,MO)+SMNIM
	VAR(87)=SMNIM
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE NPMIN
C     EPIC0509
C     THIS SUBPROGRAM COMPUTES P FLUX BETWEEN THE LABILE, ACTIVE MINERAL
C     AND STABLE MINERAL P POOLS.
C     S5=.1*SUT*EXP(.115*STMP(ISL)-2.88)
      INCLUDE 'EPCM0509_su.for'
      RTO=MIN(.8,PSP(ISL)/(1.-PSP(ISL)))
      RMN=PARM(77)*(AP(ISL)-PMN(ISL)*RTO)
      X1=4.*PMN(ISL)-OP(ISL)
      IF(X1>500.)THEN
		ROC=10.**(LOG10(BPC(ISL))+LOG10(X1))
	ELSE 
		ROC=BPC(ISL)*X1
      END IF    
	ROC=PARM(78)*ROC
      OP(ISL)=OP(ISL)+ROC
      PMN(ISL)=PMN(ISL)-ROC+RMN
      AP(ISL)=AP(ISL)-RMN
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE NPMN(CS)
C     EPIC0509
C     THIS SUBPROGRAM SIMULATES MINERALIZATION P USING PAPRAN EQS
      INCLUDE 'EPCM0509_su.for'
      DATA CMP/.0003/
      TKG=RSD(ISL)*1000.
      HMP=DHN(ISL)*WP(ISL)/(WHSN(ISL)+WHPN(ISL))
      R4=.58*TKG
      X1=AMAX1(1.,FOP(ISL)+AP(ISL))
      CPR=MIN(2000.,R4/X1)
      CPRF=EXP(-.693*(CPR-200.)/200.)
      DECR=AMAX1(.01,.05*CPRF*CS)
      RMP=DECR*FOP(ISL)
	IF(FOP(ISL)>1.E-5)THEN
		FOP(ISL)=FOP(ISL)-RMP
	ELSE
		RMP=FOP(ISL)
		FOP(ISL)=0.
	END IF
	WMP=.8*RMP+HMP
	X1=AP(ISL)+WMP
	IF(X1<0.)THEN
		WMP=AP(ISL)
		HMP=WMP-.8*RMP
		AP(ISL)=1.E-5
	ELSE 
		AP(ISL)=AP(ISL)+WMP
	END IF
      WP(ISL)=WP(ISL)-HMP+.2*RMP
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE NPUP
C     EPIC0509
C     THIS SUBPROGRAM CALCULATES THE DAILY P DEMAND FOR OPTIMAL PLANT
C     GROWTH.
      INCLUDE 'EPCM0509_su.for'
	IF(NUPC.EQ.0)GO TO 2
      CPT=(BP(4,JJK)-BP(3,JJK))*(1.-HUI(JJK)/(HUI(JJK)+EXP(BP(1,JJK)-
     1BP(2,JJK)*HUI(JJK))))+BP(3,JJK)
	GO TO 3 
    2 CPT=BP(2,JJK)+BP(1,JJK)*EXP(-BP(4,JJK)*HUI(JJK))
    3 UP2(JJK)=CPT*DM(JJK)*1000.
C     IF(UP2(JJK).LT.UP1(JJK))UP2(JJK)=UP1(JJK)
      UPP=MIN(4000.*BP(3,JJK)*DDM(JJK),UP2(JJK)-UP1(JJK))
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE NUK
C     EPIC0509
C     THIS SUBPROGRAM CALCULATES THE DAILY K DEMAND FOR OPTIMAL PLANT
C     GROWTH.
      INCLUDE 'EPCM0509_su.for'
      CKT=BK(1,JJK)+HUI(JJK)*(BK(2,JJK)+HUI(JJK)*BK(4,JJK))
      UK2(JJK)=CKT*DM(JJK)*1000.
      IF(UK2(JJK).LT.UK1(JJK))UK2(JJK)=UK1(JJK)
      UPK=MIN(4000.*BK(3,JJK)*DDM(JJK),UK2(JJK)-UK1(JJK))
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE NUP
C     EPIC0509
C     THIS SUBPROGRAM CALCULATES THE DAILY N DEMAND FOR OPTIMAL PLANT
C     GROWTH.
      INCLUDE 'EPCM0509_su.for'
	IF(NUPC.EQ.0)GO TO 2
      CNT=(BN(4,JJK)-BN(3,JJK))*(1.-HUI(JJK)/(HUI(JJK)+EXP(BN(1,JJK)-
     1BN(2,JJK)*HUI(JJK))))+BN(3,JJK)
	GO TO 3 
    2 CNT=BN(2,JJK)+BN(1,JJK)*EXP(-BN(4,JJK)*HUI(JJK))
    3 UN2(JJK)=CNT*DM(JJK)*1000.
C     IF(UN2(JJK).LT.UN1(JJK))UN2(JJK)=UN1(JJK)
      UNO3=MIN(4000.*BN(3,JJK)*DDM(JJK),UN2(JJK)-UN1(JJK))
C     WRITE(KW(1),1)IYR,MO,KDA,HUI(JJK),CNT,DM(JJK),DDM(JJK),UN1(JJK),
C    1UN2(JJK),UNO3
C   1 FORMAT(1X,I4,2I2,7E13.5)
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE NUSE
C     EPIC0509
C     THIS SUBPROGRAM CALCULATES THE DAILY POTENTIAL SOIL SUPPLY OF P
C     FOR EACH LAYER.
      INCLUDE 'EPCM0509_su.for'
      XX=1.5*UPP/RW(JJK)
      DO 4 J=1,IR
      ISL=LID(J)
      UN(ISL)=AMAX1(0.,(WNO3(ISL)-.001*PARM(27)*WT(ISL))*U(ISL)/(ST(ISL)
     1+.001))
      SUN=SUN+UN(ISL)
      UK(ISL)=SOLK(ISL)*U(ISL)/(ST(ISL)+.001)
      SUK=SUK+UK(ISL)
      F=1000.*AP(ISL)/WT(ISL)
      IF(F.GT.30.)GO TO 2
      F=F/(F+EXP(8.0065-.3604*F))
      GO TO 3
    2 F=1.
    3 UP(ISL)=XX*F*RWT(ISL,JJK)
      IF(UP(ISL).GE.AP(ISL))UP(ISL)=.9*AP(ISL)
    4 SUP=SUP+UP(ISL)
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE NUTS(U1,U2,UU)
C     EPIC0509
C     THIS SUBPROGRAM CALCULATES THE PLANT STRESS FACTOR CAUSED BY LIMITED
C     SUPPLY OF N OR P.
      INCLUDE 'EPCM0509_su.for'
      UU=200.*(U1/U2-.5)
      IF(UU.GT.0.)GO TO 2
      UU=0.
      GO TO 3
    2 UU=UU/(UU+EXP(SCRP(8,1)-SCRP(8,2)*UU))
    3 RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE NYNIT
C     EPIC0509
C     THIS SUBPROGRAM ESTIMATES DAILY NO3 LEACHING BY PERCOLATION AND
C     LATERAL SUBSURFACE FLOW AND NO3 LOSS IN RUNOFF FOR THE SURFACE
C     LAYER
      INCLUDE 'EPCM0509_su.for'
      WNO3(LD1)=WNO3(LD1)+VMN
      X3=VMN
      WSLT(LD1)=WSLT(LD1)+VSLT
      VMN=0.
      VSK=0.
      VSLT=0.
      SSST=0.
      V=QD+SSF(LD1)+PKRZ(LD1)
      IF(V.LE.0.)GO TO 2
	X1=WNO3(LD1)-.001*WT(LD1)*PARM(27)
	X2=1.-EXP(-V/(STFR(LD1)*PO(LD1)))
	X4=PKRZ(LD1)+PARM(14)*(QD+SSF(LD1))
	IF(X1.LE.0.)GO TO 1
	VNO3=X1*X2
      CO=MIN(.01*PARM(63),VNO3/X4)
	CS=PARM(14)*CO
      QNO3=QD*CS
      SSFN=CS*SSF(LD1)
      SSO3(LD1)=CO*PKRZ(LD1)
C     WRITE(KW(1),3)IYR,MO,KDA,RFV,QD,SSF(LD1),PKRZ(LD1),X3,X1,CO,CS,
C    1QNO3,SSFN,SSO3(LD1)
C   3 FORMAT(1X,'!!!!!',3I4,11F10.4)
      WNO3(LD1)=WNO3(LD1)-QNO3-SSFN-SSO3(LD1)
      VMN=SSO3(LD1)
    1 IF(SOLK(LD1).LT.1.E-5)GO TO 4
      X3=SOLK(LD1)*X2
      SOLK(LD1)=SOLK(LD1)-X3
      COK=X3/X4
      CSK=PARM(14)*COK
      VSK=COK*PKRZ(LD1)
      SSFK=CSK*SSF(LD1)
      QSK=CSK*QD
      SMM(79,MO)=SMM(79,MO)+QSK
      VAR(79)=QSK
    4 IF(WSLT(LD1).LT.1.E-5)GO TO 2
      X5=(WSLT(LD1)+1.E-5)*X2
      COSL=X5/X4
      CSSL=PARM(14)*COSL
      SSST=CSSL*SSF(LD1)
      VSLT=COSL*PKRZ(LD1)
      XX=X5-VSLT-SSST
      SMM(70,MO)=SMM(70,MO)+XX
      VAR(70)=XX
      WSLT(LD1)=WSLT(LD1)-X5
    2 RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE NYON
C     EPIC0509
C     THIS SUBPROGRAM PREDICTS DAILY ORGANIC N AND HUMUS LOSS, GIVEN
C     SOIL LOSS AND ENRICHMENT RATIO.
      INCLUDE 'EPCM0509_su.for'
      TOT=WHPN(LD1)+WHSN(LD1)+WBMN(LD1)+WLMN(LD1)+WLSN(LD1)
      YN=YEW*TOT
      X1=1.-YEW
      WBMN(LD1)=WBMN(LD1)*X1
      WHSN(LD1)=WHSN(LD1)*X1
      WHPN(LD1)=WHPN(LD1)*X1
      WLSN(LD1)=WLSN(LD1)*X1
      WLMN(LD1)=WLMN(LD1)*X1
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE NYPA
C     EPIC0509
C     THIS SUBPROGRAM PREDICTS DAILY P LOSS, GIVEN SOIL LOSS AND
C     ENRICHMENT RATIO.
      INCLUDE 'EPCM0509_su.for'
      YP=YEW*WP(LD1)
      WP(LD1)=WP(LD1)-YP
      X2=AP(LD1)
      YAP=YEW*X2
      X2=X2-YAP
      X1=EXCK(LD1)*YEW
      EXCK(LD1)=EXCK(LD1)-X1
      X3=FIXK(LD1)*YEW
      FIXK(LD1)=FIXK(LD1)-X3
      VAR(78)=X1+X3
      SMM(78,MO)=SMM(78,MO)+X1+X3
      V=QD+PKRZ(LD1)+SSF(LD1)
      IF(V>0.)THEN
          X1=MAX(5.*V,WT(LD1)*PARM(8))
          IF(QD>0.)THEN
              IF(LBP>0)THEN
                  RTO=(10.*WP(LD1)/WT(LD1))**PARM(34)
                  QAP=MIN(.5*X2,X2*QD*RTO/X1)
              ELSE
                  QAP=X2*QD/X1
              END IF
              X2=X2-QAP
          END IF
          X3=MIN(.5*X2,X2*(PKRZ(LD1)+SSF(LD1))/X1)
          AP(LD1)=X2-X3
          VAP=X3*PKRZ(LD1)/V
          SSFP=X3*SSF(LD1)/V
      END IF
      YMP=PMN(LD1)*YEW
      PMN(LD1)=PMN(LD1)-YMP
      YP=YP+YMP+YAP
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
C     SUBROUTINE OPENV( NUM, FNAM, DIR, MODE )
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE OPENF(DIR)
C     EPIC0509
C     THIS SUBPROGRAM OPENS FILES.
      CHARACTER(*), INTENT  (IN) ::DIR
      CHARACTER(4)::AXT
      CHARACTER*300              FULLDIR
      CHARACTER*300              FILENAM
      CHARACTER(3)::AXTN
        DIMENSION AXTN(37)
	DIMENSION AXT(37)

      INCLUDE 'EPCM0509_su.for'
C  TENN/UNC
C  TENN/UNC
	DATA AXT/".OUT",".ACM",".SUM",".DHY",".DPS",".MFS",".MPS",".ANN",
     &".SOL",".DTP",".MCM",".DCS",".SCO",".ACN",".DCN",".SCN",".DGN",
     &".DWT",".ACY",".ACO",".DSL",".MWC",".ABR",".ATG",".MSW",".APS",
     &".DWC",".DHS",".DGZ",".TNA",".NCM",".TNS",".DFA",".NCS",".DNC",
     &".SNC",".ANC"/
        DATA AXTN/"OUT","ACM","SUM","DHY","DPS","MFS","MPS","ANN",
     &"SOL","DTP","MCM","DCS","SCO","ACN","DCN","SCN","DGN",
     &"DWT","ACY","ACO","DSL","MWC","ABR","ATG","MSW","APS",
     &"DWC","DHS","DGZ","TNA","NCM","TNS","DFA","NCS","DNC",
     &"SNC","ANC"/

C Commented out by RICEU for adjusting output files
C       FULLDIR = TRIM(DIR)//'/'//AXTN(30)
C       FILENAM = ASTN//AXT(30)
C       CALL OPENV(KWTNA, FILENAM, FULLDIR, 'W')
C       FULLDIR = TRIM(DIR)//'/'//AXTN(31)
C       FILENAM = ASTN//AXT(31)
C       CALL OPENV(KWNCM, FILENAM, FULLDIR, 'W')
C       FULLDIR = TRIM(DIR)//'/'//AXTN(32)
C       FILENAM = ASTN//AXT(32)
C       CALL OPENV(KWTNS, FILENAM, FULLDIR, 'W')
       FULLDIR = TRIM(DIR)//'/'//AXTN(33)
       FILENAM = ASTN//AXT(33)
       CALL OPENV(KWNCF, FILENAM, FULLDIR, 'W')
C       FULLDIR = TRIM(DIR)//'/'//AXTN(34)
C       FILENAM = ASTN//AXT(34)
C       CALL OPENV(KWNCS, FILENAM, FULLDIR, 'W')

	IF(KFL(38).GT.0)WRITE(KWNCS,9567)
 9567 FORMAT(1X,'  RUN NAME     ',1X,'  LOCATION NAME       ',
     1'STATISTICAL WEATHER ',' STATISTICAL WIND   ',
	2' SOIL FILE NAME     ',
	3'OPERATION FILE NAME ',' LATITUDE ',' LONGITUDE',1X,
	4'SOIL5#',' ST ',5X,'  SOIL NAME  ',12X,'TEXTURE','   LAYER 1',
     51X,'   BD ',2X,'WILT PT ','FIELD C ','POROCITY',2X,'PH',4X,
     6'CATION EX',' LAYER 2',
     7'  BD  ',2X,'WILT PT ','FIELD C ','POROCITY',2X,'PH',2X,
     8'CATION EX')

	IF(KWHEAD==0)WRITE(KWSNC,9568)
 9568 FORMAT(1X,'  RUN NAME,    ',1X,'  LOCATION NAME,      ',
     1'STATISTICAL WEATHER,',' STATISTICAL WIND,  ',
	2' SOIL FILE NAME,    ',
	3'OPERATION FILE NAME,',' LATITUDE,',' LONGITUDE,',1X,
	4'SOIL5#,',' ST,',3X,'  SOIL NAME, ',11X,'TEXTURE,','  LAYER 1,',
     51X,'  BD, ',2X,'WILT PT,','FIELD C,','POROCITY,',1X,'PH,',3X,
     6'CATION EX,','LAYER 2,',
     7' BD, ',2X,'WILT PT,','FIELD C,','POROCITY,',1X,'PH,',1X,
     8'CATION EX,')

C  UNC
C     &".DWC",".DHS",".DGZ"/
	DO I=1,29
	IF(AXT(I)/="    ".AND.KFL(I)>0) THEN 
            FULLDIR = TRIM(DIR)//'/'//AXTN(I)
            CALL OPENV(KW(I),ASTN//AXT(I), FULLDIR, 'W')
        END IF
	END DO
    	RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE PESTF
C     EPIC0509
C     THIS SUBPROGRAM CALCULATES THE PEST FACTOR BASED ON THE MINIMUN
C     PEST FACTOR (PST(JJK)) FOR CROP JJK AND THE SUM OF DAILY PEST
C     DAMAGE(PSTS)
      INCLUDE 'EPCM0509_su.for'
      IF(PSTS.LE.0.)GO TO 18
      X1=PSTX*PSTS/IPST
      PSTF(JJK)=1.-(1.-PST(JJK))*X1/(X1+EXP(SCRP(9,1)-SCRP(9,2)*X1))
      GO TO 19
   18 PSTF(JJK)=1.
   19 RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE PSTAPP
C     EPIC0509
C     THIS SUBPROGRAM APPLIES PESTICIDES TO CROP CANOPY & SOIL
      INCLUDE 'EPCM0509_su.for'
      KP=LPC(IRO,KT)
      XX=PSTR(IRO,KT)*HE(JT1)*1000.
      SMMP(1,KP,MO)=SMMP(1,KP,MO)+XX
      TPAC(JJK,KP)=TPAC(JJK,KP)+XX
      VARP(1,KP)=XX
      X1=PCST(KP)*PSTR(IRO,KT)
      COST=COST+X1
      IF(KFL(20).GT.0)WRITE(KW(20),1)IYR,MO,KDA,PSTN(KP),KDC(JJK),KDP
     1(KP),IHC(JT1),NBE(JT1),NBT(JT1),X1,X1,PSTR(IRO,KT)
	PSTS=PSTS-PSTE(IRO,KT)*PARM(37)
      IF(NOP.GT.0)WRITE(KW(1),6)IYR,MO,KDA,PSTN(KP),PSTR(IRO,KT),HE(JT1)
     1,PSTE(IRO,KT),PSTS,X1
      IF(TLD(JT1).GT.0.)GO TO 2
      X1=XX*FGC
      PFOL(KP)=PFOL(KP)+X1
      PSTZ(KP,LD1)=PSTZ(KP,LD1)+XX-X1
      GO TO 5
    2 DO 3 K=1,NBSL
      ISL=LID(K)
      IF(TLD(JT1).LE.Z(ISL))GO TO 4
    3 CONTINUE
    4 PSTZ(KP,ISL)=PSTZ(KP,ISL)+XX
    5 RETURN
    1 FORMAT(1X,3I4,2X,A16,I6,2X,4I4,F10.2,10X,3F10.2)
    6 FORMAT(1X,I4,2I2,2X,A8,2X,'APPL RATE = ',F5.1,'KG/HA',2X,'APPL EFF
     1 = ',F6.2,2X,'KILL EFF = ',F6.2,2X,'PST IDX = ',E12.4,2X,'COST=',
     1F7.0,'$/HA')
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE PSTCY
C     EPIC0509
C     THIS SUBPROGRAM SIMULATES PESTICIDE TRANSPORT & DEGRADATION
      INCLUDE 'EPCM0509_su.for'
      DIMENSION NZ(90),NY(5)
      DATA NZ/1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,
     123,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,
     244,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,
     365,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,
     486,87,88,89,90/,NY/1,4,21,60,90/
      II=NZ(90)
      QQ=QD+SST
      Y2=YSD(NDRV)
      SQB(1)=QQ
      SYB(1)=Y2
      DO 14 I=2,5
      SQB(I)=SQB(I)+QQ-VQ(NZ(NY(I)))
   14 SYB(I)=SYB(I)+Y2-VY(NZ(NY(I)))
      DO 9 K=1,NDP
      ADD=0.
      SUM=0.
      TOT=0.
      X3=0.
      PQ=0.
      PY=0.
      Y1=PSTZ(K,LD1)
      IF(IGO.EQ.0)GO TO 3
      IF(PFOL(K).GT..01)GO TO 24
      PFOL(K)=0.
      GO TO 3
   24 IF(RWO.LT.2.54)GO TO 2
C     COMPUTE PESTICIDE WASH OFF FROM FOLIAGE
      WO=PWOF(K)*PFOL(K)
      PFOL(K)=PFOL(K)-WO
      Y1=Y1+WO
C     COMPUTE PESTICIDE DEGRADATION FROM FOLIAGE
    2 DGF=PFOL(K)*PHLF(K)
      PFOL(K)=PFOL(K)-DGF
      SMMP(6,K,MO)=SMMP(6,K,MO)+DGF
      VARP(6,K)=DGF
C     COMPUTE PESTICIDE LOSS FROM TOP SOIL LAYER IN RUNOFF,
C     LATERAL SUBSURFACE FLOW, & PERCOLATION
    3 IF(Y1.GT..01)GO TO 27
      Y1=0.
      GO TO 6
   27 DK=.0001*PKOC(K)*WOC(LD1)
      X1=PO(LD1)-S15(LD1)
      XX=X1+DK
      V=QD+SSF(LD1)+PKRZ(LD1)
      IF(V.LE.0.)GO TO 5
      VPST=Y1*(1.-EXP(-V/XX))
      CO=MIN(PSOL(K),VPST/(PKRZ(LD1)+PARM(18)*(QD+SSF(LD1))))
      CS=PARM(18)*CO
      X3=CO*PKRZ(LD1)
      PQ=CS*QD
      SMMP(2,K,MO)=SMMP(2,K,MO)+PQ
      VARP(2,K)=PQ
      SUM=CS*SSF(LD1)
	Y1=Y1-X3-PQ-SUM
C     WRITE(KW(1),3)IYR,MO,KDA,QD,SSF(LD1),Y1,VPST,CO,SUM,PQ
C     COMPUTE PESTICIDE LOSS WITH SEDIMENT
      IF(YEW.LT.1.E-10)GO TO 5
      CS=DK*Y1/XX
      PY=YEW*CS
      SMMP(5,K,MO)=SMMP(5,K,MO)+PY
      VARP(5,K)=PY
      Y1=Y1-PY
C     COMPUTE PESTICIDE DEGRADATION IN TOP SOIL LAYER
    5 DGS=Y1*PHLS(K)
      Y1=Y1-DGS
      TOT=DGS
      ADD=Y1
    6 PSTZ(K,LD1)=Y1
C     COMPUTE PESTICIDE MOVEMENT THRU SOIL LAYERS BY LATERAL
C     SUBSURFACE FLOW & PERCOLATION
C     COMPUTE PESTICIDE MOVEMENT THRU SOIL LAYERS BY LATERAL
      X2=0.
      DO 8 L1=2,NBSL
      ISL=LID(L1)
      Y1=PSTZ(K,ISL)
      Y1=Y1+X3
      X3=0.
      IF(Y1.GT..01)GO TO 28
      Y1=0.
      GO TO 8
   28 V=PKRZ(ISL)+SSF(ISL)
      IF(V.LE.0.)GO TO 7
      VPST=Y1*(1.-EXP(-V/(PO(ISL)-S15(ISL)+.0001*PKOC(K)*WOC(ISL))))
      CO=MIN(PSOL(K),VPST/(PKRZ(ISL)+PARM(18)*SSF(ISL)))
	CS=PARM(18)*CO
      X4=CS*SSF(ISL)
      IF(ISL.NE.IDR)GO TO 29
      SMMP(10,K,MO)=SMMP(10,K,MO)+X4
      VARP(10,K)=X4
   29 SUM=SUM+X4
      X3=CO*PKRZ(ISL)
      IF(L1.EQ.NBSL)X2=X3
      Y1=Y1-X4-X3
C     COMPUTE PESTICIDE DEGRADATION IN SOIL LAYERS
    7 DGS=Y1*PHLS(K)
      Y1=Y1-DGS
      TOT=TOT+DGS
      ADD=ADD+Y1
    8 PSTZ(K,ISL)=Y1
      SMMP(3,K,MO)=SMMP(3,K,MO)+X2
      VARP(3,K)=X2
      SMMP(4,K,MO)=SMMP(4,K,MO)+SUM
      VARP(4,K)=SUM
      SMMP(7,K,MO)=SMMP(7,K,MO)+TOT
      VARP(7,K)=TOT
      SMMP(9,K,MO)=ADD
      VARP(9,K)=ADD
      PLCH(K)=X2
      SSPS(K)=SUM
C     WRITE(KW(1),25)IYR,MO,KDA,RWO,WO,DGF,PQ,X2,SUM,PY,TOT,ADD,PFOL(K)
C     WRITE(KW(1),26)(PSTZ(K,LID(ISL)),L=1,NBSL)
C  25 FORMAT(1X,I4,2I2,10E12.4)
C  26 FORMAT(1X,10E12.4)
      PQST=PQ+SUM
      SPQ(1,K)=PQST
C 	SPQC(1,K)=25.*PQST/(QQ+1.E-5)
      SPY(1,K)=PY
      DO 15 I=2,5
      SPQ(I,K)=SPQ(I,K)+PQST-PVQ(K,NZ(NY(I)))
	IF(SPQ(I,K).LT.1.E-3.OR.SQB(I).LT.1.E-3)GO TO 18
	SPQC(I,K)=100.*SPQ(I,K)/SQB(I)
	GO TO 15
   18 SPQC(I,K)=0.
   15 SPY(I,K)=SPY(I,K)+PY-PVY(K,NZ(NY(I)))
      DO 16 I=1,5
      IF(APQ(I,K,IY).GT.SPQ(I,K))GO TO 17
      APQ(I,K,IY)=SPQ(I,K)
      AQB(I,K,IY)=SQB(I)
   17 IF(APQC(I,K,IY).GE.SPQC(I,K))GO TO 12
C     IF(I.NE.2)GO TO 13
C	WRITE(KW(1),4)IYR,MO,KDA,I,NY(I),NZ(NY(I))
C     WRITE(KW(1),11)PQST,SPQ(I,K),SQB(I),SPQC(I,K),APQC(I,K,IY),APQ(I,K
C    1,IY),AQB(I,K,IY)
      APQC(I,K,IY)=SPQC(I,K)
   12 IF(APY(I,K,IY).GT.SPY(I,K))GO TO 16
      APY(I,K,IY)=SPY(I,K)
      AYB(I,K,IY)=SYB(I)
   16 CONTINUE
      PVQ(K,II)=PQST
      PVY(K,II)=PY
      VQ(II)=QQ
      VY(II)=Y2
    9 CONTINUE
      I=90
   10 I1=I-1
      NZ(I)=NZ(I1)
      IF(I1.EQ.1)GO TO 1
      I=I1
      GO TO 10
    1 NZ(1)=II
      RETURN
    4 FORMAT(25I4)
   11 FORMAT(1X,10E13.5)
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE PSTEV
C     EPIC0509
C     THIS SUBPROGRAM ESTIMATES UPWARD NO3 MOVEMENT CAUSED BY SOIL EVAPO
      INCLUDE 'EPCM0509_su.for'
      IF(NEV.EQ.1)GO TO 4
      SUM=0.
      J=NEV
    2 ISL=LID(J)
      IF(WNO3(ISL).LT..001)GO TO 3
      SUM=SUM+SEV(ISL)
      IF(SUM.LE.0.)GO TO 3
      XX=SUM*WNO3(ISL)/(ST(ISL)+SUM)
      SSFN=SSFN+XX
      WNO3(ISL)=WNO3(ISL)-XX
      SUM=0.
    3 J=J-1
      IF(J.GT.1)GO TO 2
      WNO3(LD1)=WNO3(LD1)+SSFN
    4 RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE PSTTBL
C     EPIC0509
C     THIS SUBPROGRAM READS PESTICIDE TABLE TO DETERMINE PESTICIDE
C     PARAMETERS
      INCLUDE 'EPCM0509_su.for'
      DIMENSION XTP(8)
      IF(NDP.EQ.0)GO TO 165
      DO 164 L=1,NDP
      IF(KDP(L).EQ.JX(7))GO TO 168
  164 CONTINUE
  165 NDP=NDP+1
      KDP(NDP)=JX(7)
      KDP1(JX(7))=NDP
C     READ PESTICIDE TABLE
C  2  PSTN = PESTICIDE NAME
C  3  PSOL = PESTICIDE SOLUBILITY (PPM)
C  4  PHLS = PESTICIDE HALF LIFE IN SOIL (D)
C  5  PHLF = PESTICIDE HALF LIFE ON FOLIAGE (D)
C  6  PWOF = PESTICIDE WASH OFF FRACTION
C  7  PKOC = PESTICIDE ORGANIC C ADSORPTION COEF
C  8  PCST = PESTICIDE COST ($/KG)
  166 READ(KR(8),1)J1,PSTN(NDP),(XTP(L),L=3,8)
      IF(J1.NE.JX(7))GO TO 166
      PSOL(NDP)=XTP(3)
      PHLS(NDP)=XTP(4)
      PHLF(NDP)=XTP(5)
      PWOF(NDP)=XTP(6)
      PKOC(NDP)=XTP(7)
      PCST(NDP)=XTP(8)
      REWIND KR(8)
  168 RETURN
    1 FORMAT(I5,1X,A16,F12.0,3F8.0,F10.0,F8.0)    
C   1 FORMAT(I5,1X,A16,6E16.6)
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE REALC(DIR)
C     EPIC0509
C     THIS SUBPROGRAM ALLOWS REAL TIME UPDATES OF CROP VARIABLES
      CHARACTER(*), INTENT  (IN) ::DIR
      INCLUDE 'EPCM0509_su.for'
      DIMENSION XRTC(8,12)
	FNPP(X)=DMLA(JJK)*X/(X+EXP(PPCF(1,JJK)-PPCF(2,JJK)*X))
      WRITE(KW(1),170)IY,MO,KDA
      CALL PESTF
      WRITE(KW(1),174)CPNM(JJK),WS,SN,SP,SK,VAR(72),SSLT,PSTF(JJK)
      WRITE(KW(1),191)DM(JJK),SLAI(JJK),PPL0(JJK),UN1(JJK),UP1(JJK),UK1
     1(JJK),PRYG(JJK),PRYF(JJK)
      IF(ISTP.EQ.2)GO TO 1
      IF(ISTP.EQ.0)GO TO 192      
      CALL OPENV(KW(31),'RTCROP.DAT', DIR, 'W')
      READ(KW(31),3)IYS(1)
      READ(KW(31),2)(XRTC(I,JJK),I=1,8)
      CLOSE(KW(31))
    1 IF(IYS(1).EQ.0)GO TO 33
      DM(JJK)=XRTC(1,JJK)
      SLAI(JJK)=XRTC(2,JJK)
	PPL0(JJK)=XRTC(3,JJK)
	XLAI(JJK)=FNPP(PPL0(JJK))
      UN1(JJK)=XRTC(4,JJK)
      UP1(JJK)=XRTC(5,JJK)
      UK1(JJK)=XRTC(6,JJK)
      PRYG(JJK)=XRTC(7,JJK)
      PRYF(JJK)=XRTC(8,JJK)
      GO TO 33
  192 CALL OPENV(KW(31),'RTCROP.DAT',DIR, 'W')
      WRITE(KW(31),3)IYS(1)
      WRITE(KW(31),2)DM(JJK),SLAI(JJK),PPL0(JJK),UN1(JJK),UP1(JJK),UK1
     1(JJK),PRYG(JJK),PRYF(JJK)
      ISX=1
      CLOSE(KW(31))
   33 WRITE(KW(1),191)DM(JJK),SLAI(JJK),PPL0(JJK),UN1(JJK),UP1(JJK),UK1
     1(JJK),PRYG(JJK),PRYF(JJK)
      RETURN
    2 FORMAT(10F8.3)
    3 FORMAT(I4)
  170 FORMAT(///'*****UPDATE  YR = ',I2,'  MO = ',I2,'  DA = ',I2)
  174 FORMAT(5X,A4,10F7.2)
  191 FORMAT(5X,'BIOM=',F8.3,' T/HA   LAI=',F5.2,3X,'PPOP=',F6.1,'UN=',
     1F5.1,' KG/HA UP=',F5.1,' KG/HA',3X,'UK=',F5.1,' KG/HA',3X,'PRYG=',
     2F5.0,'$/T',3X,'PRYF=',F5.0,'$/T')
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE REALS
C     EPIC0509
C     THIS SUBPROGRAM ALLOWS REAL TIME UPDATES OF SOIL VARIABLES
      INCLUDE 'EPCM0509_su.for'
      DIMENSION XRTS(7,15)
      DATA IYCD/1/
      WRITE(KW(1),120)(ST(LID(L)),L=1,NBSL)
      WRITE(KW(1),120)(STMP(LID(L)),L=1,NBSL)
      WRITE(KW(1),120)(WNO3(LID(L)),L=1,NBSL)
      WRITE(KW(1),120)(WNH3(LID(L)),L=1,NBSL)
      WRITE(KW(1),120)(AP(LID(L)),L=1,NBSL)
      WRITE(KW(1),120)(EXCK(LID(L)),L=1,NBSL)
      WRITE(KW(1),120)(WSLT(LID(L)),L=1,NBSL)
      IF(ISTP.EQ.2)GO TO 2
      IF(ISTP.EQ.0)GO TO 198
      READ(KW(32),9)(IYS(I),I=2,8)
      DO 4 J=1,NBSL
      L=LID(J)
      READ(KW(32),6)(XRTS(I,L),I=1,7)
    4 CONTINUE
      REWIND KW(32)
      ISTP=0
      WRITE(KW(32),9)ISTP
      ISTP=2
    2 DO 195 J=1,NBSL
      L=LID(J)
      IF(IYS(2).EQ.1)ST(L)=XRTS(1,L)*(FC(L)-S15(L))+S15(L)
      IF(IYS(3).EQ.1)STMP(L)=XRTS(2,L)
      IF(IYS(4).EQ.1)WNO3(L)=XRTS(3,L)
      IF(IYS(5).EQ.1)WNH3(L)=XRTS(4,L)
      IF(IYS(6).EQ.1)AP(L)=XRTS(5,L)
      IF(IYS(7).EQ.1)EXCK(L)=XRTS(6,L)
      IF(IYS(8).EQ.1)WSLT(L)=XRTS(7,L)
  195 CONTINUE
      GO TO 196
  198 REWIND KW(32)
      IF(ISX.EQ.0)GO TO 5
      ISTP=1
      WRITE(KW(32),9)ISTP
    5 ISX=1
      IF(IYCD.EQ.0)GO TO 1
      DO 3 I=2,8
      IYS(I)=1
    3 CONTINUE
    1 WRITE(KW(32),9)(IYS(I),I=2,8)
      RZSW=0.
      PAW=0.
	Z1=0.
      DO 10 J=1,NBSL
      L=LID(J)
      X1=ST(L)-S15(L)
	DZ=1000.*(Z(L)-Z1)
	X4=X1/DZ
      X2=FC(L)-S15(L)
      X3=X1/X2
      RZSW=RZSW+X1
      PAW=PAW+X2
      WRITE(KW(32),11)Z(L),X1,X4,X2,X3,STMP(L),WNO3(L),WNH3(L),AP(L),
     1EXCK(L),WSLT(L)
   10 CONTINUE
      WRITE(KW(32),11)RZ,RZSW,PAW
  196 WRITE(KW(1),120)(ST(LID(L)),L=1,NBSL)
      WRITE(KW(1),120)(STMP(LID(L)),L=1,NBSL)
      WRITE(KW(1),120)(WNO3(LID(L)),L=1,NBSL)
      WRITE(KW(1),120)(WNH3(LID(L)),L=1,NBSL)
      WRITE(KW(1),120)(AP(LID(L)),L=1,NBSL)
      WRITE(KW(1),120)(EXCK(LID(L)),L=1,NBSL)
      WRITE(KW(1),120)(WSLT(LID(L)),L=1,NBSL)
      RETURN
    6 FORMAT(40X,F10.3,F10.2,5F10.0)
    9 FORMAT(20I4)
   11 FORMAT(F10.2,F10.1,F10.3,F10.1,2F10.2,5F10.0)
  120 FORMAT(1X,10F10.2)
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE SAJBD
C     EPIC0509
C     THIS SUBPROGRAM SIMULATES THE CHANGE IN BULK DENSITY WITHIN THE
C     PLOW LAYER CAUSED BY INFILTRATION SETTLING.
      INCLUDE 'EPCM0509_su.for'
      XX=RFV-QD
	DO 2 J=1,NBSL
      ISL=LID(J)
      IF(XX.LE.0.)GO TO 3
      IF(BDP(ISL).GE.BD(ISL))GO TO 3
      XX=XX*.2*(1.+2.*SAN(ISL)/(SAN(ISL)+EXP(8.597-.075*SAN(ISL))))/Z
     1(ISL)**1.6
      IF(XX.LT.200.)GO TO 1
      F=1.
      GO TO 4
    1 F=XX/(XX+EXP(SCRP(6,1)-SCRP(6,2)*XX))
    4 BDP(ISL)=BDP(ISL)+F*(BD(ISL)-BDP(ISL))
    3 XX=PKRZ(ISL)
      IF(Z(ISL).GT.BIG)GO TO 5
    2 CONTINUE
    5 RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE SBDSC(X1,X3,F,J,II)
C     THIS SUBPROGRAM ESTIMATES THE EFFECT OF BULK DENSITY ON ROOT
C     GROWTH AND SATURATED CONDUCTIVITY AS A FUNCTION OF TEXTURE
      INCLUDE 'EPCM0509_su.for'
      BD1=X3+.00445*SAN(J)
      BD2=X3+.35+.005*SAN(J)
      X2=ALOG(.01124*BD1)
      B2=(X2-ALOG(8.*BD2))/(BD1-BD2)
      B1=X2-B2*BD1
      X2=B1+B2*X1
      IF(X2.LT.-10.)GO TO 5
      IF(X2.GT.10.)GO TO 4
      F=X1/(X1+EXP(X2))
      GO TO 6
    5 F=1.
      GO TO 6
    4 F=.0001
    6 IF(II-2)1,2,3
    1 IF(SATC(J).GT.0.)GO TO 3
    2 XC=100.-CLA(J)
      SATC(J)=12.7*XC/(XC+EXP(11.45-.097*XC))+1.
      SATC(J)=F*SATC(J)
    3 RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE SCONT
C     THIS SUBPROGRAM ADDS SOIL LAYER CONTENTS OF WATER & NUTRIENTS
      INCLUDE 'EPCM0509_su.for'
      SW=0.
      APB=0.
      OCPD=0.
      RZSW=0.
      PAW=0.
      SWRZ=0.
      TEK=0.
      TFK=0.
      TFOP=0.
      TNO3=0.
      TNH3=0.
      TAP=0.
      TP=0.
      TMP=0.
      TRSD=0.
      TSK=0.
      TWN=0.
      TOC=0.
      ZLS=0.
      ZLM=0.
      ZLSL=0.
      ZLSC=0.
      ZLMC=0.
      ZLSLC=0.
      ZLSLNC=0.
      ZBMC=0.
      ZHSC=0.
      ZHPC=0.
      ZLSN=0.
      ZLMN=0.
      ZBMN=0.
      ZHSN=0.
      ZHPN=0.
      TOP=0.
      TNOR=0.
      TSLT=0.
      TSRZ=0.
      XX=0.
      PDSW=0.
      FCSW=0.
      IF(BIG.GT.0.)CALL SAJBD
      SUM=0.
      AWX1=0.
      AWX2=0. 
      DO 36 J=1,NBSL
      L=LID(J)
      TNO3=TNO3+WNO3(L)
      TNH3=TNH3+WNH3(L)
      TEK=TEK+EXCK(L)
      TFK=TFK+FIXK(L)
      TSK=TSK+SOLK(L)
      TSLT=TSLT+WSLT(L)
      WOC(L)=WBMC(L)+WHPC(L)+WHSC(L)+WLMC(L)+WLSC(L)
      ECND(L)=.15625*WSLT(L)/ST(L)
      IF(Z(L).GT.PMX)GO TO 34
      PDSW=PDSW+ST(L)-S15(L)
      FCSW=FCSW+FC(L)-S15(L)
      APB=APB+AP(L)
      OCPD=OCPD+WOC(L)
      SUM=SUM+WT(L)
      K1=J
      K2=L
   34 IF(Z(L).GT.RZ)GO TO 35
      SWRZ=SWRZ+ST(L)
      TNOR=TNOR+WNO3(L)
      TSRZ=TSRZ+WSLT(L)
      LZ=L
      L1=J
      RZSW=RZSW+ST(L)-S15(L)
      PAW=PAW+FC(L)-S15(L)
   35 TAP=TAP+AP(L)
      TOP=TOP+OP(L)
      TMP=TMP+PMN(L)
      TP=TP+WP(L)
      TRSD=TRSD+RSD(L)
      SW=SW+ST(L)
      TFOP=TFOP+FOP(L)
      ZLS=ZLS+WLS(L)
      ZLM=ZLM+WLM(L)
      ZLSL=ZLSL+WLSL(L)
      ZLSC=ZLSC+WLSC(L)
      ZLMC=ZLMC+WLMC(L)
      ZLSLC=ZLSLC+WLSLC(L)
      ZLSLNC=ZLSLNC+WLSLNC(L)
      ZBMC=ZBMC+WBMC(L)
      ZHSC=ZHSC+WHSC(L)
      ZHPC=ZHPC+WHPC(L)
      ZLSN=ZLSN+WLSN(L)
      ZLMN=ZLMN+WLMN(L)
      ZBMN=ZBMN+WBMN(L)
      ZHSN=ZHSN+WHSN(L)
      ZHPN=ZHPN+WHPN(L)
      WON(L)=WBMN(L)+WHPN(L)+WHSN(L)+WLMN(L)+WLSN(L)
      IF(KFL(18).EQ.0)GO TO 36
C     COMPUTE SOIL TEMP AT .5 M
      IF(Z(L).LT..5.OR.XX.GT..5)GO TO 553
      ATX=STMP(L)
C     COMPUTE CONTROL SECTION WATER CONTENT
  553 IF(Z(L).LT.ZCS(1))GO TO 546
      RTO=(ST(L)-S15(L))/(Z(L)-XX)
      IF(Z(L).LT.ZCS(2))GO TO 547
      IF(Z(L).GT.ZCS(3))GO TO 550
      IF(XX.GT.ZCS(1))GO TO 548
C     CASE 3
      AWX1=RTO*(ZCS(2)-ZCS(1))
      AWX2=RTO*(Z(L)-ZCS(2))
      GO TO 546
C     CASE 4
  548 AWX1=AWX1+RTO*(ZCS(2)-XX)
      AWX2=RTO*(Z(L)-ZCS(2))
      GO TO 546
  547 IF(XX.GT.ZCS(1))GO TO 549
C     CASE 1
      AWX1=RTO*(Z(L)-ZCS(1))
      GO TO 546
C     CASE 2
  549 AWX1=AWX1+ST(L)-S15(L)
      GO TO 546
  550 IF(XX.GT.ZCS(1))GO TO 551
C     CASE 5
      AWX1=RTO*(ZCS(2)-ZCS(1))
      AWX2=RTO*(ZCS(3)-ZCS(2))
      GO TO 546
  551 IF(XX.GT.ZCS(2))GO TO 552
C     CASE 6
      AWX1=AWX1+RTO*(ZCS(2)-XX)
      AWX2=RTO*(ZCS(3)-ZCS(2))
      GO TO 546
C     CASE 7
  552 IF(XX.GT.ZCS(3))GO TO 546
      AWX2=AWX2+RTO*(ZCS(3)-XX)
  546 XX=Z(L)
   36 CONTINUE
      IF(KFL(18).GT.0)WRITE(KW(18),554)IY,IYR,MO,KDA,AWX1,AWX2,ATX
C     WRITE(KW(18),100)ZCS
C     WRITE(KW(18),119)(LID(K),K=1,NBSL)
C     WRITE(KW(18),100)(Z(LID(K)),K=1,NBSL)
C     WRITE(KW(18),100)(ST(LID(K)),K=1,NBSL)
C     WRITE(KW(18),100)(S15(LID(K)),K=1,NBSL)
C     WRITE(KW(18),100)(FC(LID(K)),K=1,NBSL)
C     WRITE(KW(18),100)(STMP(LID(K)),K=1,NBSL)
      TWN=ZLSN+ZLMN+ZBMN+ZHSN+ZHPN
      TOC=ZLSC+ZLMC+ZBMC+ZHSC+ZHPC
	VAR(85)=TWN0-TWN-YN
	SMM(85,MO)=SMM(85,MO)+TWN0-TWN-YN
	TWN0=TWN
      IF(LZ.EQ.L)GO TO 37
      ZZ=RZ-Z(LZ)
      L1=LID(L1+1)
      RTO=ZZ/(Z(L1)-Z(LZ))
      RZSW=RZSW+(ST(L1)-S15(L1))*RTO
      PAW=PAW+RTO*(FC(L1)-S15(L1))
      SWRZ=SWRZ+ST(L1)*RTO
      TNOR=TNOR+WNO3(L1)*RTO
      TSRZ=TSRZ+WSLT(L1)*RTO
   37 SSW=SSW+RZSW
      IF(K1.EQ.NBSL)GO TO 38
      KK=LID(K1+1)
      RTO=(PMX-Z(K2))/(Z(KK)-Z(K2))
      PDSW=PDSW+RTO*(ST(KK)-S15(KK))
      FCSW=FCSW+RTO*(FC(KK)-S15(KK))
      APB=APB+RTO*AP(KK)
      OCPD=OCPD+RTO*WOC(KK)
      SUM=SUM+RTO*WT(KK)
C  38 OCPD=.1*OCPD/SUM
   38 APBC=1000.*APB/SUM
      OCPD=.001*OCPD
	RETURN
  554 FORMAT(2I4,2I2,3F10.2)
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE SDST(X,DG,DG1,X1,X2,I)
C     EPIC0509
      DIMENSION X(15)
      INCLUDE 'EPCM0509_su.for'
      IF(X(I).GT.0.)GO TO 4
      IF(I.GT.1)GO TO 2
      X(1)=X1
      GO TO 4
    2 XX=X2*DG
      IF(XX.GT.10.)GO TO 3
	RTO=DG*EXP(-XX)/DG1
	GO TO 1
    3 RTO=.0001
    1 X(I)=X(I-1)*RTO
    4 RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE SLTB(SLI,SLF,SLL,SLS,SLQ,SLB,SLE,KW)
C     EPIC0509
C     THIS SUBPROGRAM IS THE SALT BALANCE
      DIMENSION KW(40)
      WRITE(KW(1),2)
      DF=SLB+SLI+SLF-SLL-SLS-SLQ-SLE
      PER=100.*DF/(SLE+.0001)
      WRITE(KW(1),1)PER,DF,SLB,SLI,SLF,SLL,SLS,SLQ,SLE
      RETURN
    1 FORMAT(5X,'PER =',E13.6,2X,'DF  =',E13.6,2X,'BTOT=',E13.6,2X,
     1'IRR =',E13.6,2X,'FERT=',E13.6,2X,'PRK =',E13.6/5X,'SSF =',E13.6,
     22X,'Q   =',E13.6,2X,'FTOT=',E13.6)
    2 FORMAT(/T10,'SALT BALANCE')
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE SLTEV
C     EPIC0509
C     THIS SUBPROGRAM ESTIMATES UPWARD SALT MOVEMENT CAUSED BY SOIL
C     EVAPORATION
      INCLUDE 'EPCM0509_su.for'
      IF(NEV.EQ.1)GO TO 4
      J=NEV
      SUM=0.
    2 L=LID(J)
      X1=WSLT(L)
      IF(X1.LE.1.E-5)GO TO 3
      XX=MIN(.05*X1,SEV(L)*X1/(ST(L)+SEV(L)))
      SUM=SUM+XX
      WSLT(L)=WSLT(L)-XX
    3 J=J-1
      IF(J.GT.1)GO TO 2
      WSLT(LD1)=WSLT(LD1)+SUM
    4 RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE SOCIOA(IYR1,MZ,KK)
C     EPIC0509
C     THIS SUBPROGRAM OUTPUTS THE SOIL ORGANIC C AND N VARIABLES
      INCLUDE 'EPCM0509_su.for'
      WRITE(KW(14),30)IYR1,MZ,KK,CO2
      WRITE(KW(14),2)(SID(LORG(LID(J))),J=1,NBSL),SID(16)
      WRITE(KW(14),3)'DEPTH(M)',(Z(LID(I)),I=1,NBSL)
      WRITE(KW(14),3)'BD 33KPA(T/M3)',(BD(LID(I)),I=1,NBSL)
      WRITE(KW(14),1)'SAND(%)',(SAN(LID(I)),I=1,NBSL)
      WRITE(KW(14),1)'SILT(%)',(SIL(LID(I)),I=1,NBSL)
      WRITE(KW(14),1)'CLAY(%)',(CLA(LID(I)),I=1,NBSL)
      WRITE(KW(14),1)'ROCK(%)',(ROK(LID(I)),I=1,NBSL)
      WRITE(KW(14),1)'WLS(KG/HA)',(WLS(LID(I)),I=1,NBSL),ZLS
      WRITE(KW(14),1)'WLM(KG/HA)',(WLM(LID(I)),I=1,NBSL),ZLM
      WRITE(KW(14),1)'WLSL(KG/HA)',(WLSL(LID(I)),I=1,NBSL),ZLSL
      WRITE(KW(14),1)'WLSC(KG/HA)',(WLSC(LID(I)),I=1,NBSL),ZLSC
      WRITE(KW(14),1)'WLMC(KG/HA)',(WLMC(LID(I)),I=1,NBSL),ZLMC
      WRITE(KW(14),1)'WLSLC(KG/HA)',(WLSLC(LID(I)),I=1,NBSL),ZLSLC
      WRITE(KW(14),1)'WLSLNC(KG/HA)',(WLSLNC(LID(I)),I=1,NBSL),ZLSLNC
      WRITE(KW(14),1)'WBMC(KG/HA)',(WBMC(LID(I)),I=1,NBSL),ZBMC
      WRITE(KW(14),4)'WHSC(KG/HA)',(WHSC(LID(I)),I=1,NBSL),ZHSC
      WRITE(KW(14),4)'WHPC(KG/HA)',(WHPC(LID(I)),I=1,NBSL),ZHPC
      X1=.001*TOC
      WRITE(KW(14),4)'WOC(KG/HA)',(WOC(LID(I)),I=1,NBSL),X1
      WRITE(KW(14),1)'WLSN(KG/HA)',(WLSN(LID(I)),I=1,NBSL),ZLSN
      WRITE(KW(14),1)'WLMN(KG/HA)',(WLMN(LID(I)),I=1,NBSL),ZLMN
      WRITE(KW(14),1)'WBMN(KG/HA)',(WBMN(LID(I)),I=1,NBSL),ZBMN
      WRITE(KW(14),4)'WHSN(KG/HA)',(WHSN(LID(I)),I=1,NBSL),ZHSN
      WRITE(KW(14),4)'WHPN(KG/HA)',(WHPN(LID(I)),I=1,NBSL),ZHPN
      WRITE(KW(14),4)'WON(KG/HA)',(WON(LID(I)),I=1,NBSL),TWN
      RETURN
    1 FORMAT(1X,A14,16F12.1)
    2 FORMAT(T52,'SOIL LAYER NO'/T18,16(4X,A4,4X))
    3 FORMAT(1X,A14,16F12.2)
    4 FORMAT(1X,A14,16F12.0)
   30 FORMAT(//T10,3I4,5X,'ATMOS CO2 =',F5.0,' PPM')
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE SOCIOD(KK)
C     EPIC0509
C     THIS SUBPROGRAM OUTPUTS THE SOIL ORGANIC C AND N VARIABLES DAILY
      INCLUDE 'EPCM0509_su.for'
      WRITE(KW(15),30)IYR,MO,KK
      WRITE(KW(15),2)(SID(LORG(LID(J))),J=1,NBSL),SID(16)
      WRITE(KW(15),3)(Z(LID(I)),I=1,NBSL)
      WRITE(KW(15),21)(SOIL(12,LID(I)),I=1,NBSL),RZSW
      WRITE(KW(15),27)(STMP(LID(I)),I=1,NBSL)
      WRITE(KW(15),28)(RSD(LID(I)),I=1,NBSL),TRSD
      WRITE(KW(15),1)(RSPC(LID(I)),I=1,NBSL),TRSP
      WRITE(KW(15),4)(RNMN(LID(I)),I=1,NBSL),SNMN
C Added by RICEU for new N VARS
      WRITE(KW(15),33)(OISTDIFF(LID(I)),I=1,NBSL)
      WRITE(KW(15),34)(SWTP(LID(I)),I=1,NBSL)
      WRITE(KW(15),35)(PFACTOR(LID(I)),I=1,NBSL)
      WRITE(KW(15),36)(WFPS(LID(I)),I=1,NBSL)
      WRITE(KW(15),37)(GF(LID(I)),I=1,NBSL)
      WRITE(KW(15),38)(RNOTON2O(LID(I)),I=1,NBSL)
      WRITE(KW(15),39)(TN2O(LID(I)),I=1,NBSL),SNITN2O
      WRITE(KW(15),40)(RNITIN(LID(I)),I=1,NBSL),SRNITIN
      WRITE(KW(15),41)(RNITOUT(LID(I)),I=1,NBSL),SRNITOUT
      WRITE(KW(15),42)(TNOX(LID(I)),I=1,NBSL),SNITNOX
      WRITE(KW(15),43)(FSWC(LID(I)),I=1,NBSL)
      WRITE(KW(15),44)(HONO(LID(I)),I=1,NBSL),SHONO
      WRITE(KW(15),45)(TNO(LID(I)),I=1,NBSL),SNITNO
      WRITE(KW(15),46)(AVOLRICEU(LID(I)),I=1,NBSL),SVOLRICEU
      WRITE(KW(15),47)(DENITNO(LID(I)),I=1,NBSL),SDENITNO
      WRITE(KW(15),48)(DENITN2O(LID(I)),I=1,NBSL),SDENITN2O  
      WRITE(KW(15),51)(DRYPERIOD(LID(I)),I=1,NBSL)
      WRITE(KW(15),52)(NSTEP)
      WRITE(KW(15),53)(STR(LID(I)),I=1,NBSL)
      WRITE(KW(15),54)(POR(LID(I)),I=1,NBSL)
      WRITE(KW(15),55)IYR,MO,KK
C	  WRITE(KW(15),56)ISG
C	  WRITE(KW(15),57)BSLPT
C     RICEU END  	  
      RETURN
    1 FORMAT(T5,'CO2 LOSS(KG/HA)',T20,16F8.3)
    2 FORMAT(T52,'SOIL LAYER NO'/T18,16(4X,A4))
    3 FORMAT(T5,'DEPTH(M)',T20,16F8.2)
    4 FORMAT(T5,'NET MN(KG/HA)',T20,16F8.2)
   21 FORMAT(T5,'SW(M/M)',T20,16F8.3)
   27 FORMAT(T5,'TEMP(C)',T20,16F8.2)
   28 FORMAT(T5,'RSD(T/HA)',T20,16F8.2)
   30 FORMAT(//T10,3I4)
C Added by RICEU for new N VARS
   33 FORMAT(T5,'MOISTDIFF(m/m)',T20,16F8.3)
   34 FORMAT(T5,'SWSTPREV(m/m)',T20,16F8.3)
   35 FORMAT(T5,'PFACTOR',T20,16F8.5)
   36 FORMAT(T5,'WFPS',T20,16F8.3)
   37 FORMAT(T5,'DRR',T20,16F8.5)
   38 FORMAT(T5,'RNOTON2O',T20,16F8.5)
   39 FORMAT(T5,'NITN2OR(kg/ha)',T20,16F8.5)
   40 FORMAT(T5,'RNITIN(kg/ha)',T20,16F8.5)
   41 FORMAT(T5,'RNITOUT(kg/ha)',T20,16F8.5)
   42 FORMAT(T5,'NITNOX(kg/ha)',T20,16F8.5)
   43 FORMAT(T5,'FSWC',T20,16F8.4)
   44 FORMAT(T5,'HONO(kg/ha)',T20,16F8.5)
   45 FORMAT(T5,'NITNOR(kg/ha)',T20,16F8.5)
   46 FORMAT(T5,'AVOLRICEU(kg/ha)',T20,16F8.5)
   47 FORMAT(T5,'DENITNO(kg/ha)',T20,16F8.5)
   48 FORMAT(T5,'DENITN2O(kg/ha)',T20,16F8.5)
   51 FORMAT(T5,'DRYPERIOD',T20,16F8.3)
   52 FORMAT(T5,'NSTEP',T20,16I8)
   53 FORMAT(T5,'SWSTR(m/m)',T20,16F8.3)
   54 FORMAT(T5,'POR(m/m)',T20,16F8.5)
   55 FORMAT(T5,"DATE",T20,I4,'/',I2,'/',I2)
C   56 FORMAT(T5,'ISG',T20,I2)
C   57 FORMAT(T5,'BSLPT',T20,F4.3)   
C     RICEU END      
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE SPLA(I,I1,K,L,RTO)
C     EPIC0509
      INCLUDE 'EPCM0509_su.for'
      IF(L.GT.0)Z(K)=(Z(I)+Z(I1))*.5
      PSP(K)=PSP(I)
      BD(K)=BD(I)
      BDM(K)=BDM(I)
      CLA(K)=CLA(I)
      SIL(K)=SIL(I)
      SAN(K)=SAN(I)
      ROK(K)=ROK(I)
      SATC(K)=SATC(I)
      HCL(K)=HCL(I)
      STFR(K)=STFR(I)
      PH(K)=PH(I)
      STMP(K)=STMP(I)
      BDD(K)=BDD(I)
      BPC(K)=BPC(I)
      BDP(K)=BDP(I)
      SMB(K)=SMB(I)
      CEC(K)=CEC(I)
      IF(ISW.EQ.1.OR.ISW.EQ.3.OR.ISW.EQ.5)CEM(K)=CEM(I)
      CAC(K)=CAC(I)
      ALS(K)=ALS(I)
      ECND(K)=ECND(I)
      WT(K)=EAJL(WT(I),RTO)
      WNO3(K)=EAJL(WNO3(I),RTO)
      WP(K)=EAJL(WP(I),RTO)
      WHPN(K)=EAJL(WHPN(I),RTO)
      WHSN(K)=EAJL(WHSN(I),RTO)
      WBMN(K)=EAJL(WBMN(I),RTO)
      WLSN(K)=EAJL(WLSN(I),RTO)
      WLMN(K)=EAJL(WLMN(I),RTO)
      WHPC(K)=EAJL(WHPC(I),RTO)
      WHSC(K)=EAJL(WHSC(I),RTO)
      WBMC(K)=EAJL(WBMC(I),RTO)
      WLS(K)=EAJL(WLS(I),RTO)
      WLM(K)=EAJL(WLM(I),RTO)
      WLSL(K)=EAJL(WLSL(I),RTO)
      WLSC(K)=.42*WLS(K)
      WLMC(K)=.42*WLM(K)
      WLSLC(K)=.42*WLSL(K)
      WLSLNC(K)=WLSC(K)-WLSLC(K)
      RSD(K)=.001*(WLS(K)+WLM(K))
      WLSC(I)=.42*WLS(I)
      WLMC(I)=.42*WLM(I)
      WLSLC(I)=.42*WLSL(I)
      WLSLNC(I)=WLSC(I)-WLSLC(I)
      RSD(I)=.001*(WLS(I)+WLM(I))
      WOC(I)=WBMC(I)+WHPC(I)+WHSC(I)+WLMC(I)+WLSC(I)
      WOC(K)=WBMC(K)+WHPC(K)+WHSC(K)+WLMC(K)+WLSC(K)
      WON(I)=WBMN(I)+WHPN(I)+WHSN(I)+WLMN(I)+WLSN(I)
      WON(K)=WBMN(K)+WHPN(K)+WHSN(K)+WLMN(K)+WLSN(K)
      AP(K)=EAJL(AP(I),RTO)
      PMN(K)=EAJL(PMN(I),RTO)
      FOP(K)=EAJL(FOP(I),RTO)
      OP(K)=EAJL(OP(I),RTO)
      SOLK(K)=EAJL(SOLK(I),RTO)
      EXCK(K)=EAJL(EXCK(I),RTO)
      FIXK(K)=EAJL(FIXK(I),RTO)
      EQKS(K)=EAJL(EQKS(I),RTO)
      EQKE(K)=EAJL(EQKE(I),RTO)
      WSLT(K)=EAJL(WSLT(I),RTO)
      S15(K)=EAJL(S15(I),RTO)
      FC(K)=EAJL(FC(I),RTO)
      PO(K)=EAJL(PO(I),RTO)
      ST(K)=EAJL(ST(I),RTO)
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE SOLIO(YTP,L)
C     EPIC0509
C     THIS SUBPROGRAM OUTPUTS THE SOIL TABLE
      INCLUDE 'EPCM0509_su.for'
	DIMENSION YTP(16)
      WRITE(KW(L),2)(SID(LORG(LID(J))),J=1,NBSL),SID(16)
      WRITE(KW(L),3)'DEPTH(M)',(Z(LID(I)),I=1,NBSL)
      WRITE(KW(L),4)'POROSITY(M/M)',(SOIL(8,LID(I)),I=1,NBSL),YTP(4)
      WRITE(KW(L),4)'FC SW(M/M)',(SOIL(9,LID(I)),I=1,NBSL),YTP(1)
      WRITE(KW(L),4)'WP SW(M/M)',(SSF(LID(I)),I=1,NBSL),YTP(3)
      WRITE(KW(L),4)'SW(M/M)',(SOIL(12,LID(I)),I=1,NBSL),YTP(2)
      WRITE(KW(L),3)'SAT COND(MM/H)',(SATC(LID(I)),I=1,NBSL)
      WRITE(KW(L),3)'H SC(MM/H)',(HCL(LID(I)),I=1,NBSL)
      WRITE(KW(L),3)'BD 33KPA(T/M3)',(BD(LID(I)),I=1,NBSL),YTP(5)
      WRITE(KW(L),3)'BD DRY(T/M3)',(SOIL(13,LID(I)),I=1,NBSL)
      WRITE(KW(L),5)'SAND(%)',(SAN(LID(I)),I=1,NBSL)
      WRITE(KW(L),5)'SILT(%)',(SIL(LID(I)),I=1,NBSL)
      WRITE(KW(L),5)'CLAY(%)',(CLA(LID(I)),I=1,NBSL)
      WRITE(KW(L),5)'ROCK(%)',(ROK(LID(I)),I=1,NBSL)
      WRITE(KW(L),5)'PH',(PH(LID(I)),I=1,NBSL)
      WRITE(KW(L),5)'SM BS(CMOL/KG)',(SMB(LID(I)),I=1,NBSL)
      WRITE(KW(L),5)'CEC(CMOL/KG)',(CEC(LID(I)),I=1,NBSL)
      WRITE(KW(L),5)'AL SAT(%)',(ALS(LID(I)),I=1,NBSL)
      WRITE(KW(L),5)'CACO3(%)',(CAC(LID(I)),I=1,NBSL)
      WRITE(KW(L),6)'LAB P(G/T)',(SOIL(1,LID(I)),I=1,NBSL),TAP
      WRITE(KW(L),3)'P SORP RTO',(PSP(LID(I)),I=1,NBSL)
      WRITE(KW(L),6)'MN P AC(G/T)',(SOIL(2,LID(I)),I=1,NBSL),TMP
      WRITE(KW(L),6)'MN P ST(G/T)',(SOIL(3,LID(I)),I=1,NBSL),TOP
      WRITE(KW(L),6)'ORG P(G/T)',(SOIL(4,LID(I)),I=1,NBSL),TP
      WRITE(KW(L),6)'NO3(G/T)',(SOIL(5,LID(I)),I=1,NBSL),TNO3
      WRITE(KW(L),6)'SOLK(G/T)',(SOIL(14,LID(I)),I=1,NBSL),TSK
      WRITE(KW(L),6)'EXCK(G/T)',(SOIL(15,LID(I)),I=1,NBSL),TEK
      WRITE(KW(L),6)'FIXK(G/T)',(SOIL(16,LID(I)),I=1,NBSL),TFK
      WRITE(KW(L),6)'ORG N(G/T)',(SOIL(6,LID(I)),I=1,NBSL),TWN
      X1=.001*TOC
      WRITE(KW(L),3)'ORG C(%)',(SOIL(7,LID(I)),I=1,NBSL),X1
      WRITE(KW(L),3)'CROP RSD(T/HA)',(RSD(LID(I)),I=1,NBSL),TRSD
      WRITE(KW(L),5)'WLS(KG/HA)',(WLS(LID(I)),I=1,NBSL),ZLS
      WRITE(KW(L),5)'WLM(KG/HA)',(WLM(LID(I)),I=1,NBSL),ZLM
      WRITE(KW(L),5)'WLSL(KG/HA)',(WLSL(LID(I)),I=1,NBSL),ZLSL
      WRITE(KW(L),5)'WLSC(KG/HA)',(WLSC(LID(I)),I=1,NBSL),ZLSC
      WRITE(KW(L),5)'WLMC(KG/HA)',(WLMC(LID(I)),I=1,NBSL),ZLMC
      WRITE(KW(L),5)'WLSLC(KG/HA)',(WLSLC(LID(I)),I=1,NBSL),ZLSLC
      WRITE(KW(L),5)'WLSLNC(KG/HA)',(WLSLNC(LID(I)),I=1,NBSL),ZLSLNC
      WRITE(KW(L),5)'WBMC(KG/HA)',(WBMC(LID(I)),I=1,NBSL),ZBMC
      WRITE(KW(L),5)'WHSC(KG/HA)',(WHSC(LID(I)),I=1,NBSL),ZHSC
      WRITE(KW(L),5)'WHPC(KG/HA)',(WHPC(LID(I)),I=1,NBSL),ZHPC
      X1=.001*TOC
      WRITE(KW(L),5)'WOC(KG/HA)',(WOC(LID(I)),I=1,NBSL),X1
      WRITE(KW(L),5)'WLSN(KG/HA)',(WLSN(LID(I)),I=1,NBSL),ZLSN
      WRITE(KW(L),5)'WLMN(KG/HA)',(WLMN(LID(I)),I=1,NBSL),ZLMN
      WRITE(KW(L),5)'WBMN(KG/HA)',(WBMN(LID(I)),I=1,NBSL),ZBMN
      WRITE(KW(L),5)'WHSN(KG/HA)',(WHSN(LID(I)),I=1,NBSL),ZHSN
      WRITE(KW(L),5)'WHPN(KG/HA)',(WHPN(LID(I)),I=1,NBSL),ZHPN
      WRITE(KW(L),6)'WON(KG/HA)',(WON(LID(I)),I=1,NBSL),TWN
      WRITE(KW(L),3)'ECND(MMHO/CM)',(ECND(LID(I)),I=1,NBSL)
      WRITE(KW(L),6)'WSLT(KG/HA)',(WSLT(LID(I)),I=1,NBSL),TSLT
      WRITE(KW(L),4)'STFR',(STFR(LID(I)),I=1,NBSL)
      RETURN
    2 FORMAT(T52,'SOIL LAYER NO'/T22,16(4X,A4,4X))
    3 FORMAT(4X,A15,1X,16F12.2)
    4 FORMAT(4X,A15,1X,16F12.3)
    5 FORMAT(4X,A15,1X,16F12.1)
    6 FORMAT(4X,A15,1X,16F12.0)
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE SOLT
C     EPIC0509
C     THIS SUBPROGRAM ESTIMATES DAILY AVEAGE TEMPERATURE AT THE CENTER
C     OF EACH SOIL LAYER.
      INCLUDE 'EPCM0509_su.for'
      DATA XLAG/.8/
      XLG1=1.-XLAG
      F=ABD/(ABD+686.*EXP(-5.63*ABD))
      DP=1.+2.5*F
      WW=.356-.144*ABD
      B=ALOG(.5/DP)
      WC=.001*SW/(WW*Z(LID(NBSL)))
      F=EXP(B*((1.-WC)/(1.+WC))**2)
      DD=F*DP
      X2=TX+.5*(TMX-TMN)*(ST0-14.)/20.
      X3=(1.-BCV)*X2+BCV*STMP(LID(2))
      DST0=.5*(X2+X3)
      ZZ=2.*DD
      XX=0.
      X1=AVT-DST0
      DO 5 J=1,NBSL
      ISL=LID(J)
      ZD=(XX+Z(ISL))/ZZ
      F=ZD/(ZD+EXP(-.8669-2.0775*ZD))
      STMP(ISL)=XLAG*STMP(ISL)+XLG1*(F*X1+DST0)
      SEV(ISL)=0.
      XX=Z(ISL)
    5 CONTINUE
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE SPOFC(I)
C     EPIC0509
      INCLUDE 'EPCM0509_su.for'
      X1=.9*PO(I)
      IF(FC(I).LT.X1)GO TO 2
      X2=FC(I)-S15(I)
      FC(I)=X1
      S15(I)=FC(I)-X2
      IF(S15(I).LE.0.)S15(I)=.01*FC(I)
    2 RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE SPRNT(YTP)
C     EPIC0509
C     THIS SUBPROGRAM PREPARES SOIL DATA TABLE FOR OUTPUT, AND
C     CONVERTS WEIGHTS OF MATERIALS TO CONCENTRATION.
      INCLUDE 'EPCM0509_su.for'
	DIMENSION YTP(16)
      XX=0.
      YTP(1)=0.
      YTP(2)=0.
      YTP(3)=0.
      YTP(4)=0.
	YTP(5)=0.
      DO 2 J=1,NBSL
      I=LID(J)
      WT1=WT(I)/1000.
      SOIL(1,I)=AP(I)/WT1
      SOIL(2,I)=PMN(I)/WT1
      SOIL(3,I)=OP(I)/WT1
      SOIL(4,I)=WP(I)/WT1
      SOIL(5,I)=WNO3(I)/WT1
      SOIL(14,I)=SOLK(I)/WT1
      SOIL(15,I)=EXCK(I)/WT1
      SOIL(16,I)=FIXK(I)/WT1
      SOIL(6,I)=WON(I)/WT1
      SOIL(7,I)=.1*WOC(I)/WT(I)
      DG=(Z(I)-XX)*1000.
      X1=ST(I)-S15(I)
      X2=FC(I)-S15(I)
      SOIL(17,I)=X1/X2
      SOIL(18,I)=X1
      SOIL(19,I)=X2
      ECND(I)=.15625*WSLT(I)/ST(I)
      SSF(I)=S15(I)/DG
      YTP(1)=YTP(1)+FC(I)
      SOIL(9,I)=FC(I)/DG
      SOIL(8,I)=PO(I)/DG
      SOIL(13,I)=BDD(I)*BD(I)
      YTP(2)=YTP(2)+ST(I)
      SOIL(12,I)=ST(I)/DG
      YTP(3)=YTP(3)+S15(I)
      YTP(4)=YTP(4)+PO(I)
	YTP(5)=YTP(5)+WT(I)
      XX=Z(I)
    2 CONTINUE
      XX=Z(LID(NBSL))*1000.
      DO 3 I=1,4
      YTP(I)=YTP(I)/XX
    3 CONTINUE
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE SWN1530
C     THIS SUBPROGRAM COMPUTES THE SOIL WATER CONTENT(M/M) AND NO3 
C     CONCENTRATION(G/M^3) OF A SOIL AT 0.15 AND 0.3 M DEPTHS. 
      INCLUDE 'EPCM0509_su.for'
      SW15=0.
	SW30=0.
	SNN15=0.
	SNN30=0.
	SNA15=0.
	SNA30=0.
	WT15=0.
	WT30=0.
	DO 1 I=1,NBSL
	L=LID(I)
	IF(Z(L).GT..15)GO TO 2
	SW15=SW15+ST(L)
	SNN15=SNN15+WNO3(L)
	SNA15=SNA15+WNH3(L)
	WT15=WT15+WT(L)
	L1=L
    1 CONTINUE
      GO TO 5
    2 RTO=(.15-Z(L1))/(Z(L)-Z(L1))
      X1=RTO*ST(L)
      SW15=SW15+X1
	Y1=RTO*WNO3(L)
      SNN15=SNN15+Y1
	Y2=RTO*WNH3(L)
	SNA15=SNA15+Y2
	W1=RTO*WT(L)
	WT15=WT15+W1
	IF(Z(L).GT..3)GO TO 4
	SW30=SW30+ST(L)-X1
      SNN30=SNN30+WNO3(L)-Y1
	SNA30=SNA30+WNH3(L)-Y2
	WT30=WT30+WT(L)-W1
	L1=L
	II=I+1
	DO 3 J=II,NBSL
	L=LID(J)
	IF(Z(L).GT..3)GO TO 4
	SW30=SW30+ST(L)
	SNN30=SNN30+WNO3(L)
	SNA30=SNA30+WNH3(L)
	WT30=WT30+WT(L)
	L1=L
    3 CONTINUE
      GO TO 6
    4 RTO=(.3-Z(L1))/(Z(L)-Z(L1))
      SW30=SW30+RTO*ST(L)
      SNN30=SNN30+RTO*WNO3(L)
	SNA30=SNA30+RTO*WNH3(L)
     	WT30=WT30+RTO*WT(L)
    6	SW30=10.*SW30/WT30
     	SNN30=1000.*SNN30/WT30
	SNA30=1000.*SNA30/WT30
    5	SW15=10.*SW15/WT15
	SNN15=1000.*SNN15/WT15
	SNA15=1000.*SNA15/WT15
      RETURN
	END 
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE SWNN(CL,SA,OC,W1,F3)
!     EPIC0509
!     THIS SUBPROGRAM ESTIMATES FC AND WP USING NEAREST NEIGHBOR 
!     APPROACH.
      INCLUDE 'EPCM0509_su.for'
      DIMENSION DXS(NSX),XTP(3)
      XTP(1)=(SA-XAV(1))/XDV(1)
	XTP(2)=(CL-XAV(2))/XDV(2)
	XTP(3)=(OC-XAV(3))/XDV(3)
	XTP(1)=XTP(1)*BRNG/XRG(1)
	XTP(2)=XTP(2)*BRNG/XRG(2)
	XTP(3)=XTP(3)*BRNG/XRG(3)
	I1=1
	DO I=1,NSX
	DXS(I)=0.
		DO K=1,3
		DXS(I)=DXS(I)+(XSP(I,K)-XTP(K))**2
		END DO
      DXS(I)=SQRT(DXS(I))
!	IF(DXS(I)>1.5)CYCLE
	NX(I1)=I
	I1=I1+1
	END DO
	I1=I1-1
! 	WRITE(KW(1),2)NSNN,I1
      CALL ASORT3(DXS,NX,NSX)
	N1=MIN(I1,NSNN)
	SUM=0.
	DO I=1,N1
		X1=.01*XSP(NX(I),4)
		X3=X1+XSP(NX(I),5)
			DO K=1,3
				XTP(K)=XDV(K)*XSP(NX(I),K)*XRG(K)/BRNG+XAV(K)
			END DO
		SUM=SUM+DXS(I)
!		WRITE(KW(1),2)I,NX(I),DXS(I),XTP(1),SA,XTP(2),CL,XTP(3),OC,X1,
!    &	X3
	END DO
	TOT=0.
	DO I=1,N1
		DXS(I)=(SUM/DXS(I))**EXNN
		TOT=TOT+DXS(I)
	END DO
	W1=0.
	F3=0.
	DO I=1,N1
		DXS(I)=DXS(I)/TOT
!		WRITE(KW(1),1)DXS(NX(I))
		X1=.01*XSP(NX(I),4)
		X3=X1+XSP(NX(I),5)
		W1=W1+DXS(I)*X1
		F3=F3+DXS(I)*X3
	END DO
!	WRITE(KW(1),1)W1,F3
      RETURN
    1 FORMAT(10F10.4)
!   2 FORMAT(2I10,11F10.5)
	END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE SWRTNB(CM,CL,OC,SA,WC15,WC3RD,ZZ)
C     EPIC0509
C     THIS SUBPROGRAM USES OTTO BAUMER'S METHOD FOR ESTIMATING SOIL
C     WATER CONTENT AT 33 AND 1500 KPA.
      SI=100.-CL-SA
      OM=1.72*OC
      IF(ZZ.LT..25)GO TO 6
      IF(ZZ.LT.1.)GO TO 7
      BV=.915
      BW=.96
      BO=.1      
      GO TO 8
    6 BV=1.085
      BW=1.035
      BO=1.9
      GO TO 8
    7 BV=1.
      BW=1.
      BO=1.
    8 APD=100./(37.74+.3366*OM)
      CE=CM+2.428*OC+1.7*ZZ
      CA=MIN(.8,CE/CL)
      X1=CL*CL
      X2=CA*CA
      IF(CL.LT.10.)GO TO 1
      CAAF=9.9*X2
      GO TO 2
    1 CAAF=.099*X2*X1
    2 VOMO=BV*(42.84+1.37*OM+.00294*X1+CAAF+.0036*X1*X2-.0852*SA-.316*CL
     1*CA)
      VODF=AMAX1(.01,BV*(.277+.16*OM-2.72*CA*X2+.268*CL*CA+.00546*X1*CA
     1-.00184*X1*X2))
      WC15G=.71+.45*OM+.336*CL+.117*CL*CA**1.5
      VFS=.1*SA
      SICL=CL+.3333*(SI+VFS)
      IF(SICL.LT.15.)GO TO 3
      IF(SICL.LT.30.)GO TO 4
      CF1=0.
      GO TO 5
    3 CF1=1.
      GO TO 5
    4 CF1=2.-.0667*SICL
    5 A1=14.94+3.8*X2-.137*SA
      BDX=APD*(1.-.01*VOMO)
      SDF=SA-VFS
      CF3=37.74*SDF/((100.-SDF)/BDX+.3774*SDF)
      SAF=1.-.005*CF3*(CF1+1.)
      W3RDG=BW*(A1*SAF+WC15G+.746*OM)
      OAIR=BO*(3.8+.00018*X1-.03365*SA+.126*CL*CA+.000025*OM*SA*SA)
      WSV=VOMO*(1.-.01*OAIR)
      WSG=WSV/BDX
      DBD=APD*(1.-.01*(VOMO-VODF))
      DBS=(BDX-DBD)/WSG
      WC3RD=.01*W3RDG*(DBD+DBS*W3RDG)
      WC15=.01*WC15G*(DBD+DBS*WC15G)
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE SWRTNR(CL,SA,OC,WP,FC)
C     EPIC0509
C     THIS SUBPROGRAM USES WALTER RAWLS'S METHOD FOR ESTIMATING SOIL
C     WATER CONTENT AT 33 AND 1500 KPA.
      WP=.026+.005*CL+.0158*OC
      FC=.2576-.002*SA+.0036*CL+.0299*OC
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE SWTN
C     EPIC0509
      INCLUDE 'EPCM0509_su.for'
      DO 2 J=1,NBSL
      ISL=LID(J)
      IF(Z(ISL).GE..15)GO TO 1
    2 CONTINUE
      ISL=LID(NBSL)
    1 XX=ALOG10(S15(ISL))
      X1=AMAX1(.1,ST(ISL))
      WTN=AMAX1(5.,10.**(3.1761-1.6576*((ALOG10(X1)-XX)/(ALOG10(FC(ISL))
     1-XX))))
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE TBURN
C     EPIC0509
C     THIS SUBPROGRAM BURNS ALL STANDING AND FLAT CROP RESIDUE.
      INCLUDE 'EPCM0509_su.for'
      X1=PARM(49)*STL(JJK)
      DM(JJK)=DM(JJK)-X1
      STL(JJK)=STL(JJK)-X1
      X2=1.-PARM(49)
      RSD(LD1)=RSD(LD1)*X2
      STD=STD*X2
      STDO=0.
      X1=STDN*PARM(49)
      SMM(76,MO)=SMM(76,MO)+X1+STDON
      STDN=STDN-X1
      STDON=0.
      X1=STDP*PARM(49)
      FOP(LD1)=FOP(LD1)+X1+STDOP
      STDP=STDP-X1
      STDOP=0.
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE THVRT(YY,X3,X1,X6,X7,N1)
C     EPIC0509
C     THIS SUBPROGRAM HARVESTS ROOT CROPS.
      INCLUDE 'EPCM0509_su.for'
      JD=JJK
      X1=ORHI(JT1)
      XX=DM(JJK)
      X3=RW(JJK)
      XZ=X1*X3
      CALL PESTF
      X6=PSTF(JJK)
      TPSF(N1,JJK)=TPSF(N1,JJK)+X6
      NPSF(N1,JJK)=NPSF(N1,JJK)+1
      YY=XZ*HE(JT1)*X6
      X12=UN1(JJK)/XX
      X13=UP1(JJK)/XX
      X8=UK1(JJK)/XX
      X9=.9*STL(JJK)
      X10=X12*X9
	AD1=X10
      CALL NCNSTD(.05,X9,X10,LD1)
	U2=X13*X9 
	AD2=U2
	FOP(LD1)=FOP(LD1)+U2
      SOLK(LD1)=SOLK(LD1)+UK1(JJK)
      YLN=YY*X12
      YLP=YY*X13
      YLK=YY*X8
	XX=X1*(1.-HE(JT1))
	RW(JJK)=0.
	DO 2 J=1,IR
      ISL=LID(J)
      X11=RWT(ISL,JJK)*XX
	RWT(ISL,JJK)=RWT(ISL,JJK)*(1.-X1)
	X10=X11*X12
	AD1=AD1+X10
      CALL NCNSTD(.05,X11,X10,ISL)
      U2=X11*X13
	AD2=AD2+U2 
      FOP(ISL)=FOP(ISL)+U2
      RW(JJK)=RW(JJK)+RWT(ISL,JJK)
    2 CONTINUE
      YLD(JJK)=YY
      YLD1(N1,JJK)=YLD1(N1,JJK)+YY
      YLNF(N1,JJK)=YLNF(N1,JJK)+YLN
      YLPF(N1,JJK)=YLPF(N1,JJK)+YLP
      YLKF(N1,JJK)=YLKF(N1,JJK)+YLK
      X7=.001*X12
	STL(JJK)=STL(JJK)-X9
	DM(JJK)=RW(JJK)+STL(JJK)
      UN1(JJK)=UN1(JJK)-YLN-AD1
      UP1(JJK)=UP1(JJK)-YLP-AD2
      UK1(JJK)=UK1(JJK)-YLK
	HU(JJK)=HU(JJK)*.1
      SLAI(JJK)=.05
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE TILTBL
C     EPIC0509
C     THIS SUBPROGRAM READS EQUIPMENT TABLE TO DETERMINE PARAMETERS OF
C     INPUT OPERATIONS AND COMPUTES OPERATION COSTS(EQUIPMENT + TRACTOR)
      CHARACTER*4 PCAT,PCD
      CHARACTER*8 TILX
      CHARACTER*25 EQP
      INCLUDE 'EPCM0509_su.for'
      DIMENSION XTP(12),PCAT(5)
      DATA PCAT/'POWE','NON ','SELF','IRRI','CUST'/
      IF(NDT.EQ.0)GO TO 154
      DO 153 L=1,MXT
      IF(NBE(L).EQ.JX(4).AND.NBT(L).EQ.JX(5))GO TO 2
  153 CONTINUE
  154 NDT=MXT+1
      MXT=NDT
      NBE(NDT)=JX(4)
      NBT(NDT)=JX(5)
      NN=JX(4)
      COTL(NDT)=0.
      COOP(NDT)=0.
	JJ=JX(4)
      DO 5 J=1,2
      READ(KR(3),25)TILX
      READ(KR(3),25)TILX
C     READ EQUIPMENT DATA TABLE
C     TIL  = EQUIPMENT NAME
C     PCD  = POWER CODE
C  1  PRIC = PURCHASE PRICE($)--EXCEPTION CUSTOM = COST($/HA)
C  2  XLP  = INITIAL LIST PRICE IN CURRENT($)
C  3  HRY  = ANNUAL USE(H)
C  4  HRL  = LIFE OF EQUIP(H)
C  5  PWR  = POWER OF UNIT(KW)
C  6  WDT  = WIDTH OF PASS(M)
C  7  SPD  = OPERATING SPEED(KM/H)
C  8  RC1  = REPAIR COST COEF 1
C  9  RC2  = REPAIR COST COEF 2
C 10  XLB  = LUBRICANT FACTOR
C 11  FCM  = FUEL CONSUMPTION MULTIPLIER
C 12  RFV1 = REMAINING FARM VALUE PARM 1
C 13  RFV2 = REMAINING FARM VALUE PARM 2
C 14  EFM  = MACHINE EFFICIENCY
!          = GRAZING RATE (KG/HD/D) FOR IHC=19
C 15  RTI  = ANNUAL REAL INTEREST RATE($/$)
C 16  EMX  = MIXING EFFICIENCY (0-1)
C 17  RR   = RANDOM SURFACE ROUGHNESS CREATED BY TILLAGE OPERATION (MM)
C 18  TLD  = TILLAGE DEPTH(MM)
C 19  RHT  = RIDGE HEIGHT (MM)
C 20  RIN  = RIDGE INTERVAL (M)
C 21  DKH  = HEIGHT OF FURROW DIKES (MM) (BLANK IF DIKES NOT USED)
C 22  DKI  = DISTANCE BETWEEN FURROW DIKES (M)(BLANK IF DIKES NOT USED
C 23  IHC  = OPERATION CODE
C             1 = KILL CROP
C             2 = HARVEST WITHOUT KILL
C             3 = HARVEST ONCE DURING SIMULATION WITHOUT KILL
C             4 =
C             5 = PLANT IN ROWS
C             6 = PLANT WITH DRILL
C             7 = APPLY PESTICIDE
C             8 = IRRIGATE
C             9 = FERTILIZE
C            10 = BAGGING & TIES (COTTON)
C            11 = GINNING
C            12 = HAULING
C            13 = DRYING
C            14 = BURN
C            15 = PUDDLE
C            16 = DESTROY PUDDLE
C            17 = BUILDS FURROW DIKES
C            18 = DESTROYS FURROW DIKES
C            19 = START GRAZING
C            20 = STOP GRAZING
C            22 = AUTO MOW
C            23 = PLASTIC COVER
C            24 = REMOVE PLASTIC COVER    
C            25 = STOP DRAINAGE SYSTEM FLOW
C            26 = RESUME DRAINAGE FLOW
C 24  HE   = HARVEST EFFICIENCY(0-1)
C          = PESTICIDE APPLICATION EFFICIENCY
C 25  ORHI = OVER RIDES SIMULATED HI IF 0.<ORHI<1.
C 26  FRCP = FRACTION OF SOIL COMPACTED(TIRE WIDTH/TILLAGE WIDTH)
C 27  FPOP = FRACTION PLANT POPULATION REDUCED BY OPERATION
   16 READ(KR(3),18)J2,TILX,PCD,PRIC,XLP,HRY,HRL,PWR,WDT,SPD,RC1,RC2,
     1XLB,FCM,RFV1,RFV2,X1,RTI,(XTP(L),L=1,12)    
      IF(J2.NE.JJ)GO TO 16
	IF(J.GT.1)GO TO 17
      WDTE=WDT
      SPDE=SPD
	EFM(NDT)=X1
	TIL(NDT)=TILX
      EMX(NDT)=XTP(1)
      RR(NDT)=XTP(2)
      TLD(NDT)=XTP(3)*.001
      RHT(NDT)=XTP(4)
      RIN(NDT)=XTP(5)
      DKH(NDT)=XTP(6)
      DKI(NDT)=XTP(7)
      IHC(NDT)=XTP(8)
	HE(NDT)=XTP(9)
      ORHI(NDT)=XTP(10)
      FRCP(NDT)=XTP(11)
      FPOP(NDT)=XTP(12)
	IF(IHC(NDT)==NHC(19))ORHI(NDT)=.001*X1
	JJ=JX(5)
	IF(IHC(NDT).NE.NHC(17))GO TO 4
      RHTT=RHT(NDT)
	RGIN=RIN(NDT)
    4 IF(IHC(NDT).EQ.NHC(22))HMO(NDT)=-TLD(NDT)
	IF(IHC(NDT).NE.NHC(23))GO TO 17 
	PALB=RR(NDT)
	FCV=EFM(NDT)
   17 IF(HRY.GT.0.)GO TO 1
      IF(PCD.NE.PCAT(5))GO TO 20
      COTL(NDT)=PRIC-XLP
      COOP(NDT)=PRIC-XLP
      ICUS(NDT)=1
   20 REWIND KR(3)
      GO TO 160
    1 YR=MIN(30.,HRL/HRY)
      IF(NBYR.GT.1.AND.NSTP.EQ.0.AND.RTI.GT.0.)GO TO 23
      AMF=1./YR
      GO TO 24
   23 X1=(1.+RTI)**YR
      AMF=RTI*X1/(X1-1.+1.E-10)
   24 SALV=RFV1*XLP*RFV2**YR
      CSTA=AMF*(PRIC-SALV)/HRY
      CSTI=RTI*SALV/HRY
      CSTO=CSTA+CSTI
      TAR=XLP*RC1*(.001*HRL)**RC2/HRL
      FULU(NDT)=FCM*PWR
      CSFU=FULU(NDT)*FULP
      DO 8 I=1,4
      IF(PCD.EQ.PCAT(I))GO TO 9
    8 CONTINUE
    9 GO TO(10,11,12,22),I
   10 FLAB=1.1
      GO TO 13
   22 COTL(NDT)=CSTO+TAR
      COOP(NDT)=TAR
      GO TO 21
   11 IF(NBT(NDT).EQ.0)GO TO 22
      FLAB=.08
      GO TO 13
   12 FLAB=1.2
   13 CSTW=WAGE*FLAB
      TOCS=TAR+(1.+XLB)*CSFU+CSTW
      CAPM=10./(SPDE*WDTE*EFM(NDT))
      COOP(NDT)=TOCS*CAPM+COOP(NDT)
      TOCS=TOCS+CSTO
      COTL(NDT)=TOCS*CAPM+COTL(NDT)
	FULU(NDT)=CAPM*FULU(NDT)
C     WRITE(KW(1),3)NN,TILX,EQP,PCD,COTL(NDT)
C     WRITE(KW(1),19)PRIC,XLP,HRY,HRL,PWR,WDT,SPD,RC1,RC2,XLB,FCM,RFV1,
C    1RFV2,EFM,RTI,(XTP(L),L=4,15)
C     WRITE(KW(1),6)YR,AMF,SALV,CSTA,CSTI,CSTO,TAR,FULU,CSFU,CSTL,CSTW,
C    1TOCS,CAPM,COTL(NDT)
   21 NN=JX(5)
      REWIND KR(3)
      IF(NN.EQ.0)GO TO 160
    5 CONTINUE
      GO TO 160
    2 NDT=L
  160 RETURN
C   3 FORMAT(1X,I3,2X,A8,2X,A25,2X,A4,F10.3)
C   6 FORMAT(8F10.2)
   18 FORMAT(1X,I4,1X,A8,1X,A4,27F8.3)
   25 FORMAT(A8)
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE TLOP(CSTX,COX,JRT)
C     EPIC0509
C     THIS SUBPROGRAM CONTROLS ALL TILLAGE OPERATIONS INCLUDING PLANTING
C     HARVESTING, AND AUTOMATIC FERTILIZER APPLICATIONS AT PLANTING.
      INCLUDE 'EPCM0509_su.for'
	DIMENSION YTP(16)
      FNPP(X)=DMLA(JJK)*X/(X+EXP(PPCF(1,JJK)-PPCF(2,JJK)*X))
      JRT=0
      II=IHC(JT1)
      NN=NBC(IRO)
      N1=MAX0(1,NCP(JJK))
      IF(ABS(CND(IRO,KT)-CN0).LT.1.E-5)GO TO 2
      CALL HCNSLP(CND(IRO,KT),X3)
      CN0=CND(IRO,KT)
	SCI=MAX(3.,SMX*(1.-RZSW/PAW))
C      IF(Z(LID(NBSL)).LT.1.)SMX=SMX*SQRT(Z(LID(NBSL)))
    2 IF(II.EQ.NHC(1).OR.II.EQ.NHC(2).OR.II.EQ.NHC(3).OR.II.EQ.NHC(19)
     1.OR.II.EQ.NHC(22))GO TO 10
    	IF(II.EQ.NHC(5))GO TO 61
	IF(II.EQ.NHC(6))GO TO 53
	IF(II.EQ.NHC(7).OR.II.EQ.NHC(8))GO TO 57
	IF(II.EQ.NHC(10))GO TO 51
	IF(II.EQ.NHC(11))GO TO 52
	IF(II.EQ.NHC(12).OR.II.EQ.NHC(13))GO TO 56
	IF(II.EQ.NHC(14))GO TO 59
	IF(II.EQ.NHC(23))GO TO 63
	IF(II.EQ.NHC(24))GO TO 64
	GO TO 6
   51 CSTX=-CSTX*YLD1(N1,JJK)/(1.-WCY(JJK))
      COX=CSTX
      GO TO 57
   52 CSTX=-CSTX*YLD(JJK)/(1.-WCY(JJK))
      COX=CSTX
      GO TO 57
   56 IF(ICUS(JT1).EQ.0)GO TO 57
      CSTX=-CSTX*YLD(JJK)/(1.-WCY(JJK))
      COX=CSTX
      GO TO 57
   53 IDRL=1
   61 ISL=LID(2)
      DO 34 K=1,NN
      I2=LY(IRO,K)
      IF(JH(IRO,KT).EQ.KDC(I2))GO TO 27
   34 CONTINUE
      GO TO 26
   27 IF(KG(I2).GT.0)GO TO 26
      IF(STMP(ISL).GT.TBSC(I2)+2..OR.MO.GT.11)GO TO 3
   43 KOMP(KT)=0
   58 JRT=1
      RETURN
    3 AWC=RZSW
      AQV=0.
      ARF=0.
	IGO=IGO+1
   40 KC=KC+1
      IF(KC.GT.NN)KC=1
      IF(JE(KC).LT.12)GO TO 40
      JE(KC)=I2
      JJK=I2
      KG(JJK)=1
      JP(JJK)=0
	IYH(JJK)=1
	GSEP=0.
	GSVP=0.
	SRA=0.
      SWH(JJK)=0.
      SWP(JJK)=0.
      ACET(JJK)=0.
      XDLAI(JJK)=DLAI(JJK)
      WCYD=.3
      STDO=STDO+STD
      STDOK=STDOK+STDK
      STDON=STDON+STDN
      STDOP=STDOP+STDP
      STD=0.
      STDK=0.
      STDL=0.
      STDN=0.
      STDP=0.
      RD(JJK)=TLD(JT1)
      ROSP=RIN(JT1)
      HU(JJK)=0.
      DM(JJK)=SDW(JJK)*5.E-4
      DM1(JJK)=DM(JJK)
      RW(JJK)=.4*DM(JJK)
      RWT(ISL,JJK)=RW(JJK)
      CHT(JJK)=0.
      PPL0(JJK)=POP(JJK,IHU(JJK))
      XLAI(JJK)=FNPP(PPL0(JJK))
	DMLX(JJK)=XLAI(JJK)
      X1=SDW(JJK)*COSD(JJK)
      COST=COST+X1
      IR=2
      JPL(JJK)=1
	IF(NCP(JJK).EQ.0)NCP(JJK)=1
      N1=MAX0(1,NCP(JJK))
      IPLD(N1,JJK)=IYR*10000+MO*100+KDA
	IHVD(N1,JJK)=0
      IF(NOP.GT.0)WRITE(KW(1),32)IYR,MO,KDA,CPNM(JJK),CV,X1
      IF(KFL(20).GT.0)WRITE(KW(20),49)IYR,MO,KDA,TIL(JT1),KDC(JJK),II,
     1NBE(JT1),NBT(JT1),X1,X1,SDW(JJK)
    6 EE=EMX(JT1)
      PPL0(JJK)=(1.-FPOP(JT1))*PPL0(JJK)
      XLAI(JJK)=FNPP(PPL0(JJK))
	DMLX(JJK)=XLAI(JJK)
      DMX=TLD(JT1)
	IF(II.NE.NHC(19))CALL TMIX(EE,DMX,0)
      IF(DMX.GT.BIG)TLD(JT1)=BIG
	IF(II.EQ.NHC(15))GO TO 60
	IF(II.NE.NHC(16))GO TO 57
    	SATC(LID(2))=SATK
      GO TO 57
   60 SATC(LID(2))=PARM(33)
   57 IF(IDR.EQ.0)GO TO 66
      IF(II.EQ.NHC(25))GO TO 65
      IF(II.NE.NHC(26))GO TO 66
      HCL(IDR)=HCLD
	GO TO 66
   65 HCL(IDR)=HCLN
   66 IF(KFL(20).GT.0)WRITE(KW(20),50)IYR,MO,KDA,TIL(JT1),KDC(JJK),II,
     1NBE(JT1),NBT(JT1),CSTX,COX,FULU(JT1)
	SMM(92,MO)=SMM(92,MO)+FULU(JT1) 
	IF(II.EQ.NHC(2).OR.II.EQ.NHC(3).OR.II.EQ.NHC(19))GO TO 26
    7 XX=TLD(JT1)*1000.
      IF(NOP.GT.0)WRITE(KW(1),28)IYR,MO,KDA,TIL(JT1),XX,XHSM,CSTX
      IF(II.NE.NHC(17).AND.II.NE.NHC(18))GO TO 26
      IF(II.EQ.NHC(18))GO TO 9
      DHT=DKH(JT1)
      DKHL=DHT
      DKIN=DKI(JT1)
	IFD=1
      IF(NOP.GT.0)WRITE(KW(1),30)DHT,DKIN,XHSM
      GO TO 26
    9 IFD=0
      IF(NOP.GT.0)WRITE(KW(1),30)DHT,DKIN,XHSM
      GO TO 26
   59 CALL TBURN
      GO TO 7
   63 ICV=1
      GO TO 57
   64 ICV=0
      GO TO 57
   10 DO K=1,NN
      IF(KG(JE(K)).EQ.0)CYCLE
      IF(JH(IRO,KT).EQ.KDC(JE(K)))GO TO 37
	END DO
      CSTX=0.
      COX=0.
      GO TO 58
   37 JJK=JE(K)
      IF(IDC(JJK).NE.NDC(7).AND.IDC(JJK).NE.NDC(8).AND.IDC(JJK).NE.NDC
     1(10))GO TO 44
      IF(IYH(JJK).EQ.LYR(IRO,KT).OR.LYR(IRO,KT).EQ.1)GO TO 44
!     IF(IYH(JJK).LT.LYR(IRO,KT))GO TO 43
 	KOMP(KT)=1
	RETURN
   44 N1=MAX0(1,NCP(JJK))
      JHV=K
      KHV=1
	IF(II.EQ.NHC(1))GO TO 22
	IF(II/=NHC(2).AND.II/=NHC(19).AND.II/=NHC(22))THEN
		IF(IHT(JT1).GT.0)GO TO 26
		IHT(JT1)=1
	END IF
	HVWC=HWC(IRO,KT)
	IF(HVWC>0..AND.WCYD>HVWC.AND.MO<MOFX)THEN
	    JRT=1
		KOMP(KT)=0
		RETURN
	END IF
	IF(JP(JJK).GT.0)GO TO 13
      JP(JJK)=1
      IF(II.NE.NHC(3))NCR(JJK)=NCR(JJK)+1
   13 HUF(JJK)=AMAX1(HUF(JJK),HU(JJK))
      DMF(N1,JJK)=DM1(JJK)
      TRA(JJK)=SRA+TRA(JJK)
      IF(RD(JJK).GT.RDF(JJK))RDF(JJK)=RD(JJK)
      X9=DM(JJK)+.001
      X2=UN1(JJK)/X9
      X7=.001*X2
      X3=UP1(JJK)/X9
      X8=UK1(JJK)/X9
	XX=STD+1.E-10
      RNR=STDN/XX
      RPR=STDP/XX
      RKR=STDK/XX
      STDL=CLG*XX
      RLR=MIN(.8,STDL/(STD+1.E-5))
      IF(ORHI(JT1).GT.0.)GO TO 14
	IF(IDC(JJK)==NDC(8))THEN
	    F=1.
	ELSE
                XX=100.*SWH(JJK)/(SWP(JJK)+1.E-5)
	        F=XX/(XX+EXP(SCRP(10,1)-SCRP(10,2)*XX))
	END IF
      XX=AMAX1(AJHI(JJK)-WSYF(JJK),0.)

C     UNC: based on Modular EPIC Williams TLOP module for CO2 trend
C       FT=AMAX1(.1,1.+PARM(50)*(IYR-2000))
        FT=AMAX1(.1,1.+PARM(50)*(IYR-IYR0))

C      X1=MIN(F*XX+WSYF(JJK),.9*DM(JJK)/(STL(JJK)+1.E-10))*FT
        X1=(F*XX+WSYF(JJK))*FT
C     UNC

        IF(IDC(JJK)==NDC(8))THEN
                X2=PARM(76)/AWC
                X1=MIN(HI(JJK),X1*X2)
        END IF
C     WRITE(KW(1),31)SWH(JJK),SWP(JJK),AJHI(JJK),F,XX,X1
      X2=1000.*CNY(JJK)*(X7/BN(3,JJK))**.1
      X3=1000.*CPY(JJK)*(.001*X3/BP(3,JJK))**.1
C     X8=1000.*CKY(JJK)*(.001*X8/BK(3,JJK))**.1
      GO TO 17
   14 IF(II.NE.NHC(19).AND.II.NE.NHC(22))GO TO 16
      IF(IDC(JJK).NE.NDC(7).AND.IDC(JJK).NE.NDC(8).AND.IDC(JJK).NE.NDC
     1(10))GO TO 15
      KTT=0
      GO TO 26
   15 KOMP(KT)=0
      KTT=KT
	IF(II.EQ.NHC(19))GO TO 47
	XX=CHT(JJK)-HMO(JT1)
      IF(XX.LT..001.OR.NMW.LT.IMW)GO TO 42
      X1=XX/CHT(JJK)
      ZZ=HMO(JT1)/CHT(JJK)
      IF(STD.LT..001)YZ=0.
      NMW=0
      GO TO 45
   47 IF(AGPM.LT.GZLM)RETURN
      XX=GCOW*ORHI(JT1)/WSA
      X1=MIN(XX/AGPM,.9)
      GO TO 17
   16 X1=ORHI(JT1)
      IF(TLD(JT1).LE.0.)GO TO 17
      CALL THVRT(YY,X3,X1,X6,X7,N1)
      GO TO 25
   17 ZZ=AMAX1(.01,1.-X1)
      YZ=X1*STD
   45 XZ=X1*STL(JJK)
      HIF(N1,JJK)=X1
      AJHI(JJK)=0.
      CHT(JJK)=CHT(JJK)*ZZ
C     IF(HUI(JJK)*ZZ.LT..4)HU(JJK)=0.
!     HU(JJK)=HU(JJK)*ZZ
 	HU(JJK)=MAX(.001,HU(JJK)*PARM(69))
      SLAI(JJK)=SLAI(JJK)*ZZ
C     SLAI(JJK)=0.
      STL(JJK)=STL(JJK)*ZZ
      STD=STD*ZZ
      STDL=STDL*ZZ
      CALL PESTF
      TPSF(N1,JJK)=TPSF(N1,JJK)+PSTF(JJK)
      NPSF(N1,JJK)=NPSF(N1,JJK)+1
      YLD(JJK)=XZ*HE(JT1)*PSTF(JJK)
      YLSD=YZ*HE(JT1)
      Y4=YZ*RNR
      Y5=YZ*RPR
      Y6=YZ*RKR
      STDN=STDN-Y4
      STDP=STDP-Y5
      STDK=STDK-Y6
      STDL=AMAX1(STDL-YZ*RLR,.1*STD)
      X6=PSTF(JJK)
      X4=MIN(XZ*X2,UN1(JJK))
      X5=MIN(XZ*X3,UP1(JJK))
C     W1=MIN(XZ*X8,UK1(JJK))
      X11=XZ-YLD(JJK)+YZ-YLSD
      Z2=YLSD*RNR
      Z3=YLSD*RPR
      Z4=YLSD*RKR
      YLN=MIN(.9*(UN1(JJK)+STDN),YLD(JJK)*X2+Z2)
      YLP=MIN(.9*(UP1(JJK)+STDP),YLD(JJK)*X3+Z3)
C     YLK=MIN(.9*(UK1(JJK)+STDK),YLD(JJK)*X8+Z4)
      X10=X4-YLN+Y4
      CALL NCNSTD(.05,X11,X10,LD1)
      FOP(LD1)=FOP(LD1)+X5-YLP+Y5
C     SOLK(LD1)=SOLK(LD1)+W1-YLK+Y6
      YY=YLD(JJK)+YLSD
      YLD(JJK)=YY
      IF(ORHI(JT1).GT.0.)GO TO 20
      IF(IDC(JJK).EQ.NDC(9))GO TO 55
      YLD1(N1,JJK)=YLD1(N1,JJK)+YY
      X10=YY*PRYG(JJK)
      GO TO 21
   55 YLD1(N1,JJK)=YLD1(N1,JJK)+FTO(JJK)*YY
      YLD2(N1,JJK)=YLD2(N1,JJK)+YLD1(N1,JJK)*(1./FLT(JJK)-1.)
      GO TO 21
   20 YLD2(N1,JJK)=YLD2(N1,JJK)+YY
      X11=YY*PRYF(JJK)
   21 X3=RW(JJK)
      JD=JJK
	SRAF=SRA
	SRA=0.
      UN1(JJK)=AMAX1(1.E-5,UN1(JJK)-X4)
      UP1(JJK)=UP1(JJK)-X5
C     UK1(JJK)=AMAX1(1.E-5,UK1(K)-W1)
      DM(JJK)=DM(JJK)-XZ
      YLNF(N1,JJK)=YLNF(N1,JJK)+YLN
      YLPF(N1,JJK)=YLPF(N1,JJK)+YLP
      YLKF(N1,JJK)=YLKF(N1,JJK)+YLK
	GO TO 25
   22 IF(IPD.NE.5)GO TO 23
      CALL SPRNT(YTP)
      WRITE(KW(1),'(T5,A)')'SOIL DATA'
      CALL SOLIO(YTP,1)
   23 CALL TRDST
      NCP(JJK)=MIN0(NBCX(IRO,JJK),NCP(JJK)+1)
	IF(YLD1(N1,JJK)+YLD2(N1,JJK).LT.1.E-10)NCR(JJK)=NCR(JJK)+1
      JE(JHV)=12
	GSEF=GSEP
	SMGS(4)=SMGS(4)+GSEF
	GSEP=0.
	GSVF=GSVP
	SMGS(6)=SMGS(6)+GSVF
	GSVP=0.
      IGO=MAX0(0,IGO-1)
      KG(JJK)=0
	IYH(JJK)=0
	JPL(JJK)=0
      HU(JJK)=0.
      HUI(JJK)=0.
C    UNC 7-6-2011
C    RESETS HEAT UNITS TO ZERO
	HSM=0
C    UNC
      SLAI(JJK)=0.
      WLV(JJK)=0.
      ANA(JJK)=0.
      NFA=0
      NII=IRI
      CSTF(N1,JJK)=COST
      CSOF(N1,JJK)=COST-CSFX
      COST=0.
      CSFX=0.
      IHU(JJK)=IHU(JJK)+1
      IF(IHU(JJK).GT.NHU(JJK))IHU(JJK)=1
      CAW(N1,JJK)=AWC
      CQV(N1,JJK)=AQV
      CRF(N1,JJK)=ARF 
      ETG(N1,JJK)=ACET(JJK)+ETG(N1,JJK)
	PSTS=0.
      IPST=0
      WS=1.
	FGC=0.
	U=0.
	UN=0.
C   J. Williams: set plant to 0 lai and heigh after harvesting
      VARC=0.
C   End of J.Williams
      GO TO 6
   25 TYN=TYN+YLN
      TYP=TYP+YLP
      TYK=TYK+YLK
      IHVD(N1,JJK)=IYR*10000+MO*100+KDA
      IF(ICUS(JT1).EQ.0)GO TO 54
      IF(CSTX.GT.0.)GO TO 54
      CSTX=-CSTX*YLD(JJK)
      COX=CSTX
   54 IF(NOP.GT.0.AND.II.NE.NHC(19))WRITE(KW(1),29)IYR,MO,KDA,TIL(JT1),
     1CPNM(JD),YY,X9,X3,X1,X6,X7,WCYD,XHSM,CSTX
      GO TO 6
C  26 XX=1.
C     DO 1 J=1,NBSL
C     ISL=LID(J)
C     BDU=1.6+.005*SAN(ISL)
C     X2=100.*Z(ISL)
C     IF(X2.GT.20.)GO TO 38
C     X1=EXP(-X2)
C     GO TO 39
C  38 X1=0.
C  39 BDP(ISL)=BDP(ISL)+(BDU-BDP(ISL))*FRCP(JT1)*.5*(X1+XX)
C     CALL SBDSC(BDP(ISL),PARM(2),F,ISL,2)
C   1 XX=X1
C     IF(NOP.GT.0)WRITE(KW(1),41)(BDP(LID(I)),I=1,NBSL)
   26 IF(NOP.GT.0.AND.II.EQ.NHC(19))WRITE(KW(1),62)IYR,MO,KDA,TIL(JT1),
     1CPNM(JJK),YLD(JJK),YLSD,AGPM,STL(JJK),X3,X1,XHSM
	IF(KFL(29)>0.AND.II==NHC(19))WRITE(KW(29),31)IYR,MO,KDA,TIL(JT1),
     &CPNM(JJK),DM(JJK),X3,SLAI(JJK),STL(JJK),AGPM,X1,YLD(JJK),YLSD,XHSM 
   42 RETURN
   28 FORMAT(1X,I4,2I2,2X,A8,2X,'DPTH = ',F5.0,'MM',2X,'HUSC = ',F6.2,2X
     1,'COST=',F7.0,'$/HA')
   29 FORMAT(1X,I4,2I2,2X,A8,2X,A4,2X,'YLD=',F7.2,'T/HA',2X,'BIOM=',F7.2
     1,'T/HA',2X,'RW=',F5.2,'T/HA',2X,'HI=',F6.2,2X,'PSTF=',F6.2,2X,'NCN
     2=',F7.3,'G/G',2X,'WCY=',F6.2,2X,'HUSC=',F6.2,2X,'COST=',F7.0,'$/HA
     3')
   30 FORMAT('+',T45,'DKH=',F5.0,'MM',2X,'DKI=',F6.2,'M',2X,'HUSC=',F6.2
     1)
   31 FORMAT(1X,3I4,2X,A8,2X,A4,9F10.3)
   32 FORMAT(1X,I4,2I2,2X,A4,2X,'RSD = ',F5.1,'T',2X,'COST=',F7.0,'$/HA'
     1)
C  41 FORMAT(10X,'SOIL BULK DENSITY=',10F8.2)
   49 FORMAT(1X,3I4,2X,A8,8X,I6,6X,3I4,F10.2,10X,3F10.2)
   50 FORMAT(1X,3I4,2X,A8,8X,I6,6X,3I4,2F10.2,20X,F10.2)
   62 FORMAT(1X,I4,2I2,2X,A8,2X,A4,2X,'YLD=',F7.4,'T/HA',2X,'YSD=',F7.2,
     1'T/HA',2X,'AGPM=',F7.2,'T/HA',2X,'STL=',F7.2,'T/HA',2X'RWT=',F7.2,
     2'T/HA',2X,'HI=',F7.3,2X,'HUSC=',F6.2)
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE TMIX(EE,DMX,NMIX)
C     EPIC0509
C     THIS SUBPROGRAM MIXES N,P, AND CROP RESIDUE WITHIN THE PLOW DEPTH
C     ACCORDING TO THE MIXING EFFICIENCY OF THE IMPLEMENT, CALCULATES
C     THE CHANGE IN BULK DENSITY, CONVERTS STANDING RESIDUE TO FLAT
C     RESIDUE, AND ESTIMATES THE IMPLEMENT'S EFFECT ON RIDGE HEIGHT AND
C     INTERVAL.

C     Updated the subprogram with new version from EPIC1102 from J. Williams
C     2017-12-05,  EPA LR

      INCLUDE 'EPCM0509_su.for'
      DIMENSION TST(58),DUM(15),XTP(8),YTP(8)
      DATA ISM/58/
      IF(NMIX.GT.0)GO TO 25
      IF(DMX.GE.0.)GO TO 2
      IF(CHT(JJK)+DMX.LT.0.)GO TO 12
C     MOW, SHRED, ETC
      XX=(CHT(JJK)+DMX)/CHT(JJK)
      ZZ=XX*STD
      ZO=XX*STDO
      ZL=XX*STL(JJK)
      STD=STD-ZZ
      STDO=STDO-ZO
      STL(JJK)=STL(JJK)-ZL
      X1=1.-XX
      SLAI(JJK)=SLAI(JJK)*X1
      HU(JJK)=HU(JJK)*X1
      STDL=STDL*X1
      DX=DM(JJK)+1.E-10
      X1=ZZ+ZL+ZO
      ZZ=XX*STDN
      ZON=XX*STDON
      ZN=ZL*UN1(JJK)/DX
      STDN=STDN-ZZ
      STDON=STDON-ZON
      X2=ZZ+ZN+ZON
      CALL NCNSTD(.05,X1,X2,LD1)
      ZZ=XX*STDP
      STDP=STDP-ZZ
      ZOP=XX*STDOP
      STDOP=STDOP-ZOP
      ZP=ZL*UP1(JJK)/DX
      FOP(LD1)=FOP(LD1)+ZZ+ZP+ZOP
      ZZ=XX*STDK
      STDK=STDK-ZZ
      ZOK=XX*STDOK
      STDOK=STDOK-ZOK
      ZK=ZL*UK1(JJK)/DX
      SOLK(LD1)=SOLK(LD1)+ZZ+ZK+ZOK
      DM(JJK)=DM(JJK)-ZL
      UN1(JJK)=AMAX1(1.E-5,UN1(JJK)-ZN)
      UP1(JJK)=UP1(JJK)-ZP
      UK1(JJK)=AMAX1(1.E-5,UK1(JJK)-ZK)
      CHT(JJK)=-DMX
      GO TO 12
    2 IF(Z(LD1).GE.DMX)GO TO 12
      RFSM=0.
      RCF=1.
      IF(RHT(JT1).GE.RHT(JT2))GO TO 3
      RHTT=RHT(JT1)+(RHT(JT2)-RHT(JT1))*EXP(-DMX/TLD(JT2))
      GO TO 4
    3 RHTT=RHT(JT1)
      RGIN=RIN(JT1)
    4 F=1.-EXP(-56.9*DMX*EE)
      X1=STD*F
      STD=AMAX1(1.E-5,STD-X1)
      XX=F*STDP
      STDP=AMAX1(1.E-5,STDP-XX)
      FOP(LD1)=FOP(LD1)+XX
      XX=F*STDK
      STDK=AMAX1(1.E-5,STDK-XX)
      SOLK(LD1)=SOLK(LD1)+XX
      XX=F*STDL
      STDL=AMAX1(.1*STD,STDL-XX)
      XX=STDO*F
      STDO=AMAX1(1.E-5,STDO-XX)
      X1=X1+XX
      ZON=F*STDON
      STDON=AMAX1(1.E-5,STDON-ZON)
      ZN=F*STDN
      STDN=AMAX1(1.E-5,STDN-ZN)
      X2=ZN+ZON
      CALL NCNSTD(.05,X1,X2,LD1)
      XX=F*STDOP
      STDOP=AMAX1(1.E-5,STDOP-XX)
      FOP(LD1)=FOP(LD1)+XX
      XX=F*STDOK
      STDOK=AMAX1(1.E-5,STDOK-XX)
      SOLK(LD1)=SOLK(LD1)+XX
      RRUF=AMAX1(1.,RR(JT1))
      TLMF=0.
   25 DO 5 I=1,ISM
      TST(I)=0.
    5 CONTINUE
      XX=0.
      XTP(1)=WLS(LD1)
      XTP(2)=WLM(LD1)
      XTP(3)=WLSL(LD1)
      XTP(4)=WLSC(LD1)
      XTP(5)=WLMC(LD1)
      XTP(6)=WLSLC(LD1)
      XTP(7)=WLSN(LD1)
      XTP(8)=WLMN(LD1)
C     CALL NCONT(VAR(77),VAR(75),VAR(76),VAR(65),VAR(73))
      DO 6 J=1,NBSL
      ISL=LID(J)
      UN(ISL)=ROK(ISL)
      ZZ=Z(ISL)-XX
      IF(Z(ISL).GE.DMX)GO TO 7
      IF(NMIX.GT.0)GO TO 18
      BDP(ISL)=BDP(ISL)-(BDP(ISL)-.6667*BD(ISL))*EE
      CLA(ISL)=CLA(ISL)*ZZ
      SIL(ISL)=SIL(ISL)*ZZ
      ROK(ISL)=ROK(ISL)*ZZ
   18 PMA=PMN(ISL)+AP(ISL)
      DUM(ISL)=PSP(ISL)*PMA
      UP(ISL)=PMA-DUM(ISL)
C     EXTRACT THE FRACTION OF MATERIAL TO BE MIXED AND PLACE IN TST
C     STORAGE
      TST(1)=EAJL(WNO3(ISL),EE)+TST(1)
      TST(2)=EAJL(WHPN(ISL),EE)+TST(2)
      TST(3)=EAJL(WHSN(ISL),EE)+TST(3)
      TST(4)=EAJL(WBMN(ISL),EE)+TST(4)
      TST(5)=EAJL(WLSN(ISL),EE)+TST(5)
      TST(6)=EAJL(WLMN(ISL),EE)+TST(6)
      TST(7)=EAJL(WHPC(ISL),EE)+TST(7)
      TST(8)=EAJL(WHSC(ISL),EE)+TST(8)
      TST(9)=EAJL(WBMC(ISL),EE)+TST(9)
      TST(14)=EAJL(WLS(ISL),EE)+TST(14)
      TST(15)=EAJL(WLM(ISL),EE)+TST(15)
      TST(16)=EAJL(WLSL(ISL),EE)+TST(16)
      TST(10)=EAJL(WLSC(ISL),EE)+TST(10)
      TST(11)=EAJL(WLMC(ISL),EE)+TST(11)
      TST(12)=EAJL(WLSLC(ISL),EE)+TST(12)
      IF(J.GT.1)GO TO 17
      YTP(1)=WLS(LD1)
      YTP(2)=WLM(LD1)
      YTP(3)=WLSL(LD1)
      YTP(4)=WLSC(LD1)
      YTP(5)=WLMC(LD1)
      YTP(6)=WLSLC(LD1)
      YTP(7)=WLSN(LD1)
      YTP(8)=WLMN(LD1)
   17 TST(17)=EAJL(WP(ISL),EE)+TST(17)
      TST(19)=EAJL(AP(ISL),EE)+TST(19)
      TST(20)=EAJL(PMN(ISL),EE)+TST(20)
      TST(21)=EAJL(FOP(ISL),EE)+TST(21)
      TST(22)=EAJL(OP(ISL),EE)+TST(22)
      IF(NMIX.GT.0)GO TO 23
      TST(23)=EAJL(CLA(ISL),EE)+TST(23)
      TST(24)=EAJL(SIL(ISL),EE)+TST(24)
      TST(27)=EAJL(ROK(ISL),EE)+TST(27)
   23 TST(25)=EAJL(DUM(ISL),EE)+TST(25)
      TST(26)=EAJL(UP(ISL),EE)+TST(26)
      TST(28)=EAJL(WNH3(ISL),EE)+TST(28)
      I1=29
      DO 13 I=1,NDP
      TST(I1)=EAJL(PSTZ(I,ISL),EE)+TST(I1)
   13 I1=I1+1
      XX=Z(ISL)
    6 CONTINUE
      J=NBSL
      DMX=Z(LID(NBSL))
      GO TO 8
    7 RTO=(DMX-XX)/ZZ
      RE=RTO*EE
      IF(NMIX.GT.0)GO TO 19
      BDP(ISL)=BDP(ISL)-(BDP(ISL)-.6667*BD(ISL))*RE
      CLA(ISL)=CLA(ISL)*ZZ
      SIL(ISL)=SIL(ISL)*ZZ
      ROK(ISL)=ROK(ISL)*ZZ
   19 PMA=PMN(ISL)+AP(ISL)
      DUM(ISL)=PSP(ISL)*PMA
      UP(ISL)=PMA-DUM(ISL)
      TST(1)=EAJL(WNO3(ISL),RE)+TST(1)
      TST(2)=EAJL(WHPN(ISL),RE)+TST(2)
      TST(3)=EAJL(WHSN(ISL),RE)+TST(3)
      TST(4)=EAJL(WBMN(ISL),RE)+TST(4)
      TST(5)=EAJL(WLSN(ISL),RE)+TST(5)
      TST(6)=EAJL(WLMN(ISL),RE)+TST(6)
      TST(7)=EAJL(WHPC(ISL),RE)+TST(7)
      TST(8)=EAJL(WHSC(ISL),RE)+TST(8)
      TST(9)=EAJL(WBMC(ISL),RE)+TST(9)
      TST(10)=EAJL(WLSC(ISL),RE)+TST(10)
      TST(11)=EAJL(WLMC(ISL),RE)+TST(11)
      TST(12)=EAJL(WLSLC(ISL),RE)+TST(12)
      TST(14)=EAJL(WLS(ISL),RE)+TST(14)
      TST(15)=EAJL(WLM(ISL),RE)+TST(15)
      TST(16)=EAJL(WLSL(ISL),RE)+TST(16)
      TST(17)=EAJL(WP(ISL),RE)+TST(17)
      TST(19)=EAJL(AP(ISL),RE)+TST(19)
      TST(20)=EAJL(PMN(ISL),RE)+TST(20)
      TST(21)=EAJL(FOP(ISL),RE)+TST(21)
      TST(22)=EAJL(OP(ISL),RE)+TST(22)
      IF(NMIX.GT.0)GO TO 24
      TST(23)=EAJL(CLA(ISL),RE)+TST(23)
      TST(24)=EAJL(SIL(ISL),RE)+TST(24)
      TST(27)=EAJL(ROK(ISL),RE)+TST(27)
   24 TST(25)=EAJL(DUM(ISL),RE)+TST(25)
      TST(26)=EAJL(UP(ISL),RE)+TST(26)
      TST(28)=EAJL(WNH3(ISL),RE)+TST(28)
      I1=29
      DO 14 I=1,NDP
      TST(I1)=EAJL(PSTZ(I,ISL),RE)+TST(I1)
   14 I1=I1+1
    8 J1=J-1
C     COMPUTE MATERIAL PER DEPTH (KG/HA/M)
      DO 9 I=1,ISM
      TST(I)=TST(I)/DMX
    9 CONTINUE
      XX=0.
      DO 10 J=1,J1
      LL=LID(J)
      ZZ=Z(LL)-XX
C     DISTRIBUTE MIXED MATERIAL UNIFORMLY THRU PLOW DEPTH
      WNO3(LL)=TST(1)*ZZ+WNO3(LL)
      WHPN(LL)=TST(2)*ZZ+WHPN(LL)
      WHSN(LL)=TST(3)*ZZ+WHSN(LL)
      WBMN(LL)=TST(4)*ZZ+WBMN(LL)
      WLSN(LL)=TST(5)*ZZ+WLSN(LL)
      WLMN(LL)=TST(6)*ZZ+WLMN(LL)
      WHPC(LL)=TST(7)*ZZ+WHPC(LL)
      WHSC(LL)=TST(8)*ZZ+WHSC(LL)
      WBMC(LL)=TST(9)*ZZ+WBMC(LL)
      WLSC(LL)=TST(10)*ZZ+WLSC(LL)
      WLMC(LL)=TST(11)*ZZ+WLMC(LL)
      WLSLC(LL)=TST(12)*ZZ+WLSLC(LL)
      WLS(LL)=TST(14)*ZZ+WLS(LL)
      WLM(LL)=TST(15)*ZZ+WLM(LL)
      WLSL(LL)=TST(16)*ZZ+WLSL(LL)
      IF(J.GT.1)GO TO 1
      IF(WLS(LL).GT.XTP(1))CALL TMXL1(DMX,TST(14),WLS(LL),XTP(1),YTP(1))
      IF(WLM(LL).GT.XTP(2))CALL TMXL1(DMX,TST(15),WLM(LL),XTP(2),YTP(2))
      IF(WLSL(LL).GT.XTP(3))CALL TMXL1(DMX,TST(16),WLSL(LL),XTP(3),
     1YTP(3))
      IF(WLSC(LL).GT.XTP(4))CALL TMXL1(DMX,TST(10),WLSC(LL),XTP(4),
     1YTP(4))
      IF(WLMC(LL).GT.XTP(5))CALL TMXL1(DMX,TST(11),WLMC(LL),XTP(5),
     1YTP(5))
      IF(WLSLC(LL).GT.XTP(6))CALL TMXL1(DMX,TST(12),WLSLC(LL),XTP(6),
     1YTP(6))
      IF(WLSN(LL).GT.XTP(7))CALL TMXL1(DMX,TST(5),WLSN(LL),XTP(7),
     1YTP(7))
      IF(WLMN(LL).GT.XTP(8))CALL TMXL1(DMX,TST(6),WLMN(LL),XTP(8),
     1YTP(8))
    1 WLSLNC(LL)=WLSC(LL)-WLSLC(LL)
      RSD(LL)=.001*(WLS(LL)+WLM(LL))
      WP(LL)=TST(17)*ZZ+WP(LL)
      AP(LL)=TST(19)*ZZ+AP(LL)
      PMN(LL)=TST(20)*ZZ+PMN(LL)
      FOP(LL)=TST(21)*ZZ+FOP(LL)
      OP(LL)=TST(22)*ZZ+OP(LL)
      DUM(LL)=TST(25)*ZZ+DUM(LL)
      UP(LL)=TST(26)*ZZ+UP(LL)
      IF(NMIX.GT.0)GO TO 20
      ROK(LL)=TST(27)+ROK(LL)/ZZ
      CLA(LL)=TST(23)+CLA(LL)/ZZ
      SIL(LL)=TST(24)+SIL(LL)/ZZ
   20 WNH3(LL)=TST(28)*ZZ+WNH3(LL)
      I1=29
      DO 15 I=1,NDP
      PSTZ(I,LL)=TST(I1)*ZZ+PSTZ(I,LL)
   15 I1=I1+1
      PSP(LL)=DUM(LL)/(UP(LL)+DUM(LL))
      RX=MIN(1.,(100.-ROK(LL))/(100.-UN(LL)))
      FC(LL)=FC(LL)*RX
      S15(LL)=S15(LL)*RX
      PO(LL)=PO(LL)*RX
      CALL SPOFC(LL)
      SAN(LL)=100.-CLA(LL)-SIL(LL)
      WT(LL)=BD(LL)*ZZ*1.E4
      XX=Z(LL)
   10 CONTINUE
      XX=DMX-Z(LID(J1))
      WNO3(ISL)=WNO3(ISL)+TST(1)*XX
      WHPN(ISL)=WHPN(ISL)+TST(2)*XX
      WHSN(ISL)=WHSN(ISL)+TST(3)*XX
      WBMN(ISL)=WBMN(ISL)+TST(4)*XX
      WLSN(ISL)=WLSN(ISL)+TST(5)*XX
      WLMN(ISL)=WLMN(ISL)+TST(6)*XX
      WHPC(ISL)=WHPC(ISL)+TST(7)*XX
      WHSC(ISL)=WHSC(ISL)+TST(8)*XX
      WBMC(ISL)=WBMC(ISL)+TST(9)*XX
      WLSC(ISL)=WLSC(ISL)+TST(10)*XX
      WLMC(ISL)=WLMC(ISL)+TST(11)*XX
      WLSLC(ISL)=WLSLC(ISL)+TST(12)*XX
      WLS(ISL)=WLS(ISL)+TST(14)*XX
      WLM(ISL)=WLM(ISL)+TST(15)*XX
      WLSL(ISL)=WLSL(ISL)+TST(16)*XX
      WLSLNC(ISL)=WLSC(ISL)-WLSLC(ISL)
      RSD(ISL)=.001*(WLS(ISL)+WLM(ISL))
      WP(ISL)=WP(ISL)+TST(17)*XX
      AP(ISL)=AP(ISL)+TST(19)*XX
      PMN(ISL)=PMN(ISL)+TST(20)*XX
      FOP(ISL)=FOP(ISL)+TST(21)*XX
      OP(ISL)=OP(ISL)+TST(22)*XX
      DUM(ISL)=DUM(ISL)+TST(25)*XX
      UP(ISL)=UP(ISL)+TST(26)*XX
      IF(NMIX.GT.0)GO TO 21
      ROK(ISL)=ROK(ISL)+TST(27)*XX
      CLA(ISL)=CLA(ISL)+TST(23)*XX
      SIL(ISL)=SIL(ISL)+TST(24)*XX
   21 WNH3(ISL)=WNH3(ISL)+TST(28)*XX
C     CALL NCONT(VAR(77),VAR(75),VAR(76),VAR(65),VAR(73))
      I1=29
      DO 16 I=1,NDP
      PSTZ(I,ISL)=PSTZ(I,ISL)+TST(I1)*XX
   16 I1=I1+1
      PSP(ISL)=DUM(ISL)/(UP(ISL)+DUM(ISL))
      ZZ=Z(ISL)-Z(LID(J1))
      IF(NMIX.GT.0)GO TO 22
      ROK(ISL)=ROK(ISL)/ZZ
      CLA(ISL)=CLA(ISL)/ZZ
      SIL(ISL)=SIL(ISL)/ZZ
   22 IF(UN(ISL).LT.1.E-10)GO TO 11
      RX=MIN(1.,(100.-ROK(ISL))/(100.-UN(ISL)))
      FC(ISL)=FC(ISL)*RX
      S15(ISL)=S15(ISL)*RX
      PO(ISL)=PO(ISL)*RX
      CALL SPOFC(ISL)
   11 SAN(ISL)=100.-CLA(ISL)-SIL(ISL)
      WT(ISL)=BD(ISL)*ZZ*1.E4
      IF(EE.LT..9)GO TO 12
      LD2=LID(2)
      X1=STL(JJK)+STD+STDO
      DM(JJK)=DM(JJK)-STL(JJK)
      XX=STL(JJK)/(DM(JJK)+1.E-10)
      X2=XX*UN1(JJK)
      X3=XX*UP1(JJK)
      W1=XX*UK1(JJK)
      X4=STDN+STDON+X2
      CALL NCNSTD(.1,X1,X4,LD1)
      WLMN(LD2)=WLMN(LD2)+WLMN(LD1)
      WLMN(LD1)=0.
      WLSN(LD2)=WLSN(LD2)+WLSN(LD1)
      WLSN(LD1)=0.
      WLS(LD2)=WLS(LD2)+WLS(LD1)
      WLS(LD1)=0.
      WLM(LD2)=WLM(LD2)+WLM(LD1)
      WLM(LD1)=0.
      WLSL(LD2)=WLSL(LD2)+WLSL(LD1)
      WLSL(LD1)=0.
      WLSC(LD2)=WLSC(LD2)+WLSC(LD1)
      WLSC(LD1)=0.
      WLMC(LD2)=WLMC(LD2)+WLMC(LD1)
      WLMC(LD1)=0.
      WLSLC(LD2)=WLSLC(LD2)+WLSLC(LD1)
      WLSLC(LD1)=0.
      WLSLNC(LD2)=WLSLNC(LD2)+WLSLNC(LD1)
      WLSLNC(LD1)=0.
      FOP(LD2)=FOP(LD2)+FOP(LD1)+STDP+STDOP+X3
      FOP(LD1)=0.
      AP(LD2)=AP(LD2)+AP(LD1)
      AP(LD1)=0.
      SOLK(LD2)=SOLK(LD2)+STDK+STDOK+W1
      RSD(LD1)=0.
      STL(JJK)=0.
      STDO=0.
      STD=0.
      STDN=0.
      STDON=0.
      STDL=0.
      STDP=0.
      STDOP=0.
      STDK=0.
      STDOK=0.
      UN1(JJK)=AMAX1(1.E-5,UN1(JJK)-X2)
      UP1(JJK)=UP1(JJK)-X3
      UK1(JJK)=AMAX1(1.E-5,UK1(JJK)-W1)
C     CALL NCONT(VAR(77),VAR(75),VAR(76),VAR(65),VAR(73))
   12 RETURN
C  24 FORMAT(15E16.6)
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE TMXL1(DMX,T,W,X,Y)
C     THIS SUBPROGRAM PREVENTS TILLAGE FROM INCREASING TOP LAYER CONTENT
C     BY MIXING
      T=(T*DMX-X+Y)/(DMX-.01)
      W=X
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE TRDST
C     EPIC0509
C     THIS SUBPROGRAM CONVERTS LIVE BIOMASS TO RESIDUE WHEN A CROP IS 
C     KILLED.
      INCLUDE 'EPCM0509_su.for'
      STD=STD+STL(JJK)
      X1=DM(JJK)+1.E-10
      XX=UN1(JJK)/X1
      X3=UP1(JJK)/X1
      W1=UK1(JJK)/X1
      STDN=STDN+XX*STL(JJK)
      STDP=STDP+X3*STL(JJK)
      STDK=STDK+W1*STL(JJK)
      STDL=STDL+CLG*STL(JJK)
      DO 2 J=1,IR
      ISL=LID(J)
      X1=RWT(ISL,JJK)
      X2=X1*XX
      CALL NCNSTD(.1,X1,X2,ISL)
      FOP(ISL)=FOP(ISL)+X1*X3
      SOLK(ISL)=SOLK(ISL)+X1*W1
      RWT(ISL,JJK)=0.
    2 CONTINUE
      YLD(JJK)=0.
      DM(JJK)=0.
      STL(JJK)=0.
      UN1(JJK)=0.
      UP1(JJK)=0.
      UK1(JJK)=0.
      RW(JJK)=0.
      RD(JJK)=0.
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE WDOP(DIR)
!     EPIC0509
!     THIS SUBPROGRAM READS THE DAILY WEATHER LIST AND LOCATES THE 
!     SPECIFIED STATION (IWTH) OR THE NEAREST STATION IF IWTH=0.
      CHARACTER(*), INTENT  (IN) ::DIR
      INCLUDE 'EPCM0509_su.for'
      IF(IWTH==0)THEN
          D0=1.E20
          DO 
              READ(KR(27),*,IOSTAT=NFL)II,OPSCFILE,Y,X
	        IF(NFL/=0)EXIT
              RY=Y/CLT
              XX=YLS*SIN(RY)+YLC*COS(RY)*COS((X-XLOX)/CLT)
              D=6378.8*ACOS(XX)
              IF(D>=D0)CYCLE
              D0=D
              FWTH=OPSCFILE
	    END DO
      ELSE
          II=-1
          DO WHILE(II/=IWTH)
              READ(KR(27),*,IOSTAT=NFL)II,FWTH
              IF(NFL/=0)THEN
                  WRITE(*,*)'FWTH NO = ',IWTH,' NOT IN DAILY',
     &			' WEATHER LIST FILE'
	            PAUSE
	            STOP
	        END IF
	    END DO
	END IF	
      REWIND KR(27)
      CALL OPENV(KR(7),FWTH, DIR, 'R')
	CALL WREAD
      RETURN
	END

C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE WDEP(DIR)
!     EPIC0509
!     THIS SUBPROGRAM READS THE DAILY NDEP LIST AND LOCATES THE
!     SPECIFIED STATION (IWTH) OR THE NEAREST STATION IF IWTH=0.
      CHARACTER(*), INTENT  (IN) ::DIR
      INCLUDE 'EPCM0509_su.for'
!     write(*,*) "IWTH:", IWTH
!     IF(IWTH==0)THEN
          D0=1.E20
          DO
              READ(KR(30),*,IOSTAT=NFL)II,NDEPFILE,Y,X
                IF(NFL/=0)EXIT
              RY=Y/CLT
              XX=YLS*SIN(RY)+YLC*COS(RY)*COS((X-XLOX)/CLT)
              D=6378.8*ACOS(XX)
              IF(D>=D0)CYCLE
              D0=D
              FNTH=NDEPFILE
          END DO
!     ELSE
!         II=-1
!         DO WHILE(II/=IWTH)
!             READ(KR(30),*,IOSTAT=NFL)II,FNTH
!             IF(NFL/=0)THEN
!                 WRITE(*,*)'FNTH NO = ',IWTH,' NOT IN DAILY',
!    &                  ' NDEP LIST FILE'
!                   PAUSE
!                   STOP
!               END IF
!           END DO
!       END IF
      REWIND KR(30)
!     WRITE(*,*) "FNTH: ", TRIM(FNTH)
      CALL OPENV(KR(31),FNTH, DIR, 'R')
      RETURN
      END

C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE WGN
C     EPIC0509
C     THIS SUBPROGRAM SIMULATES DAILY PRECIPITATION, MAXIMUM AND MINUMUM
C     AIR TEMPERATURE, SOLAR RADIATION AND RELATIVE HUMIDITY.  ALSO
C     ALSO PROVIDES AND OPTIONS TO SIMULATE VARIOUS COMBINATIONS
C     GIVEN DAILY PRECIPITATION.
      INCLUDE 'EPCM0509_su.for'
      DIMENSION A(3,3), B(3,3), XX(3), E(3)
      DATA A/.594,.454,-.004,.076,.261,-.037,-.018,-.129,.222/,B/.767,.
     1304,.274,0.,.692,-.33,0.,0.,.873/
      XXX=.5*(TMXM-TMNM)
      III=1
      Z2=WFT(NWI,MO)
      YY=.9*Z2
      TXXM=TMXM+XXX*Z2
      RHM=(RH(NWI,MO)-YY)/(1.-YY)
      IF(RHM.LT..05)RHM=.5*RH(NWI,MO)
      RM=SRAM/(1.-.5*Z2)
      IF(RFV.LE.0.)GO TO 2
      TXXM=TXXM-XXX
      RM=.5*RM
      RHM=RHM*.1+.9
    2 DO 3 I=1,3
      V2=AUNIF(IDG(2))
      E(I)=ADSTN(V1,V2)
      V1=V2
    3 CONTINUE
      DO 4 I=1,3
      WX(I)=0.
      XX(I)=0.
      DO 4 J=1,3
      WX(I)=WX(I)+B(I,J)*E(J)
      XX(I)=XX(I)+A(I,J)*XIM(J)
    4 CONTINUE
      DO 5 I=1,3
      WX(I)=WX(I)+XX(I)
      XIM(I)=WX(I)
    5 CONTINUE
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE WHLRMX
C     EPIC0509
C     THIS SUBPROGRAM COMPUTES DAY LENGTH & MAX SOLAR RADIATION AT THE
C     EARTHS SURFACE.
      INCLUDE 'EPCM0509_su.for'
      XI=JDA
      SD=.4102*SIN((XI-80.25)/PIT)
      CH=-YTN*TAN(SD)
      IF(CH.GE.1.)GO TO 57
      IF(CH.LE.-1.)GO TO 58
      H=ACOS(CH)
      GO TO 59
   57 H=0.
      GO TO 59
   58 H=3.1416
   59 DD=1.+.0335*SIN((XI+88.2)/PIT)
      HRLT=7.72*H
      HR1=HRLT-HR0
      HR0=HRLT
      RAMX=30.*DD*(H*YLS*SIN(SD)+YLC*COS(SD)*SIN(H))
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE WIGV
C     EPIC0509
C     THIS SUBPROGRAM WRITES THE NAMES OF THE INPUT WEATHER VARIABLES.
      INCLUDE 'EPCM0509_su.for'
      J=4
      K=1
      N1=NGN
      WRITE(KW(1),673)FWTH
   37 CALL AISPL(N1,N2)
      IF(N1.EQ.0)GO TO 432
      KGN(N1)=1
      GO TO(42,38,39,40),N1
      KDT2(K)=8
      GO TO 41
   38 KDT2(K)=67
      GO TO 41
   39 KDT2(K)=3
      GO TO 41
   40 KDT2(K)=7
   41 K=K+1
   42 N1=N2
      J=J-1
      IF(J.GT.0)GO TO 37
  432 GO TO(43,44,45,46,47),K
   43 WRITE(KW(1),222)
      GO TO 48
   44 WRITE(KW(1),356)HED(KDT2(1))
      GO TO 48
   45 WRITE(KW(1),357)(HED(KDT2(J)),J=1,2)
      GO TO 48
   46 WRITE(KW(1),358)(HED(KDT2(J)),J=1,3)
      GO TO 48
   47 WRITE(KW(1),359)(HED(KDT2(J)),J=1,4)
   48 RETURN
  222 FORMAT(/T10,'**********RAIN IS INPUT**********')
  356 FORMAT(/T10,'**********RAIN,',1X,A4,', ARE INPUT**********')
  357 FORMAT(/T10,'**********RAIN,',2(1X,A4,','),' ARE INPUT**********'
     1)
  358 FORMAT(/T10,'**********RAIN,',3(1X,A4,','),' ARE INPUT**********'
     1)
  359 FORMAT(/T10,'**********RAIN,',4(1X,A4,','),' ARE INPUT**********'
     1)
  673 FORMAT(T10,'DAILY WEATHER FILE = ',A20)
	END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE WNDIR
C     EPIC0509
C     THIS SUBPROGRAM SIMULATES DAILY WIND DIRECTION
      INCLUDE 'EPCM0509_su.for'
      FX=AUNIF(IDG(6))
      DO 2 J=1,16
      J1=J-1
      IF(WDIR(MO,J).GT.FX)GO TO 3
    2 CONTINUE
      J=16
    3 IF(J.EQ.1)GO TO 4
      G=(FX-WDIR(MO,J1))/(WDIR(MO,J)-WDIR(MO,J1))
      GO TO 5
    4 G=FX/WDIR(MO,J)
    5 XJ1=J1
      TH=PI2*(G+XJ1-.5)/16.
      IF(TH.LT.0.)TH=PI2+TH
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE WNSPD
C     EPIC0509
C     THIS SUBPROGRAM SIMULATES MEAN DAILY WIND SPEED @ 10 M HEIGHT
      INCLUDE 'EPCM0509_su.for'
      V6=AUNIF(IDG(5))
      U10=UAVM(MO)*(-ALOG(V6))**UXP
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      FUNCTION WRAIN(R6,X,RFSD,RFSK,RFVM)
C     EPIC0509
C     THIS SUBPROGRAM COMPUTES DAILY PRECIPITATION AMOUNT FROM SKEWED
C     NORMAL DISTRIBUTION.
      XLV=(X-R6)*R6+1.
      XLV=(XLV**3-1.)*2./RFSK
      WRAIN=XLV*RFSD+RFVM
      IF(WRAIN.LT..01)WRAIN=.01
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE WREAD
C     EPIC0509
C     THIS SUBPROGRAM READS THE DAILY WEATHER FILE TO THE DAY BEFORE THE
C     SIMULATION BEGINS.
      INCLUDE 'EPCM0509_su.for'
      DIMENSION MOFD(12),XTP(7)
      DATA MOFD/31,29,31,30,31,30,31,31,30,31,30,31/
      READ(KR(7),2)I3,I2,I1,(XTP(L),L=1,7)
      J3=10000*I3
      J1=100*I2+J3
      II=I1+J1
        IF(II.LT.IBDT)GO TO 8
        IBDT=II
        IYR0=I3
        GO TO 9
    8 CALL ALPYR(I3,NT,LPYR)
    7 N1=MOFD(I2)
      IF(I2.EQ.2)N1=N1-NT
      J2=100*I2
      J1=J2+J3
    6 I1=I1+1
      II=J1+I1
      IF(II.EQ.IBDT)GO TO 4
      READ(KR(7),1,END=4)(XTP(L),L=1,7)
      IF(I1.LT.N1)GO TO 6
      I2=I2+1
      I1=0
      IF(I2.LE.12)GO TO 7
      I2=1
      I3=I3+1
      J3=10000*I3
      GO TO 8
    9 REWIND KR(7)
    4 RETURN
    1 FORMAT(14X,7F6.0)
    2 FORMAT(2X,3I4,7F6.0)
      END

C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE WRLHUM
C     EPIC0509
      INCLUDE 'EPCM0509_su.for'
      Q1=RHM-1.
      UPLM=RHM-Q1*EXP(Q1)
      BLM=RHM*(1.-EXP(-RHM))
      RHD=ATRI(BLM,RHM,UPLM,7)
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE WRWD(IEX)
C     EPIC0509
      INCLUDE 'EPCM0509_su.for'
      IF(IEX.GT.0)GO TO 1
      RN=1.-AUNIF(IDG(1))
      IF(RN.GT.PRWM+.001)GO TO 4
    1 V4=AUNIF(IDG(3))
      IF(ICDP.EQ.0)GO TO 2
      RFV=RFVM*(-ALOG(V4))**EXPK
      GO TO 3
    2 R6=RFSK/6.
      ZZ=ADSTN(V3,V4)
      RFV=WRAIN(R6,ZZ,RFSD,RFSK,RFVM)*PCF(NWI,MO)
      V3=V4
    3 LW=2
      GO TO 5
    4 RFV=0.
      LW=1
    5 RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE WSOLRA
C     EPIC0509
      INCLUDE 'EPCM0509_su.for'
      RX=RAMX-RM
      RA=RM+WX(3)*RX/4.
      IF(RA.LE.0.)RA=.05*RAMX
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE WTAIR
C     EPIC0509
      INCLUDE 'EPCM0509_su.for'
      TMX=TXXM+TXSD*WX(1)
      TMN=TMNM+TNSD*WX(2)
      IF(TMN.GT.TMX)TMN=TMX-.2*ABS(TMX)
      RETURN
      END
C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-*
      SUBROUTINE WTAIX
C     EPIC0509
C     THIS SUBPROGRAM GENERATES TMX AND TMN FOR MISSING RECORDS (999)
      INCLUDE 'EPCM0509_su.for'
      IF(TMX.LT.100.)GO TO 1
      TMX=AMAX1(TXXM+TXSD*WX(1),TMN+.2*ABS(TMN))
      GO TO 2
    1 TMN=MIN(TMNM+TNSD*WX(2),TMX-.2*ABS(TMX))
    2 RETURN
      END
      include "openv.f"
